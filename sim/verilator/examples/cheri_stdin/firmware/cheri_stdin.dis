
/home/kunyanliu/riscdev/new_fpga/out/run/cheri/cheri_stdin/default/default/firmware/cpu0/cheri_stdin.elf:	file format elf32-littleriscv
architecture: riscv32
start address: 0x20040080

Program Header:
    LOAD off    0x00001000 vaddr 0x20040000 paddr 0x20040000 align 2**12
         filesz 0x00000188 memsz 0x00000188 flags rwx
    LOAD off    0x00001190 vaddr 0x20040190 paddr 0x20040190 align 2**12
         filesz 0x00001630 memsz 0x00001630 flags r-x
    LOAD off    0x00003000 vaddr 0x200f0000 paddr 0x200417c0 align 2**12
         filesz 0x000002c0 memsz 0x000002c0 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**64
         filesz 0x00000000 memsz 0x00000000 flags rw-

Dynamic Section:

Sections:
Idx Name              Size     VMA      LMA      Type
  0                   00000000 00000000 00000000 
  1 .init             00000188 20040000 20040000 TEXT
  2 __cap_relocs      00000000 20040188 20040188 DATA
  3 .text             00001630 20040190 20040190 TEXT
  4 .data             000002c0 200f0000 200417c0 DATA
  5 .debug_info       000035c8 00000000 00000000 DEBUG
  6 .debug_abbrev     00001888 00000000 00000000 DEBUG
  7 .debug_aranges    00000040 00000000 00000000 DEBUG
  8 .debug_line       000039f0 00000000 00000000 DEBUG
  9 .debug_loc        0000221c 00000000 00000000 DEBUG
 10 .debug_str        000019d0 00000000 00000000 DEBUG
 11 .comment          000000e7 00000000 00000000 
 12 .riscv.attributes 00000030 00000000 00000000 
 13 .debug_frame      000007d0 00000000 00000000 DEBUG
 14 .debug_ranges     00000068 00000000 00000000 DEBUG
 15 .symtab           000099c0 00000000 00000000 
 16 .shstrtab         000000bb 00000000 00000000 
 17 .strtab           00000a77 00000000 00000000 

SYMBOL TABLE:
20040080 l       .init	00000000 
20040080 l       .init	00000000 
00000000 l       .debug_info	00000000 
00000000 l       .debug_abbrev	00000000 
20040188 l       .init	00000000 
00000000 l       .debug_line	00000000 .Lline_table_start0
20040190 l       .text	00000000 read_mcycle
20040190 l       .text	00000000 
20040190 l       .text	00000000 
20040196 l       .text	00000000 
200401b6 l       .text	00000000 forever
200401b6 l       .text	00000000 
200401bc l       .text	00000000 
200401be l       .text	00000000 
200401c6 l       .text	00000000 
200401c8 l       .text	00000000 sw_intr_done
200401c8 l       .text	00000000 
200401c8 l       .text	00000000 
00000156 l       .debug_info	00000000 
00000021 l       .debug_abbrev	00000000 
200401e4 l       .text	00000000 
000000cf l       .debug_line	00000000 .Lline_table_start0
00000000 l    df *ABS*	00000000 isctype.cc
200401e4 l       .text	00000000 
200401e4 l       .text	00000000 
200401e4 l       .text	00000000 
200401e4 l       .text	00000000 
200401f0 l       .text	00000000 
200401f4 l       .text	00000000 
200401f6 l       .text	00000000 
200401f8 l       .text	00000000 
200401f8 l       .text	00000000 
00000000 l       .debug_loc	00000000 
0000017e l       .debug_line	00000000 .Lline_table_start0
00000000 l       .debug_frame	00000000 
200401f8 l       .text	00000000 
00000000 l    df *ABS*	00000000 realloc.cc
200401f8 l       .text	00000000 
200401f8 l       .text	00000000 
200401f8 l       .text	00000000 
200401fa l       .text	00000000 
20040200 l       .text	00000000 
20040202 l       .text	00000000 
20040206 l       .text	00000000 
2004020e l       .text	00000000 .LBB0_2
20040206 l       .text	00000000 
20040208 l       .text	00000000 
2004020e l       .text	00000000 
2004020e l       .text	00000000 
20040212 l       .text	00000000 
20040212 l       .text	00000000 
2004021a l       .text	00000000 
2004023c l       .text	00000000 .LBB0_6
2004021e l       .text	00000000 
2004021e l       .text	00000000 
20040228 l       .text	00000000 .LBB0_5
20040226 l       .text	00000000 
20040228 l       .text	00000000 
20040228 l       .text	00000000 
20040234 l       .text	00000000 
20040234 l       .text	00000000 
2004023a l       .text	00000000 
2004023a l       .text	00000000 
2004023c l       .text	00000000 
2004023c l       .text	00000000 
20040240 l       .text	00000000 
20040246 l       .text	00000000 
20040246 l       .text	00000000 
00000013 l       .debug_loc	00000000 
00000031 l       .debug_loc	00000000 
0000004f l       .debug_loc	00000000 
00000062 l       .debug_loc	00000000 
00000077 l       .debug_loc	00000000 
00000218 l       .debug_line	00000000 .Lline_table_start0
00000024 l       .debug_frame	00000000 
20040246 l       .text	00000000 
00000000 l    df *ABS*	00000000 strtoul.cc
20040248 l       .text	00000000 
20040248 l       .text	00000000 
20040248 l       .text	00000000 
2004024a l       .text	00000000 
2004024a l       .text	00000000 
20040250 l       .text	00000000 
20040250 l       .text	00000000 
20040252 l       .text	00000000 
20040254 l       .text	00000000 
20040256 l       .text	00000000 
2004025a l       .text	00000000 
2004025a l       .text	00000000 .LBB0_1
2004025e l       .text	00000000 
2004025e l       .text	00000000 
20040262 l       .text	00000000 
20040262 l       .text	00000000 
20040266 l       .text	00000000 
20040266 l       .text	00000000 
20040268 l       .text	00000000 
2004026e l       .text	00000000 
2004026e l       .text	00000000 
20040270 l       .text	00000000 
20040270 l       .text	00000000 
20040272 l       .text	00000000 
2004028c l       .text	00000000 .LBB0_5
20040276 l       .text	00000000 
2004027a l       .text	00000000 
20040298 l       .text	00000000 .LBB0_7
20040284 l       .text	00000000 
20040288 l       .text	00000000 
20040290 l       .text	00000000 .LBB0_6
20040294 l       .text	00000000 
20040298 l       .text	00000000 
20040298 l       .text	00000000 
200402c0 l       .text	00000000 .LBB0_10
200402a6 l       .text	00000000 
200402aa l       .text	00000000 
200402aa l       .text	00000000 
200402d6 l       .text	00000000 .LBB0_12
200402b6 l       .text	00000000 
200402ba l       .text	00000000 
200402be l       .text	00000000 
200402c0 l       .text	00000000 
200402c4 l       .text	00000000 
200402da l       .text	00000000 .LBB0_13
200402c8 l       .text	00000000 
200402cc l       .text	00000000 
200402ce l       .text	00000000 
200402e6 l       .text	00000000 .LBB0_14
200402d2 l       .text	00000000 
200402e8 l       .text	00000000 .LBB0_15
200402d6 l       .text	00000000 
200402d6 l       .text	00000000 
200402da l       .text	00000000 
200402da l       .text	00000000 
200402dc l       .text	00000000 
200402e4 l       .text	00000000 
200402e6 l       .text	00000000 
200402e8 l       .text	00000000 
200402f0 l       .text	00000000 
200402f4 l       .text	00000000 
200402f4 l       .text	00000000 
200402f6 l       .text	00000000 
200402fe l       .text	00000000 
20040300 l       .text	00000000 
20040300 l       .text	00000000 .LBB0_16
20040300 l       .text	00000000 
20040304 l       .text	00000000 
20040306 l       .text	00000000 
2004030e l       .text	00000000 .LBB0_18
20040306 l       .text	00000000 
20040308 l       .text	00000000 
2004030c l       .text	00000000 
2004032c l       .text	00000000 .LBB0_22
2004030c l       .text	00000000 
2004030e l       .text	00000000 
2004030e l       .text	00000000 
20040316 l       .text	00000000 
20040378 l       .text	00000000 .LBB0_28
20040316 l       .text	00000000 
20040318 l       .text	00000000 
2004031e l       .text	00000000 
2004031e l       .text	00000000 
20040328 l       .text	00000000 .LBB0_21
20040322 l       .text	00000000 
20040324 l       .text	00000000 
20040328 l       .text	00000000 
2004032c l       .text	00000000 
2004032c l       .text	00000000 
20040332 l       .text	00000000 
20040338 l       .text	00000000 
20040338 l       .text	00000000 
2004033e l       .text	00000000 
20040348 l       .text	00000000 .LBB0_25
20040344 l       .text	00000000 
20040366 l       .text	00000000 .LBB0_27
20040348 l       .text	00000000 
20040356 l       .text	00000000 
2004035c l       .text	00000000 
2004035c l       .text	00000000 
20040362 l       .text	00000000 
20040362 l       .text	00000000 
20040364 l       .text	00000000 
20040366 l       .text	00000000 
20040368 l       .text	00000000 
2004036a l       .text	00000000 
2004036e l       .text	00000000 
20040372 l       .text	00000000 
20040372 l       .text	00000000 
20040374 l       .text	00000000 
20040376 l       .text	00000000 
20040378 l       .text	00000000 
2004038a l       .text	00000000 .LBB0_32
2004037c l       .text	00000000 
2004037e l       .text	00000000 
20040388 l       .text	00000000 .LBB0_31
20040380 l       .text	00000000 
20040382 l       .text	00000000 
20040388 l       .text	00000000 
2004038a l       .text	00000000 
2004038e l       .text	00000000 
20040394 l       .text	00000000 .LBB0_34
20040390 l       .text	00000000 
2004039a l       .text	00000000 .LBB0_36
20040394 l       .text	00000000 
20040398 l       .text	00000000 
2004039a l       .text	00000000 
2004039a l       .text	00000000 
200403a0 l       .text	00000000 
200403a6 l       .text	00000000 
200403a6 l       .text	00000000 
0000008a l       .debug_loc	00000000 
000000a9 l       .debug_loc	00000000 
000000c8 l       .debug_loc	00000000 
0000010a l       .debug_loc	00000000 
00000190 l       .debug_loc	00000000 
000001a5 l       .debug_loc	00000000 
0000020b l       .debug_loc	00000000 
0000022a l       .debug_loc	00000000 
0000026d l       .debug_loc	00000000 
000002af l       .debug_loc	00000000 
00000391 l       .debug_line	00000000 .Lline_table_start0
00000054 l       .debug_frame	00000000 
200403a6 l       .text	00000000 
00000000 l    df *ABS*	00000000 free.cc
200403a8 l       .text	00000000 
200403a8 l       .text	00000000 
200403a8 l       .text	00000000 
200403aa l       .text	00000000 
200403b0 l       .text	00000000 
200403b4 l       .text	00000000 
200403b4 l       .text	00000000 
20040466 l       .text	00000000 .LBB0_9
200403be l       .text	00000000 
200403c2 l       .text	00000000 
200403d4 l       .text	00000000 
200403d4 l       .text	00000000 
200403d8 l       .text	00000000 
200403dc l       .text	00000000 
200403e6 l       .text	00000000 
200403f8 l       .text	00000000 .LBB0_4
200403e6 l       .text	00000000 
200403ea l       .text	00000000 
200403f4 l       .text	00000000 
200403f8 l       .text	00000000 
200403fc l       .text	00000000 
20040438 l       .text	00000000 .LBB0_6
20040402 l       .text	00000000 
20040404 l       .text	00000000 
20040408 l       .text	00000000 
20040412 l       .text	00000000 
20040412 l       .text	00000000 
20040416 l       .text	00000000 
20040416 l       .text	00000000 
2004041a l       .text	00000000 
20040420 l       .text	00000000 
20040422 l       .text	00000000 
20040422 l       .text	00000000 
20040426 l       .text	00000000 
2004042a l       .text	00000000 
2004042a l       .text	00000000 
20040430 l       .text	00000000 
20040430 l       .text	00000000 
20040434 l       .text	00000000 
20040438 l       .text	00000000 
20040438 l       .text	00000000 
2004043a l       .text	00000000 
2004043a l       .text	00000000 
2004043e l       .text	00000000 
20040442 l       .text	00000000 
20040444 l       .text	00000000 
20040446 l       .text	00000000 
2004044a l       .text	00000000 
2004044e l       .text	00000000 
20040458 l       .text	00000000 
20040458 l       .text	00000000 
2004045c l       .text	00000000 
2004045c l       .text	00000000 
20040462 l       .text	00000000 
20040462 l       .text	00000000 
20040466 l       .text	00000000 
20040466 l       .text	00000000 
2004046a l       .text	00000000 
20040470 l       .text	00000000 
20040470 l       .text	00000000 
000002ce l       .debug_loc	00000000 
000002ec l       .debug_loc	00000000 
00000315 l       .debug_loc	00000000 
00000334 l       .debug_loc	00000000 
00000640 l       .debug_line	00000000 .Lline_table_start0
00000084 l       .debug_frame	00000000 
20040470 l       .text	00000000 
00000000 l    df *ABS*	00000000 setMallocDescriptor.cc
20040470 l       .text	00000000 
20040470 l       .text	00000000 
20040470 l       .text	00000000 
20040470 l       .text	00000000 
20040474 l       .text	00000000 
20040474 l       .text	00000000 
20040476 l       .text	00000000 
2004047a l       .text	00000000 
2004047c l       .text	00000000 
20040486 l       .text	00000000 
2004048a l       .text	00000000 
2004048e l       .text	00000000 
20040490 l       .text	00000000 
20040492 l       .text	00000000 
20040494 l       .text	00000000 
20040494 l       .text	00000000 
00000347 l       .debug_loc	00000000 
0000082a l       .debug_line	00000000 .Lline_table_start0
000000b4 l       .debug_frame	00000000 
20040494 l       .text	00000000 
00000000 l    df *ABS*	00000000 get_ptr.cc
20040494 l       .text	00000000 
20040494 l       .text	00000000 
20040494 l       .text	00000000 
20040494 l       .text	00000000 
2004049e l       .text	00000000 
2004049e l       .text	00000000 
200404a2 l       .text	00000000 
200404a6 l       .text	00000000 
200404aa l       .text	00000000 
200404aa l       .text	00000000 
200404ae l       .text	00000000 
200404b0 l       .text	00000000 
200404b0 l       .text	00000000 
0000035a l       .debug_loc	00000000 
0000036d l       .debug_loc	00000000 
0000095d l       .debug_line	00000000 .Lline_table_start0
000000d8 l       .debug_frame	00000000 
200404b0 l       .text	00000000 
00000000 l    df *ABS*	00000000 malloc.cc
200404b0 l       .text	00000000 
200404b0 l       .text	00000000 
200404b0 l       .text	00000000 
200404b2 l       .text	00000000 
200404b2 l       .text	00000000 
200404b8 l       .text	00000000 
20040504 l       .text	00000000 .LBB0_2
200404c6 l       .text	00000000 
200404ca l       .text	00000000 
200404d2 l       .text	00000000 
200404d4 l       .text	00000000 
200404de l       .text	00000000 
200404de l       .text	00000000 
200404e4 l       .text	00000000 
200404e4 l       .text	00000000 
200404e6 l       .text	00000000 
200404ea l       .text	00000000 
200404f2 l       .text	00000000 
200404f2 l       .text	00000000 
200404f6 l       .text	00000000 
20040500 l       .text	00000000 
20040500 l       .text	00000000 
20040504 l       .text	00000000 
20040504 l       .text	00000000 
2004050e l       .text	00000000 
2004050e l       .text	00000000 
2004050e l       .text	00000000 
2004050e l       .text	00000000 
2004050e l       .text	00000000 
20040510 l       .text	00000000 
20040510 l       .text	00000000 
20040516 l       .text	00000000 
2004054a l       .text	00000000 .LBB1_5
20040518 l       .text	00000000 
20040522 l       .text	00000000 
20040522 l       .text	00000000 
20040526 l       .text	00000000 
20040528 l       .text	00000000 
2004052a l       .text	00000000 
20040530 l       .text	00000000 
20040530 l       .text	00000000 .LBB1_2
20040530 l       .text	00000000 
2004053c l       .text	00000000 .LBB1_4
20040534 l       .text	00000000 
20040536 l       .text	00000000 
20040558 l       .text	00000000 .LBB1_7
20040538 l       .text	00000000 
2004053c l       .text	00000000 
2004053e l       .text	00000000 
2004053e l       .text	00000000 
20040542 l       .text	00000000 
20040542 l       .text	00000000 
20040546 l       .text	00000000 
2004054a l       .text	00000000 
2004054a l       .text	00000000 
2004054e l       .text	00000000 
2004054e l       .text	00000000 .LBB1_6
20040558 l       .text	00000000 
20040558 l       .text	00000000 
2004056e l       .text	00000000 .LBB1_9
2004055e l       .text	00000000 
20040562 l       .text	00000000 
20040564 l       .text	00000000 
20040564 l       .text	00000000 
20040568 l       .text	00000000 
200405b2 l       .text	00000000 .LBB1_10
2004056e l       .text	00000000 
2004056e l       .text	00000000 
20040576 l       .text	00000000 
20040576 l       .text	00000000 
20040578 l       .text	00000000 
20040578 l       .text	00000000 
2004057a l       .text	00000000 
2004057a l       .text	00000000 
2004057c l       .text	00000000 
20040584 l       .text	00000000 
20040584 l       .text	00000000 
20040588 l       .text	00000000 
20040588 l       .text	00000000 
2004058a l       .text	00000000 
2004058e l       .text	00000000 
2004058e l       .text	00000000 
20040590 l       .text	00000000 
2004059a l       .text	00000000 
2004059a l       .text	00000000 
200405a4 l       .text	00000000 
200405ac l       .text	00000000 
200405ac l       .text	00000000 
200405b2 l       .text	00000000 
200405b2 l       .text	00000000 
200405ba l       .text	00000000 
200405ba l       .text	00000000 
0000038b l       .debug_loc	00000000 
0000039e l       .debug_loc	00000000 
000003b1 l       .debug_loc	00000000 
000003c4 l       .debug_loc	00000000 
000003e3 l       .debug_loc	00000000 
0000040c l       .debug_loc	00000000 
00000435 l       .debug_loc	00000000 
00000448 l       .debug_loc	00000000 
00000472 l       .debug_loc	00000000 
00000a32 l       .debug_line	00000000 .Lline_table_start0
00000000 l       .debug_ranges	00000000 
000000fc l       .debug_frame	00000000 
200405ba l       .text	00000000 
00000000 l    df *ABS*	00000000 delete.cc
200405bc l       .text	00000000 
200405bc l       .text	00000000 
200405bc l       .text	00000000 
200405bc l       .text	00000000 
200405be l       .text	00000000 
200405be l       .text	00000000 
200405be l       .text	00000000 
200405be l       .text	00000000 
200405be l       .text	00000000 
200405be l       .text	00000000 
200405be l       .text	00000000 
200405c0 l       .text	00000000 
200405c0 l       .text	00000000 
200405c0 l       .text	00000000 
00000c97 l       .debug_line	00000000 .Lline_table_start0
00000148 l       .debug_frame	00000000 
200405c0 l       .text	00000000 
00000000 l    df *ABS*	00000000 rand.cc
200405c0 l       .text	00000000 
200405c0 l       .text	00000000 
200405c0 l       .text	00000000 
200405c0 l       .text	00000000 
200405c2 l       .text	00000000 
200405ca l       .text	00000000 
200405cc l       .text	00000000 
200405ce l       .text	00000000 
200405d0 l       .text	00000000 
200405d2 l       .text	00000000 
200405d4 l       .text	00000000 
200405d6 l       .text	00000000 
200405d6 l       .text	00000000 
200405d6 l       .text	00000000 
200405d6 l       .text	00000000 
200405d6 l       .text	00000000 
200405d6 l       .text	00000000 
200405de l       .text	00000000 
200405e0 l       .text	00000000 
200405e8 l       .text	00000000 
200405f4 l       .text	00000000 
200405f8 l       .text	00000000 
200405f8 l       .text	00000000 
20040604 l       .text	00000000 
20040604 l       .text	00000000 
2004060c l       .text	00000000 
2004060e l       .text	00000000 
2004060e l       .text	00000000 
20040612 l       .text	00000000 
20040614 l       .text	00000000 
20040614 l       .text	00000000 
20040618 l       .text	00000000 
2004061c l       .text	00000000 
20040628 l       .text	00000000 
2004062c l       .text	00000000 
2004062c l       .text	00000000 
20040630 l       .text	00000000 
20040630 l       .text	00000000 
20040632 l       .text	00000000 
20040632 l       .text	00000000 
20040634 l       .text	00000000 
20040634 l       .text	00000000 
20040634 l       .text	00000000 
20040634 l       .text	00000000 
20040634 l       .text	00000000 
20040634 l       .text	00000000 
2004063e l       .text	00000000 
20040640 l       .text	00000000 
20040640 l       .text	00000000 
2004064a l       .text	00000000 
2004064c l       .text	00000000 
2004064c l       .text	00000000 
2004064c l       .text	00000000 
2004064c l       .text	00000000 
2004064c l       .text	00000000 
2004064e l       .text	00000000 
20040654 l       .text	00000000 
20040656 l       .text	00000000 
20040658 l       .text	00000000 
20040658 l       .text	00000000 
2004065a l       .text	00000000 
2004065a l       .text	00000000 
20040660 l       .text	00000000 
20040664 l       .text	00000000 
20040666 l       .text	00000000 
20040666 l       .text	00000000 
20040668 l       .text	00000000 
2004066a l       .text	00000000 
20040670 l       .text	00000000 
20040670 l       .text	00000000 
20040670 l       .text	00000000 
20040670 l       .text	00000000 
20040670 l       .text	00000000 
20040672 l       .text	00000000 
20040678 l       .text	00000000 
2004067a l       .text	00000000 
2004067c l       .text	00000000 
2004067e l       .text	00000000 
2004067e l       .text	00000000 .LBB4_1
2004067e l       .text	00000000 
20040696 l       .text	00000000 .LBB4_3
20040684 l       .text	00000000 
2004068e l       .text	00000000 
20040690 l       .text	00000000 
20040690 l       .text	00000000 
20040692 l       .text	00000000 
20040692 l       .text	00000000 
20040694 l       .text	00000000 
20040696 l       .text	00000000 
20040698 l       .text	00000000 
200406a0 l       .text	00000000 
200406a0 l       .text	00000000 
00000485 l       .debug_loc	00000000 
00000498 l       .debug_loc	00000000 
000004ab l       .debug_loc	00000000 
000004be l       .debug_loc	00000000 
000004d1 l       .debug_loc	00000000 
000004ea l       .debug_loc	00000000 
000004fd l       .debug_loc	00000000 
0000051b l       .debug_loc	00000000 
00000539 l       .debug_loc	00000000 
0000054c l       .debug_loc	00000000 
0000056b l       .debug_loc	00000000 
0000058a l       .debug_loc	00000000 
00000d7e l       .debug_line	00000000 .Lline_table_start0
00000018 l       .debug_ranges	00000000 
00000030 l       .debug_ranges	00000000 
0000017c l       .debug_frame	00000000 
200406a0 l       .text	00000000 
00000000 l    df *ABS*	00000000 new.cc
200406a0 l       .text	00000000 
200406a0 l       .text	00000000 
200406a0 l       .text	00000000 
200406a0 l       .text	00000000 
200406a2 l       .text	00000000 
200406a2 l       .text	00000000 
200406a2 l       .text	00000000 
00000faa l       .debug_line	00000000 .Lline_table_start0
000001f8 l       .debug_frame	00000000 
200406a2 l       .text	00000000 
00000000 l    df *ABS*	00000000 calloc.cc
200406a4 l       .text	00000000 
200406a4 l       .text	00000000 
200406a4 l       .text	00000000 
200406a6 l       .text	00000000 
200406a6 l       .text	00000000 
200406ac l       .text	00000000 
200406b0 l       .text	00000000 
200406b0 l       .text	00000000 
200406b2 l       .text	00000000 
200406b4 l       .text	00000000 
200406b8 l       .text	00000000 
200406c6 l       .text	00000000 .LBB0_2
200406b8 l       .text	00000000 
200406ba l       .text	00000000 
200406c6 l       .text	00000000 
200406c6 l       .text	00000000 
200406cc l       .text	00000000 
200406ce l       .text	00000000 
200406d4 l       .text	00000000 
200406d4 l       .text	00000000 
000005a9 l       .debug_loc	00000000 
000005bc l       .debug_loc	00000000 
000005cf l       .debug_loc	00000000 
000005e2 l       .debug_loc	00000000 
0000107d l       .debug_line	00000000 .Lline_table_start0
0000021c l       .debug_frame	00000000 
200406d4 l       .text	00000000 
00000000 l    df *ABS*	00000000 strtol.cc
200406d4 l       .text	00000000 
200406d4 l       .text	00000000 
200406d4 l       .text	00000000 
200406d6 l       .text	00000000 
200406d6 l       .text	00000000 
200406dc l       .text	00000000 
200406dc l       .text	00000000 
200406de l       .text	00000000 
200406e0 l       .text	00000000 
200406e4 l       .text	00000000 
200406e6 l       .text	00000000 
200406e6 l       .text	00000000 .LBB0_1
200406ea l       .text	00000000 
200406ea l       .text	00000000 
200406ee l       .text	00000000 
200406ee l       .text	00000000 
200406f2 l       .text	00000000 
200406f2 l       .text	00000000 
200406f6 l       .text	00000000 
200406f8 l       .text	00000000 
200406f8 l       .text	00000000 
200406fa l       .text	00000000 
2004071c l       .text	00000000 .LBB0_5
20040704 l       .text	00000000 
20040708 l       .text	00000000 
2004070c l       .text	00000000 
20040728 l       .text	00000000 .LBB0_7
20040714 l       .text	00000000 
20040718 l       .text	00000000 
20040720 l       .text	00000000 .LBB0_6
2004071c l       .text	00000000 
20040720 l       .text	00000000 
20040724 l       .text	00000000 
20040728 l       .text	00000000 
20040728 l       .text	00000000 
2004074e l       .text	00000000 .LBB0_9
2004073c l       .text	00000000 
20040740 l       .text	00000000 
2004076c l       .text	00000000 .LBB0_11
2004074e l       .text	00000000 
20040776 l       .text	00000000 .LBB0_12
2004075a l       .text	00000000 
2004075e l       .text	00000000 
20040788 l       .text	00000000 .LBB0_14
2004076c l       .text	00000000 
20040770 l       .text	00000000 
20040774 l       .text	00000000 
20040776 l       .text	00000000 
2004077a l       .text	00000000 
2004078c l       .text	00000000 .LBB0_15
2004077e l       .text	00000000 
20040782 l       .text	00000000 
20040794 l       .text	00000000 .LBB0_16
20040788 l       .text	00000000 
20040788 l       .text	00000000 
2004078c l       .text	00000000 
2004078c l       .text	00000000 
20040796 l       .text	00000000 
2004079a l       .text	00000000 .LBB0_18
20040796 l       .text	00000000 
20040798 l       .text	00000000 
2004079a l       .text	00000000 
200407a4 l       .text	00000000 
200407a8 l       .text	00000000 
200407a8 l       .text	00000000 
200407aa l       .text	00000000 
200407b6 l       .text	00000000 
200407b6 l       .text	00000000 
200407ba l       .text	00000000 
200407bc l       .text	00000000 
200407bc l       .text	00000000 .LBB0_19
200407bc l       .text	00000000 
200407c2 l       .text	00000000 
200407c4 l       .text	00000000 
200407cc l       .text	00000000 .LBB0_21
200407c4 l       .text	00000000 
200407c6 l       .text	00000000 
200407ca l       .text	00000000 
200407ea l       .text	00000000 .LBB0_25
200407ca l       .text	00000000 
200407cc l       .text	00000000 
200407cc l       .text	00000000 
200407d4 l       .text	00000000 
20040836 l       .text	00000000 .LBB0_31
200407d4 l       .text	00000000 
200407d6 l       .text	00000000 
200407dc l       .text	00000000 
200407dc l       .text	00000000 
200407e6 l       .text	00000000 .LBB0_24
200407e0 l       .text	00000000 
200407e2 l       .text	00000000 
200407e6 l       .text	00000000 
200407ea l       .text	00000000 
200407ea l       .text	00000000 
200407f0 l       .text	00000000 
200407fc l       .text	00000000 
20040806 l       .text	00000000 .LBB0_28
20040802 l       .text	00000000 
20040824 l       .text	00000000 .LBB0_30
20040806 l       .text	00000000 
20040814 l       .text	00000000 
2004081a l       .text	00000000 
2004081a l       .text	00000000 
20040820 l       .text	00000000 
20040820 l       .text	00000000 
20040822 l       .text	00000000 
20040824 l       .text	00000000 
20040826 l       .text	00000000 
20040828 l       .text	00000000 
20040828 l       .text	00000000 
2004082c l       .text	00000000 
2004082c l       .text	00000000 
20040830 l       .text	00000000 
20040830 l       .text	00000000 
20040832 l       .text	00000000 
20040834 l       .text	00000000 
20040836 l       .text	00000000 
2004084a l       .text	00000000 .LBB0_35
2004083a l       .text	00000000 
2004083c l       .text	00000000 
2004083e l       .text	00000000 
20040848 l       .text	00000000 .LBB0_34
20040842 l       .text	00000000 
20040848 l       .text	00000000 
20040850 l       .text	00000000 .LBB0_37
2004084a l       .text	00000000 
2004084c l       .text	00000000 
2004085a l       .text	00000000 .LBB0_39
20040854 l       .text	00000000 
20040858 l       .text	00000000 
2004085a l       .text	00000000 
2004085a l       .text	00000000 
20040864 l       .text	00000000 
20040864 l       .text	00000000 
000005f5 l       .debug_loc	00000000 
0000061f l       .debug_loc	00000000 
0000063e l       .debug_loc	00000000 
00000680 l       .debug_loc	00000000 
00000703 l       .debug_loc	00000000 
00000718 l       .debug_loc	00000000 
000007a6 l       .debug_loc	00000000 
000007d1 l       .debug_loc	00000000 
00000816 l       .debug_loc	00000000 
00000856 l       .debug_loc	00000000 
0000119b l       .debug_line	00000000 .Lline_table_start0
0000024c l       .debug_frame	00000000 
20040864 l       .text	00000000 
00000000 l    df *ABS*	00000000 fprintf.cc
20040864 l       .text	00000000 
20040864 l       .text	00000000 
20040864 l       .text	00000000 
20040866 l       .text	00000000 
20040866 l       .text	00000000 
2004086c l       .text	00000000 
2004086c l       .text	00000000 
2004086e l       .text	00000000 
20040872 l       .text	00000000 
200f0098 l     O .data	00000011 str
2004088e l       .text	00000000 
2004088e l       .text	00000000 .LBB0_58
20041792 l     O .text	00000020 HexTable
2004089e l       .text	00000000 
200408a2 l       .text	00000000 
200408a2 l       .text	00000000 .LBB0_1
200408a2 l       .text	00000000 
20040bac l       .text	00000000 .LBB0_53
200408a6 l       .text	00000000 
200408aa l       .text	00000000 
200408ae l       .text	00000000 
20040916 l       .text	00000000 .LBB0_13
200408ae l       .text	00000000 
20040912 l       .text	00000000 .LBB0_12
20040936 l       .text	00000000 .LBB0_15
200408c0 l       .text	00000000 .LBB0_7
200408ba l       .text	00000000 
200408be l       .text	00000000 
200408c0 l       .text	00000000 
200408c4 l       .text	00000000 
200408da l       .text	00000000 .LBB0_9
200408c4 l       .text	00000000 
200408c6 l       .text	00000000 .LBB0_8
200408c6 l       .text	00000000 
200408ca l       .text	00000000 
200408ce l       .text	00000000 
200408d2 l       .text	00000000 
200408d6 l       .text	00000000 
200408d8 l       .text	00000000 
200408da l       .text	00000000 
200408dc l       .text	00000000 
200408ec l       .text	00000000 
2004092a l       .text	00000000 .LBB0_14
200408fc l       .text	00000000 
20040908 l       .text	00000000 
20040912 l       .text	00000000 
20040914 l       .text	00000000 
20040948 l       .text	00000000 .LBB0_16
20040916 l       .text	00000000 
20040916 l       .text	00000000 
2004091e l       .text	00000000 
20040922 l       .text	00000000 
20040924 l       .text	00000000 
20040924 l       .text	00000000 
2004092a l       .text	00000000 
20040936 l       .text	00000000 
20040938 l       .text	00000000 
20040940 l       .text	00000000 
20040948 l       .text	00000000 
2004099c l       .text	00000000 .LBB0_25
20040ad6 l       .text	00000000 .LBB0_43
20040982 l       .text	00000000 .LBB0_23
20040b1e l       .text	00000000 .LBB0_44
20040b8a l       .text	00000000 .LBB0_50
20040982 l       .text	00000000 
20040982 l       .text	00000000 
20040984 l       .text	00000000 
20040984 l       .text	00000000 
20040988 l       .text	00000000 
20040990 l       .text	00000000 
20040990 l       .text	00000000 
20040994 l       .text	00000000 
20040996 l       .text	00000000 
20040a2a l       .text	00000000 .LBB0_32
20040998 l       .text	00000000 
20040998 l       .text	00000000 
20040a2e l       .text	00000000 .LBB0_33
2004099c l       .text	00000000 
2004099e l       .text	00000000 
200409a0 l       .text	00000000 
200409a0 l       .text	00000000 
200409a4 l       .text	00000000 
200409a6 l       .text	00000000 
200409a8 l       .text	00000000 
200409a8 l       .text	00000000 
200409b0 l       .text	00000000 
200409b2 l       .text	00000000 
200409b2 l       .text	00000000 
200409b4 l       .text	00000000 
200409b8 l       .text	00000000 
200409b8 l       .text	00000000 
200409c2 l       .text	00000000 
200409c2 l       .text	00000000 .LBB0_26
200409c2 l       .text	00000000 
200409c6 l       .text	00000000 
200409c8 l       .text	00000000 
200409d0 l       .text	00000000 
200409d4 l       .text	00000000 
200409e6 l       .text	00000000 .LBB0_29
200409d4 l       .text	00000000 
200409d8 l       .text	00000000 
200409da l       .text	00000000 
200409da l       .text	00000000 
200409dc l       .text	00000000 
200409dc l       .text	00000000 
200409e0 l       .text	00000000 
200409e4 l       .text	00000000 
200409e4 l       .text	00000000 
200409e6 l       .text	00000000 
200409e6 l       .text	00000000 
200409ec l       .text	00000000 
200409f6 l       .text	00000000 
20040bdc l     F .text	00000088 write_char_cnt(char*, int, int, int, int)
200409f8 l       .text	00000000 
200409f8 l       .text	00000000 
200409fa l       .text	00000000 
200409fe l       .text	00000000 
200409fe l       .text	00000000 
20040a02 l       .text	00000000 
20040a18 l       .text	00000000 .LBB0_31
20040a02 l       .text	00000000 
20040a04 l       .text	00000000 .LBB0_30
20040a04 l       .text	00000000 
20040a08 l       .text	00000000 
20040a0c l       .text	00000000 
20040a10 l       .text	00000000 
20040a10 l       .text	00000000 
20040a14 l       .text	00000000 
20040a16 l       .text	00000000 
20040a16 l       .text	00000000 
20040a18 l       .text	00000000 
20040a26 l       .text	00000000 
20040a2a l       .text	00000000 
20040a3a l       .text	00000000 
20040a3c l       .text	00000000 
20040a40 l       .text	00000000 
20040a42 l       .text	00000000 
20040a42 l       .text	00000000 
20040a4a l       .text	00000000 
20040a4a l       .text	00000000 .LBB0_34
20040a4a l       .text	00000000 
20040a4c l       .text	00000000 
20040a4c l       .text	00000000 
20040a58 l       .text	00000000 
20040a60 l       .text	00000000 
20040a62 l       .text	00000000 
20040a62 l       .text	00000000 
20040a7a l       .text	00000000 .LBB0_36
20040a66 l       .text	00000000 
20040a6a l       .text	00000000 
20040a6a l       .text	00000000 
20040a6e l       .text	00000000 
20040a76 l       .text	00000000 
20040a7a l       .text	00000000 
20040a7a l       .text	00000000 
20040a7c l       .text	00000000 
20040a8e l       .text	00000000 .LBB0_38
20040a7e l       .text	00000000 
20040a82 l       .text	00000000 
20040a82 l       .text	00000000 
20040a8e l       .text	00000000 
20040a8e l       .text	00000000 
20040a94 l       .text	00000000 
20040a98 l       .text	00000000 
20040a98 l       .text	00000000 
20040a9e l       .text	00000000 
20040aa8 l       .text	00000000 
20040aaa l       .text	00000000 
20040ab0 l       .text	00000000 .LBB0_40
20040aaa l       .text	00000000 
20040aae l       .text	00000000 
20040aae l       .text	00000000 
20040ab0 l       .text	00000000 
20040ab6 l       .text	00000000 
20040abc l       .text	00000000 
20040ad2 l       .text	00000000 .LBB0_42
20040abc l       .text	00000000 
20040abe l       .text	00000000 .LBB0_41
20040abe l       .text	00000000 
20040ac2 l       .text	00000000 
20040ac6 l       .text	00000000 
20040aca l       .text	00000000 
20040ace l       .text	00000000 
20040ad0 l       .text	00000000 
20040ad2 l       .text	00000000 
20040b80 l       .text	00000000 .LBB0_49
20040ad6 l       .text	00000000 
20040ad6 l       .text	00000000 
20040ad8 l       .text	00000000 
20040adc l       .text	00000000 
20040adc l       .text	00000000 
20040ae0 l       .text	00000000 
20040ae0 l       .text	00000000 
20040ae2 l       .text	00000000 
20040aea l       .text	00000000 
20040af0 l       .text	00000000 
20040af0 l       .text	00000000 
20040af2 l       .text	00000000 
20040af6 l       .text	00000000 
20040af8 l       .text	00000000 
20040af8 l       .text	00000000 
20040afa l       .text	00000000 
20040afa l       .text	00000000 
20040afc l       .text	00000000 
20040b00 l       .text	00000000 
20040b06 l       .text	00000000 
20040b06 l       .text	00000000 
20040b0c l       .text	00000000 
20040b0c l       .text	00000000 
20040b10 l       .text	00000000 
20040b10 l       .text	00000000 
20040b1c l       .text	00000000 
20040b1e l       .text	00000000 
20040b20 l       .text	00000000 
20040b22 l       .text	00000000 
20040b24 l       .text	00000000 
20040b24 l       .text	00000000 
20040b34 l       .text	00000000 
20040b34 l       .text	00000000 
20040b36 l       .text	00000000 
20040b3a l       .text	00000000 
20040b3c l       .text	00000000 
20040b3c l       .text	00000000 
20040b3e l       .text	00000000 
20040b40 l       .text	00000000 
20040b40 l       .text	00000000 
20040b4e l       .text	00000000 
20040b54 l       .text	00000000 .LBB0_46
20040b4e l       .text	00000000 
20040b52 l       .text	00000000 
20040b54 l       .text	00000000 
20040b58 l       .text	00000000 
20040b60 l       .text	00000000 
20040b76 l       .text	00000000 .LBB0_48
20040b60 l       .text	00000000 
20040b62 l       .text	00000000 .LBB0_47
20040b62 l       .text	00000000 
20040b66 l       .text	00000000 
20040b6a l       .text	00000000 
20040b6e l       .text	00000000 
20040b72 l       .text	00000000 
20040b74 l       .text	00000000 
20040b76 l       .text	00000000 
20040b78 l       .text	00000000 
20040b7e l       .text	00000000 
20040b7e l       .text	00000000 
20040b80 l       .text	00000000 
20040b8a l       .text	00000000 
20040b8a l       .text	00000000 
20040ba2 l       .text	00000000 .LBB0_52
20040b98 l       .text	00000000 
20040ba2 l       .text	00000000 
20040bac l       .text	00000000 
20040bc6 l       .text	00000000 .LBB0_56
20040bac l       .text	00000000 
20040bb0 l       .text	00000000 
20040bb2 l       .text	00000000 
20040bb4 l       .text	00000000 .LBB0_55
20040bb4 l       .text	00000000 
20040bb8 l       .text	00000000 
20040bbc l       .text	00000000 
20040bc0 l       .text	00000000 
20040bc4 l       .text	00000000 
20040bc6 l       .text	00000000 
20040bc8 l       .text	00000000 
20040bce l       .text	00000000 
20040bd2 l       .text	00000000 
20040bd8 l       .text	00000000 
20040bdc l       .text	00000000 
20040bdc l       .text	00000000 
20040bdc l       .text	00000000 
20040bdc l       .text	00000000 
20040bdc l       .text	00000000 
20040bde l       .text	00000000 
20040bde l       .text	00000000 
20040be0 l       .text	00000000 
20040be0 l       .text	00000000 
20040be0 l       .text	00000000 
20040bee l       .text	00000000 .LBB1_2
20040be8 l       .text	00000000 
20040bea l       .text	00000000 
20040bee l       .text	00000000 
20040bf2 l       .text	00000000 
20040bf6 l       .text	00000000 
20040c14 l       .text	00000000 .LBB1_4
20040bf8 l       .text	00000000 
20040bf8 l       .text	00000000 
20040bfc l       .text	00000000 
20040c04 l       .text	00000000 
20040c08 l       .text	00000000 
20040c0c l       .text	00000000 
20040c0c l       .text	00000000 
20040c0e l       .text	00000000 
20040c1a l       .text	00000000 .LBB1_5
20040c0e l       .text	00000000 
20040c40 l       .text	00000000 .LBB1_9
20040c14 l       .text	00000000 
20040c14 l       .text	00000000 
20040c16 l       .text	00000000 
20040c16 l       .text	00000000 
20040c1a l       .text	00000000 
20040c1c l       .text	00000000 
20040c1e l       .text	00000000 
20040c1e l       .text	00000000 
20040c22 l       .text	00000000 
20040c22 l       .text	00000000 .LBB1_6
20040c22 l       .text	00000000 
20040c2a l       .text	00000000 
20040c2e l       .text	00000000 
20040c3e l       .text	00000000 .LBB1_8
20040c32 l       .text	00000000 
20040c36 l       .text	00000000 
20040c36 l       .text	00000000 
20040c3a l       .text	00000000 
20040c3c l       .text	00000000 
20040c3c l       .text	00000000 
20040c3e l       .text	00000000 
20040c40 l       .text	00000000 
20040c44 l       .text	00000000 
20040c5c l       .text	00000000 .LBB1_11
20040c4a l       .text	00000000 
20040c4a l       .text	00000000 
20040c4e l       .text	00000000 
20040c56 l       .text	00000000 
20040c5a l       .text	00000000 
20040c5c l       .text	00000000 
20040c64 l       .text	00000000 
20040c64 l       .text	00000000 
20040c64 l       .text	00000000 
20040c64 l       .text	00000000 
20040c64 l       .text	00000000 
20040c68 l       .text	00000000 
20040c74 l       .text	00000000 
20040c74 l       .text	00000000 
20040c78 l       .text	00000000 
20040c8e l       .text	00000000 
20040c8e l       .text	00000000 
20040c90 l       .text	00000000 
20040c92 l       .text	00000000 
20040c92 l       .text	00000000 
20040c94 l       .text	00000000 
20040c9a l       .text	00000000 
20040c9e l       .text	00000000 
20040ca0 l       .text	00000000 
20040ca0 l       .text	00000000 
20040ca2 l       .text	00000000 
20040ca6 l       .text	00000000 
20040cae l       .text	00000000 
20040cae l       .text	00000000 
20040cb4 l       .text	00000000 
20040cb8 l       .text	00000000 
20040cc6 l       .text	00000000 
20040cc6 l       .text	00000000 
20040cc6 l       .text	00000000 
20040cc6 l       .text	00000000 
20040cc6 l       .text	00000000 
20040cc8 l       .text	00000000 
20040ccc l       .text	00000000 
20040ccc l       .text	00000000 
20040cce l       .text	00000000 
20040cdc l       .text	00000000 
20040cf0 l       .text	00000000 
20040cf0 l       .text	00000000 
20040cf2 l       .text	00000000 
20040cf4 l       .text	00000000 
20040cf4 l       .text	00000000 
20040cf8 l       .text	00000000 
20040cf8 l       .text	00000000 
20040cfc l       .text	00000000 
20040d00 l       .text	00000000 
20040d02 l       .text	00000000 
20040d02 l       .text	00000000 
20040d06 l       .text	00000000 
20040d0e l       .text	00000000 
20040d0e l       .text	00000000 
20040d0e l       .text	00000000 
20040d0e l       .text	00000000 
20040d0e l       .text	00000000 
20040d10 l       .text	00000000 
20040d12 l       .text	00000000 
20040d1c l       .text	00000000 
20040d1c l       .text	00000000 
20040d1e l       .text	00000000 
20040d20 l       .text	00000000 
20040d20 l       .text	00000000 
20040d22 l       .text	00000000 
20040d22 l       .text	00000000 
20040d28 l       .text	00000000 
20040d28 l       .text	00000000 
20040d28 l       .text	00000000 
20040d28 l       .text	00000000 
20040d28 l       .text	00000000 
20040d2a l       .text	00000000 
20040d30 l       .text	00000000 
20040d34 l       .text	00000000 
20040d34 l       .text	00000000 .LBB5_1
20040d34 l       .text	00000000 
20040d46 l       .text	00000000 
20040d46 l       .text	00000000 .LBB5_2
20040d46 l       .text	00000000 
20040d56 l       .text	00000000 
20040d56 l       .text	00000000 
20040d64 l       .text	00000000 
20040d64 l       .text	00000000 
20040d64 l       .text	00000000 
20040d64 l       .text	00000000 
20040d64 l       .text	00000000 
20040d64 l       .text	00000000 
20040d66 l       .text	00000000 
20040d6c l       .text	00000000 
20040d6e l       .text	00000000 
20040d70 l       .text	00000000 
20040d72 l       .text	00000000 
20040d74 l       .text	00000000 
20040d74 l       .text	00000000 .LBB6_4
20040d80 l       .text	00000000 .LBB6_1
20040d80 l       .text	00000000 
20040d80 l       .text	00000000 
20040da4 l       .text	00000000 .LBB6_3
20040d86 l       .text	00000000 
20040d90 l       .text	00000000 
20040d90 l       .text	00000000 
20040d92 l       .text	00000000 
20040d92 l       .text	00000000 
20040da0 l       .text	00000000 
20040da0 l       .text	00000000 
20040da2 l       .text	00000000 
20040da4 l       .text	00000000 
20040da6 l       .text	00000000 
20040dae l       .text	00000000 
20040dae l       .text	00000000 
00000875 l       .debug_loc	00000000 
0000089f l       .debug_loc	00000000 
00000918 l       .debug_loc	00000000 
000009b1 l       .debug_loc	00000000 
00000a4c l       .debug_loc	00000000 
00000acd l       .debug_loc	00000000 
00000b7d l       .debug_loc	00000000 
00000c4e l       .debug_loc	00000000 
00000cae l       .debug_loc	00000000 
00000d67 l       .debug_loc	00000000 
00000db7 l       .debug_loc	00000000 
00000e22 l       .debug_loc	00000000 
00000e3b l       .debug_loc	00000000 
00000e6f l       .debug_loc	00000000 
00000e82 l       .debug_loc	00000000 
00000ea0 l       .debug_loc	00000000 
00000eb3 l       .debug_loc	00000000 
00000ed2 l       .debug_loc	00000000 
00000f0a l       .debug_loc	00000000 
00000f37 l       .debug_loc	00000000 
00000f4a l       .debug_loc	00000000 
00000f73 l       .debug_loc	00000000 
00000fb3 l       .debug_loc	00000000 
00000fdc l       .debug_loc	00000000 
00000ffa l       .debug_loc	00000000 
0000100d l       .debug_loc	00000000 
00001020 l       .debug_loc	00000000 
00001033 l       .debug_loc	00000000 
000010a9 l       .debug_loc	00000000 
000010c9 l       .debug_loc	00000000 
000010dc l       .debug_loc	00000000 
00001107 l       .debug_loc	00000000 
0000111a l       .debug_loc	00000000 
00001147 l       .debug_loc	00000000 
0000115a l       .debug_loc	00000000 
0000116d l       .debug_loc	00000000 
00001180 l       .debug_loc	00000000 
000011ab l       .debug_loc	00000000 
000011be l       .debug_loc	00000000 
000011d1 l       .debug_loc	00000000 
000011e4 l       .debug_loc	00000000 
0000120f l       .debug_loc	00000000 
00001222 l       .debug_loc	00000000 
00001235 l       .debug_loc	00000000 
00001260 l       .debug_loc	00000000 
0000128b l       .debug_loc	00000000 
000012b6 l       .debug_loc	00000000 
0000142b l       .debug_line	00000000 .Lline_table_start0
00000050 l       .debug_ranges	00000000 
0000027c l       .debug_frame	00000000 
20040dae l       .text	00000000 
00000000 l    df *ABS*	00000000 fputc.cc
20040db0 l       .text	00000000 
20040db0 l       .text	00000000 
20040db0 l       .text	00000000 
20040db2 l       .text	00000000 
20040db4 l       .text	00000000 
20040db6 l       .text	00000000 
20040dba l       .text	00000000 
20040dba l       .text	00000000 
20040dbc l       .text	00000000 
20040dc0 l       .text	00000000 
20040dc0 l       .text	00000000 
20040dc6 l       .text	00000000 
20040dc8 l       .text	00000000 
20040dc8 l       .text	00000000 
20040dce l       .text	00000000 
20040dce l       .text	00000000 
000012d5 l       .debug_loc	00000000 
000012ff l       .debug_loc	00000000 
00001b61 l       .debug_line	00000000 .Lline_table_start0
00000354 l       .debug_frame	00000000 
20040dce l       .text	00000000 
00000000 l    df *ABS*	00000000 fputs.cc
20040dd0 l       .text	00000000 
20040dd0 l       .text	00000000 
20040dd0 l       .text	00000000 
20040dd2 l       .text	00000000 
20040dd8 l       .text	00000000 
20040ddc l       .text	00000000 
20040ddc l       .text	00000000 
20040de2 l       .text	00000000 
20040dee l       .text	00000000 
20040df4 l       .text	00000000 
20040df4 l       .text	00000000 
00001312 l       .debug_loc	00000000 
00001330 l       .debug_loc	00000000 
00001c53 l       .debug_line	00000000 .Lline_table_start0
00000380 l       .debug_frame	00000000 
20040df4 l       .text	00000000 
00000000 l    df *ABS*	00000000 fgets.cc
20040df4 l       .text	00000000 
20040df4 l       .text	00000000 
20040df4 l       .text	00000000 
20040df6 l       .text	00000000 
20040dfc l       .text	00000000 
20040dfe l       .text	00000000 
20040e02 l       .text	00000000 
20040e04 l       .text	00000000 
20040e16 l       .text	00000000 
20040e16 l       .text	00000000 .LBB0_1
20040e16 l       .text	00000000 
20040e1e l       .text	00000000 
20040e22 l       .text	00000000 
20040e22 l       .text	00000000 
20040e26 l       .text	00000000 
20040e2c l       .text	00000000 
20040e2e l       .text	00000000 
20040e30 l       .text	00000000 
20040e36 l       .text	00000000 
20040e3a l       .text	00000000 
20040e3c l       .text	00000000 
20040e40 l       .text	00000000 
20040e44 l       .text	00000000 
20040e46 l       .text	00000000 
20040e4c l       .text	00000000 
20040e4c l       .text	00000000 
00001343 l       .debug_loc	00000000 
0000136d l       .debug_loc	00000000 
0000138c l       .debug_loc	00000000 
0000139f l       .debug_loc	00000000 
000013bf l       .debug_loc	00000000 
000013d2 l       .debug_loc	00000000 
00001d4e l       .debug_line	00000000 .Lline_table_start0
000003b0 l       .debug_frame	00000000 
20040e4c l       .text	00000000 
00000000 l    df *ABS*	00000000 fgetc.cc
20040e4c l       .text	00000000 
20040e4c l       .text	00000000 
20040e4c l       .text	00000000 
20040e4e l       .text	00000000 
20040e4e l       .text	00000000 
20040e50 l       .text	00000000 
20040e54 l       .text	00000000 
20040e54 l       .text	00000000 
20040e58 l       .text	00000000 
20040e5c l       .text	00000000 
20040e60 l       .text	00000000 
20040e64 l       .text	00000000 
20040e64 l       .text	00000000 
20040e6a l       .text	00000000 
20040e6a l       .text	00000000 
000013f1 l       .debug_loc	00000000 
00001404 l       .debug_loc	00000000 
00001e73 l       .debug_line	00000000 .Lline_table_start0
000003e0 l       .debug_frame	00000000 
20040e6a l       .text	00000000 
00000000 l    df *ABS*	00000000 strlen.cc
20040e6c l       .text	00000000 
20040e6c l       .text	00000000 
20040e6c l       .text	00000000 
20040e6e l       .text	00000000 
20040e6e l       .text	00000000 .LBB0_1
20040e6e l       .text	00000000 
20040e7c l       .text	00000000 .LBB0_3
20040e72 l       .text	00000000 
20040e74 l       .text	00000000 
20040e78 l       .text	00000000 
20040e78 l       .text	00000000 
20040e7a l       .text	00000000 
20040e7c l       .text	00000000 
20040e7c l       .text	00000000 
20040e7e l       .text	00000000 
20040e80 l       .text	00000000 
20040e80 l       .text	00000000 
00001418 l       .debug_loc	00000000 
00001450 l       .debug_loc	00000000 
00001f65 l       .debug_line	00000000 .Lline_table_start0
0000040c l       .debug_frame	00000000 
20040e80 l       .text	00000000 
00000000 l    df *ABS*	00000000 strcmp.cc
20040e80 l       .text	00000000 
20040e80 l       .text	00000000 
20040e80 l       .text	00000000 .LBB0_1
20040e80 l       .text	00000000 
20040e80 l       .text	00000000 
20040e84 l       .text	00000000 
20040e98 l       .text	00000000 .LBB0_4
20040e88 l       .text	00000000 
20040ea2 l       .text	00000000 .LBB0_7
20040e8c l       .text	00000000 
20040e8e l       .text	00000000 
20040e92 l       .text	00000000 
20040e96 l       .text	00000000 
20040e9a l       .text	00000000 
20040ea0 l       .text	00000000 .LBB0_6
20040e9a l       .text	00000000 
20040e9e l       .text	00000000 
20040ea0 l       .text	00000000 
20040ea2 l       .text	00000000 
20040ea2 l       .text	00000000 
20040ea4 l       .text	00000000 
20040ea4 l       .text	00000000 
20040ea6 l       .text	00000000 
20040ea6 l       .text	00000000 
0000146f l       .debug_loc	00000000 
0000203b l       .debug_line	00000000 .Lline_table_start0
00000430 l       .debug_frame	00000000 
20040ea6 l       .text	00000000 
00000000 l    df *ABS*	00000000 memset_rand.cc
20040ea8 l       .text	00000000 
20040ea8 l       .text	00000000 
20040ea8 l       .text	00000000 
20040eaa l       .text	00000000 
20040eaa l       .text	00000000 
20040eb0 l       .text	00000000 
20040eb0 l       .text	00000000 
20040eb2 l       .text	00000000 
20040eb6 l       .text	00000000 
20040eb8 l       .text	00000000 
20040ece l       .text	00000000 .LBB0_2
20040eb8 l       .text	00000000 
20040eba l       .text	00000000 .LBB0_1
20040eba l       .text	00000000 
20040ebc l       .text	00000000 
20040ebc l       .text	00000000 
20040ec0 l       .text	00000000 
20040ec0 l       .text	00000000 
20040ec4 l       .text	00000000 
20040ec4 l       .text	00000000 
20040ecc l       .text	00000000 
20040ecc l       .text	00000000 
20040ece l       .text	00000000 
20040ed2 l       .text	00000000 
20040ed4 l       .text	00000000 
20040eda l       .text	00000000 
20040eda l       .text	00000000 
0000148d l       .debug_loc	00000000 
000014b7 l       .debug_loc	00000000 
000014fa l       .debug_loc	00000000 
00002142 l       .debug_line	00000000 .Lline_table_start0
00000454 l       .debug_frame	00000000 
20040eda l       .text	00000000 
00000000 l    df *ABS*	00000000 memcmp.cc
20040edc l       .text	00000000 
20040edc l       .text	00000000 
20040edc l       .text	00000000 
20040edc l       .text	00000000 
20040ee0 l       .text	00000000 
20040ee0 l       .text	00000000 .LBB0_1
20040ee0 l       .text	00000000 
20040efa l       .text	00000000 .LBB0_3
20040ee2 l       .text	00000000 
20040ee4 l       .text	00000000 
20040ee8 l       .text	00000000 
20040eec l       .text	00000000 
20040ef0 l       .text	00000000 
20040ef4 l       .text	00000000 
20040ef6 l       .text	00000000 
20040ef6 l       .text	00000000 
20040efc l       .text	00000000 .LBB0_4
20040efa l       .text	00000000 
20040efa l       .text	00000000 
20040efc l       .text	00000000 
20040efc l       .text	00000000 
20040efe l       .text	00000000 
20040f00 l       .text	00000000 
20040f00 l       .text	00000000 
0000152e l       .debug_loc	00000000 
00001541 l       .debug_loc	00000000 
00001554 l       .debug_loc	00000000 
00001567 l       .debug_loc	00000000 
0000157a l       .debug_loc	00000000 
00002255 l       .debug_line	00000000 .Lline_table_start0
00000484 l       .debug_frame	00000000 
20040f00 l       .text	00000000 
00000000 l    df *ABS*	00000000 strcpy.cc
20040f00 l       .text	00000000 
20040f00 l       .text	00000000 
20040f00 l       .text	00000000 
20040f04 l       .text	00000000 
20040f04 l       .text	00000000 .LBB0_1
20040f04 l       .text	00000000 
20040f08 l       .text	00000000 
20040f0c l       .text	00000000 
20040f10 l       .text	00000000 
20040f10 l       .text	00000000 
20040f18 l       .text	00000000 
20040f18 l       .text	00000000 
20040f1a l       .text	00000000 
20040f1c l       .text	00000000 
20040f1c l       .text	00000000 
000015b2 l       .debug_loc	00000000 
00002329 l       .debug_line	00000000 .Lline_table_start0
000004a8 l       .debug_frame	00000000 
20040f1c l       .text	00000000 
00000000 l    df *ABS*	00000000 memcpy.cc
20040f1c l       .text	00000000 
20040f1c l       .text	00000000 
20040f1c l       .text	00000000 
20040f20 l       .text	00000000 
20040f36 l       .text	00000000 .LBB0_2
20040f20 l       .text	00000000 
20040f22 l       .text	00000000 
20040f22 l       .text	00000000 .LBB0_1
20040f22 l       .text	00000000 
20040f26 l       .text	00000000 
20040f2a l       .text	00000000 
20040f2e l       .text	00000000 
20040f32 l       .text	00000000 
20040f34 l       .text	00000000 
20040f36 l       .text	00000000 
20040f38 l       .text	00000000 
20040f38 l       .text	00000000 
000015e6 l       .debug_loc	00000000 
000015f9 l       .debug_loc	00000000 
00001619 l       .debug_loc	00000000 
000023d7 l       .debug_line	00000000 .Lline_table_start0
000004cc l       .debug_frame	00000000 
20040f38 l       .text	00000000 
00000000 l    df *ABS*	00000000 wordcmp.cc
20040f38 l       .text	00000000 
20040f38 l       .text	00000000 
20040f38 l       .text	00000000 
20040f38 l       .text	00000000 
20040f3c l       .text	00000000 
20040f3c l       .text	00000000 .LBB0_1
20040f3c l       .text	00000000 
20040f54 l       .text	00000000 .LBB0_3
20040f3e l       .text	00000000 
20040f42 l       .text	00000000 
20040f44 l       .text	00000000 
20040f46 l       .text	00000000 
20040f4a l       .text	00000000 
20040f4e l       .text	00000000 
20040f50 l       .text	00000000 
20040f50 l       .text	00000000 
20040f56 l       .text	00000000 .LBB0_4
20040f54 l       .text	00000000 
20040f54 l       .text	00000000 
20040f56 l       .text	00000000 
20040f56 l       .text	00000000 
20040f58 l       .text	00000000 
20040f5a l       .text	00000000 
20040f5a l       .text	00000000 
00001637 l       .debug_loc	00000000 
0000164a l       .debug_loc	00000000 
0000165d l       .debug_loc	00000000 
00001670 l       .debug_loc	00000000 
000016a8 l       .debug_loc	00000000 
000016bb l       .debug_loc	00000000 
00002497 l       .debug_line	00000000 .Lline_table_start0
000004f0 l       .debug_frame	00000000 
20040f5a l       .text	00000000 
00000000 l    df *ABS*	00000000 wordcpy.cc
20040f5c l       .text	00000000 
20040f5c l       .text	00000000 
20040f5c l       .text	00000000 
20040f60 l       .text	00000000 
20040f76 l       .text	00000000 .LBB0_2
20040f60 l       .text	00000000 
20040f64 l       .text	00000000 
20040f64 l       .text	00000000 .LBB0_1
20040f64 l       .text	00000000 
20040f66 l       .text	00000000 
20040f6a l       .text	00000000 
20040f6c l       .text	00000000 
20040f70 l       .text	00000000 
20040f72 l       .text	00000000 
20040f76 l       .text	00000000 
20040f78 l       .text	00000000 
20040f78 l       .text	00000000 
000016ce l       .debug_loc	00000000 
000016e1 l       .debug_loc	00000000 
00001701 l       .debug_loc	00000000 
0000171f l       .debug_loc	00000000 
00002596 l       .debug_line	00000000 .Lline_table_start0
00000514 l       .debug_frame	00000000 
20040f78 l       .text	00000000 
00000000 l    df *ABS*	00000000 strncpy.cc
20040f78 l       .text	00000000 
20040f78 l       .text	00000000 
20040f78 l       .text	00000000 
20040f7a l       .text	00000000 
20040f96 l       .text	00000000 .LBB0_3
20040f7a l       .text	00000000 
20040f7e l       .text	00000000 .LBB0_1
20040f7e l       .text	00000000 
20040f98 l       .text	00000000 .LBB0_4
20040f86 l       .text	00000000 
20040f88 l       .text	00000000 
20040f8c l       .text	00000000 
20040f90 l       .text	00000000 
20040f92 l       .text	00000000 
20040f96 l       .text	00000000 
20040f98 l       .text	00000000 
20040f9a l       .text	00000000 
20040fac l       .text	00000000 .LBB0_7
20040fa2 l       .text	00000000 
20040fa2 l       .text	00000000 .LBB0_6
20040fa2 l       .text	00000000 
20040fa6 l       .text	00000000 
20040faa l       .text	00000000 
20040fac l       .text	00000000 
20040fb0 l       .text	00000000 
20040fb2 l       .text	00000000 
20040fb2 l       .text	00000000 
00001732 l       .debug_loc	00000000 
00001745 l       .debug_loc	00000000 
00001758 l       .debug_loc	00000000 
00002681 l       .debug_line	00000000 .Lline_table_start0
00000538 l       .debug_frame	00000000 
20040fb2 l       .text	00000000 
00000000 l    df *ABS*	00000000 memset.cc
20040fb4 l       .text	00000000 
20040fb4 l       .text	00000000 
20040fb4 l       .text	00000000 
20040fb8 l       .text	00000000 
20040fc6 l       .text	00000000 .LBB0_2
20040fb8 l       .text	00000000 
20040fba l       .text	00000000 .LBB0_1
20040fba l       .text	00000000 
20040fbe l       .text	00000000 
20040fc2 l       .text	00000000 
20040fc4 l       .text	00000000 
20040fc6 l       .text	00000000 
20040fc8 l       .text	00000000 
20040fc8 l       .text	00000000 
00001782 l       .debug_loc	00000000 
000017a2 l       .debug_loc	00000000 
00002796 l       .debug_line	00000000 .Lline_table_start0
0000055c l       .debug_frame	00000000 
20040fc8 l       .text	00000000 
00000000 l    df *ABS*	00000000 wordset.cc
20040fc8 l       .text	00000000 
20040fc8 l       .text	00000000 
20040fc8 l       .text	00000000 
20040fcc l       .text	00000000 
20040fd8 l       .text	00000000 .LBB0_2
20040fcc l       .text	00000000 
20040fce l       .text	00000000 .LBB0_1
20040fce l       .text	00000000 
20040fd0 l       .text	00000000 
20040fd4 l       .text	00000000 
20040fd6 l       .text	00000000 
20040fd8 l       .text	00000000 
20040fda l       .text	00000000 
20040fda l       .text	00000000 
000017c0 l       .debug_loc	00000000 
000017e0 l       .debug_loc	00000000 
0000286e l       .debug_line	00000000 .Lline_table_start0
00000580 l       .debug_frame	00000000 
20040fda l       .text	00000000 
00000000 l    df *ABS*	00000000 memset_unique.cc
20040fdc l       .text	00000000 
20040fdc l       .text	00000000 
20040fdc l       .text	00000000 
20040fe2 l       .text	00000000 
20040ffc l       .text	00000000 .LBB0_2
20040fe2 l       .text	00000000 
20040fe6 l       .text	00000000 .LBB0_1
20040fe6 l       .text	00000000 
20040fea l       .text	00000000 
20040fea l       .text	00000000 
20040fee l       .text	00000000 
20040fee l       .text	00000000 
20040ff6 l       .text	00000000 
20040ff6 l       .text	00000000 
20040ff8 l       .text	00000000 
20040ff8 l       .text	00000000 
20040ffc l       .text	00000000 
20040ffe l       .text	00000000 
20040ffe l       .text	00000000 
000017fe l       .debug_loc	00000000 
00001811 l       .debug_loc	00000000 
00001845 l       .debug_loc	00000000 
00002971 l       .debug_line	00000000 .Lline_table_start0
000005a4 l       .debug_frame	00000000 
20040ffe l       .text	00000000 
00000000 l    df *ABS*	00000000 irq.cc
20041000 l       .text	00000000 
20041000 l       .text	00000000 
20041000 l       .text	00000000 
20041000 l       .text	00000000 
20041012 l       .text	00000000 
20041012 l       .text	00000000 
20041014 l       .text	00000000 
20041014 l       .text	00000000 
20041020 l       .text	00000000 
20041020 l       .text	00000000 
20041022 l       .text	00000000 
20041026 l       .text	00000000 
2004102c l       .text	00000000 
2004102c l       .text	00000000 
2004102c l       .text	00000000 
2004102c l       .text	00000000 
2004102c l       .text	00000000 
2004102c l       .text	00000000 
2004103e l       .text	00000000 
2004103e l       .text	00000000 
20041042 l       .text	00000000 
2004104e l       .text	00000000 
2004104e l       .text	00000000 
20041052 l       .text	00000000 
20041058 l       .text	00000000 
20041058 l       .text	00000000 
20041058 l       .text	00000000 
20041058 l       .text	00000000 
20041058 l       .text	00000000 
2004105a l       .text	00000000 
2004105a l       .text	00000000 
2004105c l       .text	00000000 
20041074 l       .text	00000000 
2004108e l       .text	00000000 .LBB2_2
20041078 l       .text	00000000 
2004107a l       .text	00000000 
2004108a l       .text	00000000 
2004108a l       .text	00000000 
200410a8 l       .text	00000000 .LBB2_3
2004108e l       .text	00000000 .LBB2_4
2004108e l       .text	00000000 
200410a2 l       .text	00000000 
200410a2 l       .text	00000000 
200410a6 l       .text	00000000 
200410a8 l       .text	00000000 
200410ae l       .text	00000000 
200410ae l       .text	00000000 
0000187b l       .debug_loc	00000000 
0000188e l       .debug_loc	00000000 
000018a1 l       .debug_loc	00000000 
000018b4 l       .debug_loc	00000000 
000018c7 l       .debug_loc	00000000 
000018da l       .debug_loc	00000000 
00002a54 l       .debug_line	00000000 .Lline_table_start0
000005c8 l       .debug_frame	00000000 
200410ae l       .text	00000000 
00000000 l    df *ABS*	00000000 edc.cc
200410b0 l       .text	00000000 
200410b0 l       .text	00000000 
200410b0 l       .text	00000000 
200410b2 l       .text	00000000 
200410b8 l       .text	00000000 
200410c0 l       .text	00000000 
200410c8 l       .text	00000000 
200410d6 l       .text	00000000 
200410da l       .text	00000000 
200412d8 l     F .text	0000004c ComputeParity(unsigned long long)
200410de l       .text	00000000 
200410e0 l       .text	00000000 
200410e2 l       .text	00000000 
200410e2 l       .text	00000000 
200410ea l       .text	00000000 
200410fc l       .text	00000000 
200410fe l       .text	00000000 
200410fe l       .text	00000000 
20041100 l       .text	00000000 
20041100 l       .text	00000000 
20041102 l       .text	00000000 
20041104 l       .text	00000000 
20041106 l       .text	00000000 
20041106 l       .text	00000000 
2004110e l       .text	00000000 
20041112 l       .text	00000000 
20041112 l       .text	00000000 
2004111c l       .text	00000000 
2004111e l       .text	00000000 
20041120 l       .text	00000000 
20041122 l       .text	00000000 
20041124 l       .text	00000000 
20041126 l       .text	00000000 
20041128 l       .text	00000000 
20041128 l       .text	00000000 
20041130 l       .text	00000000 
20041132 l       .text	00000000 
20041134 l       .text	00000000 
20041134 l       .text	00000000 
2004113c l       .text	00000000 
2004113e l       .text	00000000 
20041140 l       .text	00000000 
20041142 l       .text	00000000 
20041144 l       .text	00000000 
20041146 l       .text	00000000 
20041148 l       .text	00000000 
20041148 l       .text	00000000 
20041150 l       .text	00000000 
20041152 l       .text	00000000 
20041154 l       .text	00000000 
20041154 l       .text	00000000 
2004115c l       .text	00000000 
2004115e l       .text	00000000 
20041160 l       .text	00000000 
20041162 l       .text	00000000 
20041164 l       .text	00000000 
20041164 l       .text	00000000 
20041166 l       .text	00000000 
20041168 l       .text	00000000 
20041168 l       .text	00000000 
20041170 l       .text	00000000 
20041170 l       .text	00000000 
2004117a l       .text	00000000 
2004117a l       .text	00000000 
2004117c l       .text	00000000 
2004117e l       .text	00000000 
20041180 l       .text	00000000 
20041182 l       .text	00000000 
20041184 l       .text	00000000 
20041184 l       .text	00000000 
20041188 l       .text	00000000 
2004118a l       .text	00000000 
2004124a l       .text	00000000 .LBB0_2
2004118a l       .text	00000000 
2004118c l       .text	00000000 
20041192 l       .text	00000000 
20041194 l       .text	00000000 
2004119a l       .text	00000000 
2004119a l       .text	00000000 
2004119e l       .text	00000000 
200411a0 l       .text	00000000 
200411a0 l       .text	00000000 
200411a4 l       .text	00000000 
200411aa l       .text	00000000 
200411b0 l       .text	00000000 
200411b4 l       .text	00000000 
200411b8 l       .text	00000000 
200411ba l       .text	00000000 
200411bc l       .text	00000000 
200411bc l       .text	00000000 
200411c6 l       .text	00000000 
200411d0 l       .text	00000000 
200411da l       .text	00000000 
200411e6 l       .text	00000000 
200411ea l       .text	00000000 
200411ec l       .text	00000000 
200411ee l       .text	00000000 
200411f0 l       .text	00000000 
200411f2 l       .text	00000000 
200411fa l       .text	00000000 
200411fc l       .text	00000000 
20041200 l       .text	00000000 
20041202 l       .text	00000000 
20041206 l       .text	00000000 
2004120e l       .text	00000000 
20041210 l       .text	00000000 
20041214 l       .text	00000000 
20041216 l       .text	00000000 
2004121a l       .text	00000000 
2004121c l       .text	00000000 
20041220 l       .text	00000000 
20041222 l       .text	00000000 
20041226 l       .text	00000000 
20041228 l       .text	00000000 
2004122c l       .text	00000000 
2004122e l       .text	00000000 
20041232 l       .text	00000000 
20041236 l       .text	00000000 
2004123a l       .text	00000000 
2004123c l       .text	00000000 
20041240 l       .text	00000000 
20041242 l       .text	00000000 
20041244 l       .text	00000000 
20041246 l       .text	00000000 
20041246 l       .text	00000000 
20041248 l       .text	00000000 
200412ce l       .text	00000000 .LBB0_3
20041248 l       .text	00000000 
2004124a l       .text	00000000 
2004124c l       .text	00000000 
2004124c l       .text	00000000 
20041256 l       .text	00000000 
20041260 l       .text	00000000 
2004126a l       .text	00000000 
20041276 l       .text	00000000 
2004127a l       .text	00000000 
2004127c l       .text	00000000 
2004127e l       .text	00000000 
20041280 l       .text	00000000 
20041284 l       .text	00000000 
20041288 l       .text	00000000 
20041290 l       .text	00000000 
20041294 l       .text	00000000 
20041296 l       .text	00000000 
2004129a l       .text	00000000 
2004129c l       .text	00000000 
200412a0 l       .text	00000000 
200412a4 l       .text	00000000 
200412a6 l       .text	00000000 
200412aa l       .text	00000000 
200412ae l       .text	00000000 
200412b2 l       .text	00000000 
200412b4 l       .text	00000000 
200412b8 l       .text	00000000 
200412bc l       .text	00000000 
200412c0 l       .text	00000000 
200412c2 l       .text	00000000 
200412c6 l       .text	00000000 
200412c8 l       .text	00000000 
200412cc l       .text	00000000 
200412ce l       .text	00000000 
200412ce l       .text	00000000 
200412d8 l       .text	00000000 
200412d8 l       .text	00000000 
200412d8 l       .text	00000000 
200412d8 l       .text	00000000 
200412d8 l       .text	00000000 
200412d8 l       .text	00000000 
200412da l       .text	00000000 
200412e8 l       .text	00000000 
200412ec l       .text	00000000 
200412fa l       .text	00000000 
200412fe l       .text	00000000 
2004130c l       .text	00000000 
20041310 l       .text	00000000 
20041316 l       .text	00000000 
20041318 l       .text	00000000 
2004131a l       .text	00000000 
2004131e l       .text	00000000 
20041320 l       .text	00000000 
20041322 l       .text	00000000 
20041322 l       .text	00000000 
20041324 l       .text	00000000 
20041324 l       .text	00000000 
20041324 l       .text	00000000 
20041324 l       .text	00000000 
20041324 l       .text	00000000 
20041326 l       .text	00000000 
20041326 l       .text	00000000 
2004132a l       .text	00000000 
2004132e l       .text	00000000 
20041330 l       .text	00000000 
20041338 l       .text	00000000 
20041338 l       .text	00000000 
2004133a l       .text	00000000 
2004133e l       .text	00000000 
20041346 l       .text	00000000 .LBB2_2
2004133e l       .text	00000000 
20041340 l       .text	00000000 
2004134a l       .text	00000000 .LBB2_3
20041352 l       .text	00000000 
20041356 l       .text	00000000 
20041356 l       .text	00000000 
20041360 l       .text	00000000 .LBB2_5
2004135a l       .text	00000000 
2004135e l       .text	00000000 
20041360 l       .text	00000000 
20041364 l       .text	00000000 
20041366 l       .text	00000000 
20041376 l       .text	00000000 .LBB2_7
20041366 l       .text	00000000 
2004136a l       .text	00000000 
2004136a l       .text	00000000 .LBB2_6
2004136a l       .text	00000000 
2004136e l       .text	00000000 
20041370 l       .text	00000000 
20041372 l       .text	00000000 
20041376 l       .text	00000000 
20041376 l       .text	00000000 
20041378 l       .text	00000000 
2004137a l       .text	00000000 
2004137a l       .text	00000000 
2004137a l       .text	00000000 
2004137a l       .text	00000000 
2004137a l       .text	00000000 
2004137c l       .text	00000000 
20041382 l       .text	00000000 
20041384 l       .text	00000000 
20041386 l       .text	00000000 
20041386 l       .text	00000000 
20041388 l       .text	00000000 
20041388 l       .text	00000000 
2004138e l       .text	00000000 
20041390 l       .text	00000000 
20041396 l       .text	00000000 
20041396 l       .text	00000000 
20041396 l       .text	00000000 
000018ed l       .debug_loc	00000000 
00001a2a l       .debug_loc	00000000 
00001a9e l       .debug_loc	00000000 
00001abc l       .debug_loc	00000000 
00001ada l       .debug_loc	00000000 
00001af8 l       .debug_loc	00000000 
00001b16 l       .debug_loc	00000000 
00001b34 l       .debug_loc	00000000 
00001b49 l       .debug_loc	00000000 
00001b8d l       .debug_loc	00000000 
00001bb5 l       .debug_loc	00000000 
00001bda l       .debug_loc	00000000 
00001bf8 l       .debug_loc	00000000 
00001c16 l       .debug_loc	00000000 
00001c29 l       .debug_loc	00000000 
00001c4e l       .debug_loc	00000000 
00001c61 l       .debug_loc	00000000 
00001c74 l       .debug_loc	00000000 
00001c87 l       .debug_loc	00000000 
00001c9a l       .debug_loc	00000000 
00001cb2 l       .debug_loc	00000000 
00001cc5 l       .debug_loc	00000000 
00001cd8 l       .debug_loc	00000000 
00001ceb l       .debug_loc	00000000 
00002c15 l       .debug_line	00000000 .Lline_table_start0
00000614 l       .debug_frame	00000000 
20041396 l       .text	00000000 
00000000 l    df *ABS*	00000000 __cxa_pure_virtual.cc
20041398 l       .text	00000000 
20041398 l       .text	00000000 
00003195 l       .debug_line	00000000 .Lline_table_start0
00000680 l       .debug_frame	00000000 
00000000 l    df *ABS*	00000000 crt0_cheri.cc
20041398 l       .text	00000000 
20041398 l       .text	00000000 
20041398 l       .text	00000000 
2004139a l       .text	00000000 
2004139a l       .text	00000000 
2004139c l       .text	00000000 
200413a0 l       .text	00000000 
200413a0 l       .text	00000000 
200413a4 l       .text	00000000 
200413a4 l       .text	00000000 
200413aa l       .text	00000000 
200413aa l       .text	00000000 
200413aa l       .text	00000000 
200413aa l       .text	00000000 
200413aa l       .text	00000000 
200413aa l       .text	00000000 
200413aa l       .text	00000000 
200413b4 l       .text	00000000 
200413b8 l       .text	00000000 
200413b8 l       .text	00000000 
200413ba l       .text	00000000 
200413ba l       .text	00000000 
200413ba l       .text	00000000 
200413ba l       .text	00000000 
200413ba l       .text	00000000 
200413ba l       .text	00000000 
200413be l       .text	00000000 
200413be l       .text	00000000 
200413c2 l       .text	00000000 
200413c6 l       .text	00000000 
200413c8 l       .text	00000000 
200413c8 l       .text	00000000 
200413c8 l       .text	00000000 
200413c8 l       .text	00000000 
200413c8 l       .text	00000000 
200413ca l       .text	00000000 
200413ca l       .text	00000000 
200413ca l       .text	00000000 
200413d0 l       .text	00000000 
200413d0 l       .text	00000000 
200413e4 l       .text	00000000 
20041442 l       .text	00000000 .LBB3_5
200413e4 l       .text	00000000 
200413e8 l       .text	00000000 
200413e8 l       .text	00000000 .LBB3_1
200413e8 l       .text	00000000 
200413ec l       .text	00000000 
200413f6 l       .text	00000000 
200413f6 l       .text	00000000 
200413fa l       .text	00000000 
20041404 l       .text	00000000 .LBB3_3
200413fa l       .text	00000000 
200413fe l       .text	00000000 
200413fe l       .text	00000000 
20041402 l       .text	00000000 
20041408 l       .text	00000000 .LBB3_4
20041402 l       .text	00000000 
20041404 l       .text	00000000 
20041404 l       .text	00000000 
20041408 l       .text	00000000 
20041408 l       .text	00000000 
2004140e l       .text	00000000 
20041418 l       .text	00000000 
20041422 l       .text	00000000 
2004142a l       .text	00000000 
2004142e l       .text	00000000 
2004142e l       .text	00000000 
20041432 l       .text	00000000 
20041432 l       .text	00000000 
20041436 l       .text	00000000 
20041436 l       .text	00000000 
2004143a l       .text	00000000 
2004143c l       .text	00000000 
2004143c l       .text	00000000 
2004143e l       .text	00000000 
20041442 l       .text	00000000 
20041442 l       .text	00000000 
2004144c l       .text	00000000 
2004144c l       .text	00000000 
2004144c l       .text	00000000 
2004144c l       .text	00000000 
2004144c l       .text	00000000 
2004144e l       .text	00000000 
20041454 l       .text	00000000 
20041456 l       .text	00000000 
20041458 l       .text	00000000 
2004145a l       .text	00000000 
2004145c l       .text	00000000 
20041460 l       .text	00000000 
20041460 l       .text	00000000 
20041468 l       .text	00000000 
20041468 l       .text	00000000 
20041470 l       .text	00000000 
20041470 l       .text	00000000 
20041478 l       .text	00000000 
20041478 l       .text	00000000 
20041480 l       .text	00000000 
20041480 l       .text	00000000 
20041482 l       .text	00000000 
20041482 l       .text	00000000 
2004148a l       .text	00000000 
2004148a l       .text	00000000 
20041492 l       .text	00000000 
20041492 l       .text	00000000 
20041494 l       .text	00000000 
20041494 l       .text	00000000 
20041498 l       .text	00000000 
20041498 l       .text	00000000 
2004149c l       .text	00000000 
2004149c l       .text	00000000 
200414a2 l       .text	00000000 
200414a2 l       .text	00000000 
200414a6 l       .text	00000000 
200414a6 l       .text	00000000 
200414aa l       .text	00000000 
200414aa l       .text	00000000 
200414ae l       .text	00000000 
200414ae l       .text	00000000 
200414b2 l       .text	00000000 
200414b2 l       .text	00000000 
200414b6 l       .text	00000000 
200414b6 l       .text	00000000 
200414b8 l       .text	00000000 
200414b8 l       .text	00000000 
200414c2 l       .text	00000000 
200414c2 l       .text	00000000 
200414cc l       .text	00000000 
200414ce l       .text	00000000 
200414ce l       .text	00000000 
200414d8 l       .text	00000000 
200414da l       .text	00000000 
200414dc l       .text	00000000 
200414de l       .text	00000000 
200414e0 l       .text	00000000 
200414e0 l       .text	00000000 
200414e6 l       .text	00000000 
200414ea l       .text	00000000 
200414ea l       .text	00000000 
200414f8 l       .text	00000000 
200414f8 l       .text	00000000 
200414fc l       .text	00000000 
200414fc l       .text	00000000 
2004150a l       .text	00000000 
2004150a l       .text	00000000 
2004150e l       .text	00000000 
2004150e l       .text	00000000 
2004151c l       .text	00000000 
2004151c l       .text	00000000 
20041520 l       .text	00000000 
20041520 l       .text	00000000 
2004152e l       .text	00000000 
2004152e l       .text	00000000 
20041532 l       .text	00000000 
20041532 l       .text	00000000 
20041540 l       .text	00000000 
20041540 l       .text	00000000 
20041544 l       .text	00000000 
20041544 l       .text	00000000 
2004154e l       .text	00000000 
20041550 l       .text	00000000 
20041552 l       .text	00000000 
20041556 l       .text	00000000 
20041556 l       .text	00000000 
2004155a l       .text	00000000 
2004155a l       .text	00000000 
2004155c l       .text	00000000 
20041560 l       .text	00000000 
20041560 l       .text	00000000 
20041562 l       .text	00000000 
20041566 l       .text	00000000 
20041574 l       .text	00000000 
20041574 l       .text	00000000 
2004157c l       .text	00000000 
2004157c l       .text	00000000 
2004157e l       .text	00000000 
2004157e l       .text	00000000 
20041580 l       .text	00000000 
20041580 l       .text	00000000 
20041580 l       .text	00000000 
00001d21 l       .debug_loc	00000000 
00001d34 l       .debug_loc	00000000 
00001d47 l       .debug_loc	00000000 
00001d5a l       .debug_loc	00000000 
00001d6d l       .debug_loc	00000000 
00001d8c l       .debug_loc	00000000 
00001d9f l       .debug_loc	00000000 
00001dd3 l       .debug_loc	00000000 
00001dfd l       .debug_loc	00000000 
00001e27 l       .debug_loc	00000000 
00001e51 l       .debug_loc	00000000 
00001e7b l       .debug_loc	00000000 
00001ea5 l       .debug_loc	00000000 
00001ecf l       .debug_loc	00000000 
00001ee2 l       .debug_loc	00000000 
00001ef5 l       .debug_loc	00000000 
00001f0a l       .debug_loc	00000000 
00001f1d l       .debug_loc	00000000 
00001f30 l       .debug_loc	00000000 
00001f43 l       .debug_loc	00000000 
00001f77 l       .debug_loc	00000000 
00001f96 l       .debug_loc	00000000 
00001fa9 l       .debug_loc	00000000 
00001fc7 l       .debug_loc	00000000 
00001fda l       .debug_loc	00000000 
00002003 l       .debug_loc	00000000 
00002016 l       .debug_loc	00000000 
00002029 l       .debug_loc	00000000 
00002047 l       .debug_loc	00000000 
0000205c l       .debug_loc	00000000 
00002072 l       .debug_loc	00000000 
00002090 l       .debug_loc	00000000 
00003211 l       .debug_line	00000000 .Lline_table_start0
000006a4 l       .debug_frame	00000000 
20041580 l       .text	00000000 
00000000 l    df *ABS*	00000000 cheri_stdin.cc
20041580 l       .text	00000000 
20041580 l       .text	00000000 
20041580 l       .text	00000000 
20041582 l       .text	00000000 
20041582 l       .text	00000000 
20041584 l       .text	00000000 
20041584 l       .text	00000000 .LBB0_1
20041598 l       .text	00000000 
20041598 l       .text	00000000 
2004159e l       .text	00000000 
2004159e l       .text	00000000 
200415a6 l       .text	00000000 
200415a6 l       .text	00000000 
000035e1 l       .debug_line	00000000 .Lline_table_start0
00000728 l       .debug_frame	00000000 
200415a6 l       .text	00000000 
00000000 l    df *ABS*	00000000 UART_MSFT_16550.cc
200415a8 l       .text	00000000 
200415a8 l       .text	00000000 
200415a8 l       .text	00000000 
200415a8 l       .text	00000000 
200415aa l       .text	00000000 
200415aa l       .text	00000000 
200415aa l       .text	00000000 
200415aa l       .text	00000000 
200415aa l       .text	00000000 
200415aa l       .text	00000000 
200415ac l       .text	00000000 
200415ac l       .text	00000000 
200415ac l       .text	00000000 
200415ac l       .text	00000000 
200f02b0 l     O .data	00000008 UartBasePtr
200415ac l       .text	00000000 
200415ac l       .text	00000000 
200415b6 l       .text	00000000 .LBB2_1
200415b6 l       .text	00000000 
200415b8 l       .text	00000000 
200415bc l       .text	00000000 
200415be l       .text	00000000 
200415c0 l       .text	00000000 
200415c4 l       .text	00000000 
200415c6 l       .text	00000000 
200415c8 l       .text	00000000 
200415c8 l       .text	00000000 
200415c8 l       .text	00000000 
200415c8 l       .text	00000000 
200415c8 l       .text	00000000 
200415ca l       .text	00000000 
200415d2 l       .text	00000000 
200415d8 l       .text	00000000 .LBB3_2
200415d2 l       .text	00000000 
200415d6 l       .text	00000000 
200415dc l       .text	00000000 
200415f8 l       .text	00000000 .LBB3_5
200415dc l       .text	00000000 
200415e0 l       .text	00000000 .LBB3_3
200415e0 l       .text	00000000 
200415e2 l       .text	00000000 
200415e6 l       .text	00000000 
200415e8 l       .text	00000000 
200415f0 l       .text	00000000 
200415f2 l       .text	00000000 
200415f4 l       .text	00000000 
200415f8 l       .text	00000000 
200415f8 l       .text	00000000 
200415fa l       .text	00000000 
200415fa l       .text	00000000 
200415fa l       .text	00000000 
200415fa l       .text	00000000 
200415fa l       .text	00000000 
200415fc l       .text	00000000 
2004160a l       .text	00000000 .LBB4_2
20041604 l       .text	00000000 
20041608 l       .text	00000000 
2004160a l       .text	00000000 
2004160e l       .text	00000000 
20041628 l       .text	00000000 .LBB4_5
2004160e l       .text	00000000 
20041612 l       .text	00000000 .LBB4_3
20041612 l       .text	00000000 
20041616 l       .text	00000000 
20041618 l       .text	00000000 
2004161a l       .text	00000000 
2004161e l       .text	00000000 
20041622 l       .text	00000000 
20041624 l       .text	00000000 
20041628 l       .text	00000000 
2004162a l       .text	00000000 
2004162a l       .text	00000000 
2004162a l       .text	00000000 
2004162a l       .text	00000000 
2004162a l       .text	00000000 
2004162c l       .text	00000000 
2004162c l       .text	00000000 
2004162e l       .text	00000000 
2004163a l       .text	00000000 .LBB5_1
2004163a l       .text	00000000 
2004163e l       .text	00000000 
20041642 l       .text	00000000 
20041646 l       .text	00000000 
2004164a l       .text	00000000 
2004164e l       .text	00000000 
20041652 l       .text	00000000 
20041654 l       .text	00000000 
2004165c l       .text	00000000 
20041660 l       .text	00000000 
2004166e l       .text	00000000 
20041672 l       .text	00000000 
2004167a l       .text	00000000 
2004167e l       .text	00000000 
20041684 l       .text	00000000 
20041686 l       .text	00000000 
20041688 l       .text	00000000 
2004168a l       .text	00000000 
2004168a l       .text	00000000 
20041694 l       .text	00000000 
20041694 l       .text	00000000 
20041696 l       .text	00000000 
2004169a l       .text	00000000 
2004169a l       .text	00000000 
2004169e l       .text	00000000 
2004169e l       .text	00000000 
200416a0 l       .text	00000000 
200416a0 l       .text	00000000 
200416a2 l       .text	00000000 
200416a2 l       .text	00000000 
200416a4 l       .text	00000000 
200416a4 l       .text	00000000 
200416a8 l       .text	00000000 
200416a8 l       .text	00000000 
200416aa l       .text	00000000 
200416ae l       .text	00000000 
200416b2 l       .text	00000000 
200416b4 l       .text	00000000 
200416bc l       .text	00000000 
200416be l       .text	00000000 
200416c0 l       .text	00000000 
200416c2 l       .text	00000000 
200416ca l       .text	00000000 
200416cc l       .text	00000000 
200416d2 l       .text	00000000 
200416d2 l       .text	00000000 
200416da l       .text	00000000 
200416da l       .text	00000000 
200416de l       .text	00000000 
200416e2 l       .text	00000000 
200416e2 l       .text	00000000 
200416e8 l       .text	00000000 
200416e8 l       .text	00000000 
000020a3 l       .debug_loc	00000000 
000020b6 l       .debug_loc	00000000 
000020d4 l       .debug_loc	00000000 
000020f4 l       .debug_loc	00000000 
00002107 l       .debug_loc	00000000 
00002125 l       .debug_loc	00000000 
00002145 l       .debug_loc	00000000 
00002158 l       .debug_loc	00000000 
0000216b l       .debug_loc	00000000 
0000217e l       .debug_loc	00000000 
00002191 l       .debug_loc	00000000 
000021a4 l       .debug_loc	00000000 
000021b7 l       .debug_loc	00000000 
000021ca l       .debug_loc	00000000 
000021e8 l       .debug_loc	00000000 
000021fb l       .debug_loc	00000000 
000036fa l       .debug_line	00000000 .Lline_table_start0
00000754 l       .debug_frame	00000000 
200416e8 l       .text	00000000 
20040080 g     F .init	00000108 __start
200f7000 g       *ABS*	00000000 _stack_end
200f8000 g       *ABS*	00000000 _stack_start
200f0000 g       .data	00000000 _cgp_start
200f02c0 g       .data	00000000 _cgp_end
20040190 g       .text	00000000 _pcc_start
200417c0 g       .text	00000000 _pcc_end
2004144c g     F .text	00000134 cstart
200f02c0 g       .data	00000000 _heap_start
200f7000 g       *ABS*	00000000 _heap_end
20040188 g       __cap_relocs	00000000 __cap_relocs
20040188 g       __cap_relocs	00000000 __cap_relocs_end
20040196 g       .text	00000000 cheri_stdin_test
200401e4 g     F .text	00000014 isctype(int, int)
200f0000 g     O .data	00000080 ctype_table
200401f8 g     F .text	0000004e realloc(void*, unsigned int)
200403a8 g     F .text	000000c8 free(void*)
2004050e g     F .text	000000ac malloc(unsigned int)
20040f1c g     F .text	0000001c memcpy(void*, void const*, unsigned int)
20040248 g     F .text	0000015e strtoul(char const*, char**, int)
200f0090 g     O .data	00000008 HeapCap
20040470 g     F .text	00000024 setMallocDescriptor(malloc_s*, __uintcap_t, __uintcap_t, unsigned int)
20040494 g     F .text	0000001c get_ptr(unsigned long, unsigned int)
200f02a0 g     O .data	00000008 globalRoot
200404b0 g     F .text	0000005e malloc_init(void*, unsigned int)
200f0080 g     O .data	00000001 MallocInit
200405bc g     F .text	00000002 operator delete(void*)
200405be g     F .text	00000002 operator delete(void*, unsigned int)
200405c0 g     F .text	00000016 shift_lfsr(unsigned int*, unsigned int)
200405d6 g     F .text	0000005e rand()
200f0084 g     O .data	00000004 lfsr32
200f0088 g     O .data	00000004 lfsr31
20040634 g     F .text	00000018 srand(unsigned int)
2004064c g     F .text	00000024 random_range(unsigned int, unsigned int)
20040670 g     F .text	00000030 random_fill(unsigned int*, unsigned int)
200406a0 g     F .text	00000002 operator new(unsigned int)
200406a4 g     F .text	00000030 calloc(unsigned int, unsigned int)
20040fb4 g     F .text	00000014 memset(void*, int, unsigned int)
200406d4 g     F .text	00000190 strtol(char const*, char**, int)
20040864 g     F .text	00000378 pvsprintf(char*, char const*, void*)
20040e6c g     F .text	00000014 strlen(char const*)
20040c64 g     F .text	00000062 cfprintf(unsigned int**, char const*, ...)
200415c8 g     F .text	00000032 _write(int, char const*, int)
20040cc6 g     F .text	00000048 pfprintf(unsigned int**, char const*, ...)
20040d0e g     F .text	0000001a psprintf(char*, char const*, ...)
20040d28 g     F .text	0000003c print_test_header(char const*)
20040d64 g     F .text	0000004a print_array(unsigned int*, char const*, unsigned int)
20040db0 g     F .text	0000001e fputc(int, unsigned int**)
20040dd0 g     F .text	00000024 fputs(char const*, unsigned int**)
20040df4 g     F .text	00000058 fgets(char*, int, unsigned int**)
200415fa g     F .text	00000030 _read(int, char*, int)
20040e4c g     F .text	0000001e fgetc(unsigned int**)
20040e80 g     F .text	00000026 strcmp(char const*, char const*)
20040ea8 g     F .text	00000032 memset_rand(void*, unsigned int)
20040edc g     F .text	00000024 memcmp(void const*, void const*, unsigned int)
20040f00 g     F .text	0000001c strcpy(char*, char const*)
20040f38 g     F .text	00000022 wordcmp(void const*, void const*, int)
20040f5c g     F .text	0000001c wordcpy(void*, void const*, int)
20040f78 g     F .text	0000003a strncpy(char*, char const*, unsigned int)
20040fc8 g     F .text	00000012 wordset(void*, unsigned int, unsigned int)
20040fdc g     F .text	00000022 memset_unique(void*, unsigned int)
20041000 g     F .text	0000002c register_handler(unsigned int, void (*)())
200f00c0 g     O .data	00000180 irq_array
200f0240 g     O .data	00000030 irq_vector_exists
2004102c g     F .text	0000002c unregister_handler(unsigned int)
20041058 g     F .text	00000056 dispatch_irqs(unsigned int)
20041398 g     F .text	00000012 _exit(int)
200410b0 g     F .text	00000228 GenerateECC(unsigned long long, ENCRYPTION_TYPE_E)
20041324 g     F .text	00000056 ConCatAddrData(unsigned int, unsigned int, unsigned int, ENCRYPTION_TYPE_E)
2004137a g     F .text	0000001c ConstructECC(unsigned int, unsigned int, unsigned int, ENCRYPTION_TYPE_E)
20041398 g     F .text	00000000 __cxa_pure_virtual
200413aa g     F .text	00000010 from_root(unsigned int)
200413ba g     F .text	0000000e cap_build(void*, unsigned int, unsigned int, unsigned int)
200413c8 g     F .text	00000084 populate_caprelocs(CapReloc*, unsigned int)
200f02a8 g     O .data	00000008 pccRoot
200f0000 g       .data	00000000 _data_start
200f008c g       .data	00000000 _bss_start
200f008c g       .data	00000000 _data_end
200f02b8 g       .data	00000000 _bss_end
200f0280 g     O .data	00000008 simReg
200f0278 g     O .data	00000008 tmrReg
200f0270 g     O .data	00000008 uartReg
200f0288 g     O .data	00000008 rngReg
200f0290 g     O .data	00000008 cfgReg
200f0298 g     O .data	00000008 memRands
2004162a g     F .text	000000be uart_init(void*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)
20041580 g     F .text	00000026 main
20040000 g     O .init	00000080 mtvecArr
200415a8 g     F .text	00000002 getLock(unsigned long*)
200415aa g     F .text	00000002 releaseLock(unsigned long*)
200415ac g     F .text	0000001c _flush(int)
00000008 g       *ABS*	00000000 CAPSIZE
00001000 g       *ABS*	00000000 __stack_size
20040190 g       .text	00000000 _code_start
200416e8 g       .text	00000000 _code_end
200416e8 g       .text	00000000 _rodata_start
200417b2 g       .text	00000000 _rodata_end
CAPABILITY RELOCATION RECORDS:


Disassembly of section .init:

20040000 <mtvecArr>:
20040000: 00 00 00 00 00 00 00 00         ........
20040008: 00 00 00 00 00 00 00 00         ........
20040010: 00 00 00 00 00 00 00 00         ........
20040018: 00 00 00 00 00 00 00 00         ........
20040020: 00 00 00 00 00 00 00 00         ........
20040028: 00 00 00 00 00 00 00 00         ........
20040030: 00 00 00 00 00 00 00 00         ........
20040038: 00 00 00 00 00 00 00 00         ........
20040040: 00 00 00 00 00 00 00 00         ........
20040048: 00 00 00 00 00 00 00 00         ........
20040050: 00 00 00 00 00 00 00 00         ........
20040058: 00 00 00 00 00 00 00 00         ........
20040060: 00 00 00 00 00 00 00 00         ........
20040068: 00 00 00 00 00 00 00 00         ........
20040070: 00 00 00 00 00 00 00 00         ........
20040078: 00 00 00 00 00 00 00 00         ........

20040080 <__start>:
; 	ZERO c1
20040080: db 00 a0 fe  	cmove	cra, cnull
; 	ZERO c2
20040084: 5b 01 a0 fe  	cmove	csp, cnull
; 	ZERO c3
20040088: db 01 a0 fe  	cmove	cgp, cnull
; 	ZERO c4
2004008c: 5b 02 a0 fe  	cmove	ctp, cnull
; 	ZERO c5
20040090: db 02 a0 fe  	cmove	ct0, cnull
; 	ZERO c6
20040094: 5b 03 a0 fe  	cmove	ct1, cnull
; 	ZERO c7
20040098: db 03 a0 fe  	cmove	ct2, cnull
; 	ZERO c8
2004009c: 5b 04 a0 fe  	cmove	cs0, cnull
; 	ZERO c9
200400a0: db 04 a0 fe  	cmove	cs1, cnull
; 	ZERO c10
200400a4: 5b 05 a0 fe  	cmove	ca0, cnull
; 	ZERO c11
200400a8: db 05 a0 fe  	cmove	ca1, cnull
; 	ZERO c12
200400ac: 5b 06 a0 fe  	cmove	ca2, cnull
; 	ZERO c13
200400b0: db 06 a0 fe  	cmove	ca3, cnull
; 	ZERO c14
200400b4: 5b 07 a0 fe  	cmove	ca4, cnull
; 	ZERO c15
200400b8: db 07 a0 fe  	cmove	ca5, cnull
; 	cspecialr		cs0, mtdc
200400bc: 5b 04 d0 03  	cspecialr	cs0, mtdc
; 	li				a1, ~CHERI_PERM_GLOBAL
200400c0: f9 55        	addi	a1, zero, -2
; 	candperm		ca0, cs0, a1
200400c2: 5b 05 b4 1a  	candperm	ca0, cs0, a1
; 	LA_ABS			a1, _stack_end
200400c6: b7 75 0f 20  	lui	a1, 131319
200400ca: 93 85 05 00  	mv	a1, a1
; 	LA_ABS			a2, _stack_start
200400ce: 37 86 0f 20  	lui	a2, 131320
200400d2: 13 06 06 00  	mv	a2, a2
; 	sub				a2, a2, a1
200400d6: 0d 8e        	sub	a2, a2, a1
; 	csetaddr		ca0, ca0, a1
200400d8: 5b 05 b5 20  	csetaddr	ca0, ca0, a1
; 	csetbounds		ca0, ca0, a2
200400dc: 5b 05 c5 10  	csetbounds	ca0, ca0, a2
; 	cincoffset		csp, ca0, a2
200400e0: 5b 01 c5 22  	cincoffset	csp, ca0, a2
; 	li				a1, ~0
200400e4: fd 55        	addi	a1, zero, -1
; 	candperm		ca0, cs0, a1
200400e6: 5b 05 b4 1a  	candperm	ca0, cs0, a1
; 	LA_ABS			a1, _cgp_start
200400ea: b7 05 0f 20  	lui	a1, 131312
200400ee: 93 85 05 00  	mv	a1, a1
; 	LA_ABS			a2, _cgp_end
200400f2: 37 06 0f 20  	lui	a2, 131312
200400f6: 13 06 06 2c  	addi	a2, a2, 704
; 	sub				a2, a2, a1
200400fa: 0d 8e        	sub	a2, a2, a1
; 	csetaddr		ca0, ca0, a1
200400fc: 5b 05 b5 20  	csetaddr	ca0, ca0, a1
; 	csetbounds		ca0, ca0, a2
20040100: 5b 05 c5 10  	csetbounds	ca0, ca0, a2
; 	srli			a2, a2, 1
20040104: 05 82        	srli	a2, a2, 1
; 	cincoffset		cgp, ca0, a2
20040106: db 01 c5 22  	cincoffset	cgp, ca0, a2
; 	auipcc			cs1, 0
2004010a: 97 04 00 00  	auipcc	cs1, 0
; 	LA_ABS			a1, _pcc_start
2004010e: b7 05 04 20  	lui	a1, 131136
20040112: 93 85 05 19  	addi	a1, a1, 400
; 	LA_ABS			a2, _pcc_end
20040116: 37 16 04 20  	lui	a2, 131137
2004011a: 13 06 06 7c  	addi	a2, a2, 1984
; 	sub				a2, a2, a1
2004011e: 0d 8e        	sub	a2, a2, a1
; 	csetaddr		ca0, cs1, a1
20040120: 5b 85 b4 20  	csetaddr	ca0, cs1, a1
; 	csetbounds		ca0, ca0, a2
20040124: 5b 05 c5 10  	csetbounds	ca0, ca0, a2
; 	LA_ABS			a1, cstart
20040128: b7 15 04 20  	lui	a1, 131137
2004012c: 93 85 c5 44  	addi	a1, a1, 1100
; 	csetaddr		cra, ca0, a1
20040130: db 00 b5 20  	csetaddr	cra, ca0, a1
; 	cmove			ca0, cs1
20040134: 5b 85 a4 fe  	cmove	ca0, cs1
; 	cmove			ca1, cs0
20040138: db 05 a4 fe  	cmove	ca1, cs0
; 	LA_ABS			a3, _heap_start
2004013c: b7 06 0f 20  	lui	a3, 131312
20040140: 93 86 06 2c  	addi	a3, a3, 704
; 	csetaddr		ca2, ca1, a3
20040144: 5b 86 d5 20  	csetaddr	ca2, ca1, a3
; 	LA_ABS			a4, _heap_end
20040148: 37 77 0f 20  	lui	a4, 131319
2004014c: 13 07 07 00  	mv	a4, a4
; 	sub				a3, a4, a3
20040150: b3 06 d7 40  	sub	a3, a4, a3
; 	LA_ABS			a5, __cap_relocs
20040154: b7 07 04 20  	lui	a5, 131136
20040158: 93 87 87 18  	addi	a5, a5, 392
; 	csetaddr		ca4, ca1, a5
2004015c: 5b 87 f5 20  	csetaddr	ca4, ca1, a5
; 	LA_ABS			t0, __cap_relocs_end
20040160: b7 02 04 20  	lui	t0, 131136
20040164: 93 82 82 18  	addi	t0, t0, 392
; 	sub				a5, t0, a5
20040168: b3 87 f2 40  	sub	a5, t0, a5
; 	li				t0, 20
2004016c: d1 42        	addi	t0, zero, 20
; 	divu			a5, a5, t0
2004016e: b3 d7 57 02  	divu	a5, a5, t0
;   li a0,  0x88                        # set mstatus.mie=1, mstatus.mpie=1
20040172: 13 05 80 08  	addi	a0, zero, 136
;   csrs mstatus, a0 
20040176: 73 20 05 30  	csrs	mstatus, a0
;   li a0,  0x1800                      # set mstatus.mpp=00
2004017a: 09 65        	lui	a0, 2
2004017c: 13 05 05 80  	addi	a0, a0, -2048
;   csrc mstatus, a0 
20040180: 73 30 05 30  	csrc	mstatus, a0
; 	cjalr			cra
20040184: 82 90        	cjalr	cra
; 	unimp
20040186: 00 00        	unimp	

Disassembly of section .text:

20040190 <read_mcycle>:
;     csrr a0, mcycle
20040190: 73 25 00 b0  	csrr	a0, mcycle
;     cret
20040194: 82 80        	cret

20040196 <cheri_stdin_test>:
;     cincoffset csp, csp, -88    # SP-16
20040196: 5b 11 81 fa  	cincoffset	csp, csp, -88
;     csc c1, 0(csp)
2004019a: 06 e0        	csc	cra, 0(csp)
;     csc c3, 8(csp)
2004019c: 0e e4        	csc	cgp, 8(csp)
;     csc c4, 16(csp)
2004019e: 12 e8        	csc	ctp, 16(csp)
;     csc c5, 24(csp)
200401a0: 16 ec        	csc	ct0, 24(csp)
;     csc c6, 32(csp)
200401a2: 1a f0        	csc	ct1, 32(csp)
;     csc c7, 40(csp)
200401a4: 1e f4        	csc	ct2, 40(csp)
;     csc c8, 48(csp)
200401a6: 22 f8        	csc	cs0, 48(csp)
;     csc c9, 56(csp)
200401a8: 26 fc        	csc	cs1, 56(csp)
;     cspecialr c5, mtdc
200401aa: db 02 d0 03  	cspecialr	ct0, mtdc
;     li x11, 0x8f00b000                  # CLINT reg base
200401ae: b7 b5 00 8f  	lui	a1, 585739
;     csetaddr c5, c5, x11
200401b2: db 82 b2 20  	csetaddr	ct0, ct0, a1

200401b6 <forever>:
;     clw x9, 20(c5)
200401b6: 83 a4 42 01  	clw	s1, 20(ct0)
;     andi x9, x9, 0x1
200401ba: 85 88        	andi	s1, s1, 1
;     beq x9, x0, forever
200401bc: ed dc        	beqz	s1, 0x200401b6 <forever>
;     clw x9, (c5)
200401be: 83 a4 02 00  	clw	s1, 0(ct0)
;     csw x9, (c5)
200401c2: 23 a0 92 00  	csw	s1, 0(ct0)
;     j forever    
200401c6: c5 bf        	j	0x200401b6 <forever>

200401c8 <sw_intr_done>:
;     li x11, 0
200401c8: 81 45        	mv	a1, zero
;     csw x11, (c5)                         # clear software interrupt
200401ca: 23 a0 b2 00  	csw	a1, 0(ct0)
;     clc c1, 0(csp)
200401ce: 82 60        	clc	cra, 0(csp)
;     clc c3, 8(csp)
200401d0: a2 61        	clc	cgp, 8(csp)
;     clc c4, 16(csp)
200401d2: 42 62        	clc	ctp, 16(csp)
;     clc c5, 24(csp)
200401d4: e2 62        	clc	ct0, 24(csp)
;     clc c6, 32(csp)
200401d6: 02 73        	clc	ct1, 32(csp)
;     clc c7, 40(csp)
200401d8: a2 73        	clc	ct2, 40(csp)
;     clc c8, 48(csp)
200401da: 42 74        	clc	cs0, 48(csp)
;     clc c9, 56(csp)
200401dc: e2 74        	clc	cs1, 56(csp)
;     cincoffset csp, csp, 88 
200401de: 5b 11 81 05  	cincoffset	csp, csp, 88
;     cret
200401e2: 82 80        	cret

200401e4 <isctype(int, int)>:
; 	return ctype_table[c] & type;
200401e4: 5b 96 01 ea  	cincoffset	ca2, cgp, -352
200401e8: 5b 26 06 08  	csetbounds	ca2, ca2, 128
200401ec: 5b 05 a6 22  	cincoffset	ca0, ca2, a0
200401f0: 03 45 05 00  	clbu	a0, 0(ca0)
200401f4: 6d 8d        	and	a0, a0, a1
200401f6: 82 80        	cret

200401f8 <realloc(void*, unsigned int)>:
; {
200401f8: 3d 71        	cincoffset	csp, csp, -32
200401fa: 06 ec        	csc	cra, 24(csp)
200401fc: 22 e8        	csc	cs0, 16(csp)
200401fe: 26 e4        	csc	cs1, 8(csp)
20040200: ae 84        	mv	s1, a1
20040202: 5b 04 a5 fe  	cmove	cs0, ca0
; 	if(size == 0) {
20040206: 81 e5        	bnez	a1, 0x2004020e <.LBB0_2>
; 		free(ptr);
20040208: 5b 05 a4 fe  	cmove	ca0, cs0
2004020c: 71 2a        	cjal	0x200403a8 <free(void*)>

2004020e <.LBB0_2>:
; 	newptr = malloc(size);
2004020e: 26 85        	mv	a0, s1
20040210: fd 2c        	cjal	0x2004050e <malloc(unsigned int)>
; 	if(newptr == NULL) {
20040212: 13 36 15 00  	seqz	a2, a0
20040216: 93 35 14 00  	seqz	a1, s0
2004021a: 4d 8e        	or	a2, a2, a1
2004021c: 05 e2        	bnez	a2, 0x2004023c <.LBB0_6>
; 	if(size < pm->size) {
2004021e: 03 26 c4 ff  	clw	a2, -4(cs0)
20040222: 63 e3 c4 00  	bltu	s1, a2, 0x20040228 <.LBB0_5>
20040226: b2 84        	mv	s1, a2

20040228 <.LBB0_5>:
; 	memcpy(newptr, ptr, csize);
20040228: db 05 a4 fe  	cmove	ca1, cs0
2004022c: 2a e0        	csc	ca0, 0(csp)
2004022e: 26 86        	mv	a2, s1
20040230: ef 00 d0 4e  	cjal	0x20040f1c <memcpy(void*, void const*, unsigned int)>
; 	free(ptr);
20040234: 5b 05 a4 fe  	cmove	ca0, cs0
20040238: 85 2a        	cjal	0x200403a8 <free(void*)>
2004023a: 02 65        	clc	ca0, 0(csp)

2004023c <.LBB0_6>:
; }
2004023c: a2 64        	clc	cs1, 8(csp)
2004023e: 42 64        	clc	cs0, 16(csp)
20040240: e2 60        	clc	cra, 24(csp)
20040242: 05 61        	cincoffset	csp, csp, 32
20040244: 82 80        	cret
20040246: 00 00        	unimp	

20040248 <strtoul(char const*, char**, int)>:
; {
20040248: 5d 71        	cincoffset	csp, csp, -80
2004024a: 86 e4        	csc	cra, 72(csp)
2004024c: a2 e0        	csc	cs0, 64(csp)
2004024e: 26 fc        	csc	cs1, 56(csp)
20040250: 32 d6        	csw	a2, 44(csp)
20040252: 2e ec        	csc	ca1, 24(csp)
20040254: 2a e4        	csc	ca0, 8(csp)
20040256: 5b 06 a5 fe  	cmove	ca2, ca0

2004025a <.LBB0_1>:
2004025a: db 04 a6 fe  	cmove	cs1, ca2
;                 c = *s++;
2004025e: 03 44 06 00  	clbu	s0, 0(ca2)
20040262: 5b 15 16 00  	cincoffset	ca0, ca2, 1
;         } while (isspace(c));
20040266: 2a f8        	csc	ca0, 48(csp)
20040268: 85 45        	addi	a1, zero, 1
2004026a: 22 85        	mv	a0, s0
2004026c: a5 3f        	cjal	0x200401e4 <isctype(int, int)>
2004026e: 42 76        	clc	ca2, 48(csp)
;         } while (isspace(c));
20040270: 6d f5        	bnez	a0, 0x2004025a <.LBB0_1>
20040272: 93 05 d0 02  	addi	a1, zero, 45
;         if (c == '-') {
20040276: 63 0b b4 00  	beq	s0, a1, 0x2004028c <.LBB0_5>
2004027a: 22 85        	mv	a0, s0
2004027c: 93 05 b0 02  	addi	a1, zero, 43
20040280: 85 46        	addi	a3, zero, 1
20040282: b2 57        	clw	a5, 44(csp)
;         if (c == '-') {
20040284: 63 1a b4 00  	bne	s0, a1, 0x20040298 <.LBB0_7>
20040288: 85 46        	addi	a3, zero, 1
2004028a: 19 a0        	j	0x20040290 <.LBB0_6>

2004028c <.LBB0_5>:
2004028c: 81 46        	mv	a3, zero
2004028e: b2 57        	clw	a5, 44(csp)

20040290 <.LBB0_6>:
20040290: 03 c5 14 00  	clbu	a0, 1(cs1)
20040294: 5b 96 24 00  	cincoffset	ca2, cs1, 2

20040298 <.LBB0_7>:
;         if ((base == 0 || base == 16) &&
20040298: 13 f7 f7 fe  	andi	a4, a5, -17
2004029c: 93 45 05 03  	xori	a1, a0, 48
200402a0: d9 8d        	or	a1, a1, a4
200402a2: 36 ca        	csw	a3, 20(csp)
200402a4: 91 ed        	bnez	a1, 0x200402c0 <.LBB0_10>
;             (c == '0') && (*s == 'x' || *s == 'X')) {
200402a6: 03 45 06 00  	clbu	a0, 0(ca2)
200402aa: 13 65 05 02  	ori	a0, a0, 32
200402ae: 93 05 80 07  	addi	a1, zero, 120
200402b2: 63 12 b5 02  	bne	a0, a1, 0x200402d6 <.LBB0_12>
;                 c = s[1];
200402b6: 03 45 16 00  	clbu	a0, 1(ca2)
;                 s += 2;
200402ba: 5b 16 26 00  	cincoffset	ca2, ca2, 2
200402be: c1 47        	addi	a5, zero, 16

200402c0 <.LBB0_10>:
200402c0: 93 05 00 03  	addi	a1, zero, 48
;         if (base == 0)
200402c4: 93 b6 17 00  	seqz	a3, a5
200402c8: 63 09 b5 00  	beq	a0, a1, 0x200402da <.LBB0_13>
200402cc: 32 f8        	csc	ca2, 48(csp)
200402ce: a9 45        	addi	a1, zero, 10
200402d0: 2e d4        	csw	a1, 40(csp)
;         if (base == 0)
200402d2: 91 ca        	beqz	a3, 0x200402e6 <.LBB0_14>
200402d4: 11 a8        	j	0x200402e8 <.LBB0_15>

200402d6 <.LBB0_12>:
200402d6: 93 b6 17 00  	seqz	a3, a5

200402da <.LBB0_13>:
200402da: 32 f8        	csc	ca2, 48(csp)
200402dc: 21 45        	addi	a0, zero, 8
200402de: 2a d4        	csw	a0, 40(csp)
200402e0: 13 05 00 03  	addi	a0, zero, 48
;         if (base == 0)
200402e4: 91 e2        	bnez	a3, 0x200402e8 <.LBB0_15>

200402e6 <.LBB0_14>:
200402e6: 3e d4        	csw	a5, 40(csp)

200402e8 <.LBB0_15>:
200402e8: 02 d6        	csw	zero, 44(csp)
200402ea: 01 44        	mv	s0, zero
200402ec: fd 55        	addi	a1, zero, -1
200402ee: 22 56        	clw	a2, 40(csp)
;         cutoff = (uint32_t)ULONG_MAX / base;
200402f0: b3 d5 c5 02  	divu	a1, a1, a2
200402f4: 2e d2        	csw	a1, 36(csp)
200402f6: b3 85 c5 02  	mul	a1, a1, a2
200402fa: 93 c5 f5 ff  	not	a1, a1
200402fe: 2e d0        	csw	a1, 32(csp)

20040300 <.LBB0_16>:
;                 if (isdigit(c))
20040300: a1 45        	addi	a1, zero, 8
20040302: aa 84        	mv	s1, a0
20040304: c5 35        	cjal	0x200401e4 <isctype(int, int)>
20040306: 01 c5        	beqz	a0, 0x2004030e <.LBB0_18>
;                         c -= '0';
20040308: 13 85 04 fd  	addi	a0, s1, -48
2004030c: 05 a0        	j	0x2004032c <.LBB0_22>

2004030e <.LBB0_18>:
;                 else if (isalpha(c))
2004030e: 93 05 00 04  	addi	a1, zero, 64
20040312: 26 85        	mv	a0, s1
20040314: c1 3d        	cjal	0x200401e4 <isctype(int, int)>
20040316: 2d c1        	beqz	a0, 0x20040378 <.LBB0_28>
;                         c -= isupper(c) ? 'A' - 10 : 'a' - 10;
20040318: 91 45        	addi	a1, zero, 4
2004031a: 26 85        	mv	a0, s1
2004031c: e1 35        	cjal	0x200401e4 <isctype(int, int)>
2004031e: 93 05 90 fa  	addi	a1, zero, -87
;                         c -= isupper(c) ? 'A' - 10 : 'a' - 10;
20040322: 19 c1        	beqz	a0, 0x20040328 <.LBB0_21>
20040324: 93 05 90 fc  	addi	a1, zero, -55

20040328 <.LBB0_21>:
;                         c -= isupper(c) ? 'A' - 10 : 'a' - 10;
20040328: 33 85 95 00  	add	a0, a1, s1

2004032c <.LBB0_22>:
;                 if (c >= base)
2004032c: a2 55        	clw	a1, 40(csp)
2004032e: 63 55 b5 04  	bge	a0, a1, 0x20040378 <.LBB0_28>
;                 if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
20040332: 93 25 04 00  	slti	a1, s0, 0
20040336: 32 54        	clw	s0, 44(csp)
20040338: 12 57        	clw	a4, 36(csp)
2004033a: 33 36 87 00  	sltu	a2, a4, s0
;                 if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
2004033e: d1 8d        	or	a1, a1, a2
20040340: fd 56        	addi	a3, zero, -1
20040342: 99 c1        	beqz	a1, 0x20040348 <.LBB0_25>
20040344: a2 85        	mv	a1, s0
20040346: 05 a0        	j	0x20040366 <.LBB0_27>

20040348 <.LBB0_25>:
;                 if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
20040348: b3 45 e4 00  	xor	a1, s0, a4
2004034c: 93 b5 15 00  	seqz	a1, a1
20040350: 02 56        	clw	a2, 32(csp)
20040352: 33 26 a6 00  	slt	a2, a2, a0
20040356: 6d 8e        	and	a2, a2, a1
20040358: ba 85        	mv	a1, a4
2004035a: 11 e6        	bnez	a2, 0x20040366 <.LBB0_27>
;                         acc = acc * base;
2004035c: a2 55        	clw	a1, 40(csp)
2004035e: b3 05 b4 02  	mul	a1, s0, a1
;                         acc += c;
20040362: aa 95        	add	a1, a1, a0
20040364: 85 46        	addi	a3, zero, 1

20040366 <.LBB0_27>:
20040366: 36 84        	mv	s0, a3
20040368: c2 74        	clc	cs1, 48(csp)
;         for (acc = 0, any = 0;; c = *s++) {
2004036a: 03 c5 04 00  	clbu	a0, 0(cs1)
2004036e: 5b 96 14 00  	cincoffset	ca2, cs1, 1
20040372: 2e d6        	csw	a1, 44(csp)
20040374: 32 f8        	csc	ca2, 48(csp)
20040376: 69 b7        	j	0x20040300 <.LBB0_16>

20040378 <.LBB0_28>:
20040378: e2 65        	clc	ca1, 24(csp)
2004037a: 22 86        	mv	a2, s0
;         if (endptr != 0)
2004037c: 99 c5        	beqz	a1, 0x2004038a <.LBB0_32>
2004037e: 22 65        	clc	ca0, 8(csp)
;                 *endptr = (char *)(any ? s - 1 : nptr);
20040380: 01 c6        	beqz	a2, 0x20040388 <.LBB0_31>
20040382: 42 75        	clc	ca0, 48(csp)
20040384: 5b 15 f5 ff  	cincoffset	ca0, ca0, -1

20040388 <.LBB0_31>:
;                 *endptr = (char *)(any ? s - 1 : nptr);
20040388: 88 e1        	csc	ca0, 0(ca1)

2004038a <.LBB0_32>:
;         if (any < 0) {
2004038a: 52 45        	clw	a0, 20(csp)
2004038c: 32 54        	clw	s0, 44(csp)
2004038e: 19 e1        	bnez	a0, 0x20040394 <.LBB0_34>
20040390: 33 04 80 40  	neg	s0, s0

20040394 <.LBB0_34>:
;         if (any < 0) {
20040394: 63 53 06 00  	bgez	a2, 0x2004039a <.LBB0_36>
20040398: 7d 54        	addi	s0, zero, -1

2004039a <.LBB0_36>:
;         return (acc);
2004039a: 22 85        	mv	a0, s0
2004039c: e2 74        	clc	cs1, 56(csp)
2004039e: 06 64        	clc	cs0, 64(csp)
200403a0: a6 60        	clc	cra, 72(csp)
200403a2: 61 61        	cincoffset	csp, csp, 80
200403a4: 82 80        	cret
200403a6: 00 00        	unimp	

200403a8 <free(void*)>:
; {
200403a8: 79 71        	cincoffset	csp, csp, -48
200403aa: 06 f4        	csc	cra, 40(csp)
200403ac: 22 f0        	csc	cs0, 32(csp)
200403ae: 26 ec        	csc	cs1, 24(csp)
200403b0: 5b 04 a5 fe  	cmove	cs0, ca0
; 	if(pm->magic_number == MALLOC_MAGIC_NUM && pm_nxt->magic_number == MALLOC_MAGIC_NUM && 
200403b4: 03 55 a5 ff  	clhu	a0, -6(ca0)
200403b8: a9 65        	lui	a1, 10
200403ba: 93 86 c5 53  	addi	a3, a1, 1340
200403be: 63 14 d5 0a  	bne	a0, a3, 0x20040466 <.LBB0_9>
200403c2: db 94 01 f3  	cincoffset	cs1, cgp, -208
200403c6: db a4 84 00  	csetbounds	cs1, cs1, 8
200403ca: 90 60        	clc	ca2, 0(cs1)
200403cc: 03 25 44 ff  	clw	a0, -12(cs0)
200403d0: db 05 a6 20  	csetaddr	ca1, ca2, a0
; 	if(pm->magic_number == MALLOC_MAGIC_NUM && pm_nxt->magic_number == MALLOC_MAGIC_NUM && 
200403d4: 03 d7 a5 00  	clhu	a4, 10(ca1)
200403d8: 63 17 d7 08  	bne	a4, a3, 0x20040466 <.LBB0_9>
200403dc: 03 27 04 ff  	clw	a4, -16(cs0)
200403e0: fd 56        	addi	a3, zero, -1
200403e2: db 07 e6 20  	csetaddr	ca5, ca2, a4
; 	   (pm->prev_addr == 0xffffffff || pm_prev->magic_number == MALLOC_MAGIC_NUM)) {
200403e6: 63 09 d7 00  	beq	a4, a3, 0x200403f8 <.LBB0_4>
200403ea: 03 d6 a7 00  	clhu	a2, 10(ca5)
200403ee: a9 66        	lui	a3, 10
200403f0: 93 86 c6 53  	addi	a3, a3, 1340
; 	if(pm->magic_number == MALLOC_MAGIC_NUM && pm_nxt->magic_number == MALLOC_MAGIC_NUM && 
200403f4: 63 19 d6 06  	bne	a2, a3, 0x20040466 <.LBB0_9>

200403f8 <.LBB0_4>:
; 		pm->status = HSP_FREE;
200403f8: 23 1c 04 fe  	csh	zero, -8(cs0)
; 		if(pm_nxt->status == HSP_FREE) {
200403fc: 83 d6 85 00  	clhu	a3, 8(ca1)
20040400: 3a 86        	mv	a2, a4
20040402: 9d ea        	bnez	a3, 0x20040438 <.LBB0_6>
20040404: 5b 05 f4 fe  	cgetaddr	a0, cs0
; 			setMallocDescriptor(pm,pm->prev_addr, pm_nxt->next_addr, HSP_FREE);
20040408: d0 41        	clw	a2, 4(ca1)
2004040a: 41 15        	addi	a0, a0, -16
2004040c: 2a c2        	csw	a0, 4(csp)
2004040e: 5b 15 04 ff  	cincoffset	ca0, cs0, -16
20040412: db 05 e0 22  	cincoffset	ca1, cnull, a4
20040416: 5b 06 c0 22  	cincoffset	ca2, cnull, a2
2004041a: 81 46        	mv	a3, zero
2004041c: 3a ca        	csw	a4, 20(csp)
2004041e: 3e e4        	csc	ca5, 8(csp)
20040420: 81 28        	cjal	0x20040470 <setMallocDescriptor(malloc_s*, __uintcap_t, __uintcap_t, unsigned int)>
20040422: a2 67        	clc	ca5, 8(csp)
20040424: 52 47        	clw	a4, 20(csp)
; 			pm_nxt = (pmalloc_t)malloc_fromaddr(pm->next_addr);
20040426: 03 25 44 ff  	clw	a0, -12(cs0)
; 	return cheri_address_set(HeapCap, addr);
2004042a: 8c 60        	clc	ca1, 0(cs1)
2004042c: db 85 a5 20  	csetaddr	ca1, ca1, a0
; 			pm_nxt->prev_addr = (uintptr_t)pm;
20040430: 12 46        	clw	a2, 4(csp)
20040432: 90 c1        	csw	a2, 0(ca1)
; 		if(pm->prev_addr != 0xffffffff && pm_prev->status == HSP_FREE) {
20040434: 03 26 04 ff  	clw	a2, -16(cs0)

20040438 <.LBB0_6>:
20040438: fd 55        	addi	a1, zero, -1
; 		if(pm->prev_addr != 0xffffffff && pm_prev->status == HSP_FREE) {
2004043a: 63 06 b6 02  	beq	a2, a1, 0x20040466 <.LBB0_9>
2004043e: 83 d5 87 00  	clhu	a1, 8(ca5)
20040442: 95 e1        	bnez	a1, 0x20040466 <.LBB0_9>
; 			setMallocDescriptor(pm_prev,pm_prev->prev_addr, pm->next_addr, HSP_FREE);
20040444: 8c 43        	clw	a1, 0(ca5)
20040446: db 05 b0 22  	cincoffset	ca1, cnull, a1
2004044a: 5b 06 a0 22  	cincoffset	ca2, cnull, a0
2004044e: 5b 85 a7 fe  	cmove	ca0, ca5
20040452: 81 46        	mv	a3, zero
20040454: 3a ca        	csw	a4, 20(csp)
20040456: 29 28        	cjal	0x20040470 <setMallocDescriptor(malloc_s*, __uintcap_t, __uintcap_t, unsigned int)>
; 			pm_nxt = (pmalloc_t)malloc_fromaddr(pm->next_addr);
20040458: 03 25 44 ff  	clw	a0, -12(cs0)
; 	return cheri_address_set(HeapCap, addr);
2004045c: 8c 60        	clc	ca1, 0(cs1)
2004045e: 5b 85 a5 20  	csetaddr	ca0, ca1, a0
; 			pm_nxt->prev_addr = (uintptr_t)pm_prev;
20040462: d2 45        	clw	a1, 20(csp)
20040464: 0c c1        	csw	a1, 0(ca0)

20040466 <.LBB0_9>:
; }
20040466: e2 64        	clc	cs1, 24(csp)
20040468: 02 74        	clc	cs0, 32(csp)
2004046a: a2 70        	clc	cra, 40(csp)
2004046c: 45 61        	cincoffset	csp, csp, 48
2004046e: 82 80        	cret

20040470 <setMallocDescriptor(malloc_s*, __uintcap_t, __uintcap_t, unsigned int)>:
; 	ptr->prev_addr = prev;
20040470: db 85 f5 fe  	cgetaddr	a1, ca1
20040474: 0c c1        	csw	a1, 0(ca0)
; 	ptr->next_addr = next;
20040476: db 05 f6 fe  	cgetaddr	a1, ca2
2004047a: 4c c1        	csw	a1, 4(ca0)
; 	ptr->status = status;
2004047c: 23 14 d5 00  	csh	a3, 8(ca0)
20040480: a9 65        	lui	a1, 10
20040482: 93 85 c5 53  	addi	a1, a1, 1340
; 	ptr->magic_number = MALLOC_MAGIC_NUM;
20040486: 23 15 b5 00  	csh	a1, 10(ca0)
; 	ptr->size = ((uintptr_t)next - (uintptr_t)ptr) - sizeof(struct malloc_s);
2004048a: db 05 a6 28  	csub	a1, ca2, ca0
2004048e: c1 15        	addi	a1, a1, -16
20040490: 4c c5        	csw	a1, 12(ca0)
; }
20040492: 82 80        	cret

20040494 <get_ptr(unsigned long, unsigned int)>:
; 	void* ret = globalRoot;
20040494: 5b 96 01 14  	cincoffset	ca2, cgp, 320
20040498: 5b 26 86 00  	csetbounds	ca2, ca2, 8
2004049c: 10 62        	clc	ca2, 0(ca2)
2004049e: 93 06 40 06  	addi	a3, zero, 100
; 	ret = cheri_perms_and(ret, CHERI_PERMS);
200404a2: 5b 06 d6 1a  	candperm	ca2, ca2, a3
; 	ret = cheri_address_set(ret, start);
200404a6: 5b 05 a6 20  	csetaddr	ca0, ca2, a0
; 	ret = cheri_bounds_set(ret, len);
200404aa: 5b 05 b5 10  	csetbounds	ca0, ca0, a1
; 	return ret;
200404ae: 82 80        	cret

200404b0 <malloc_init(void*, unsigned int)>:
; {
200404b0: 3d 71        	cincoffset	csp, csp, -32
; 	if(MallocInit == 1) {
200404b2: 06 ec        	csc	cra, 24(csp)
200404b4: 22 e8        	csc	cs0, 16(csp)
200404b6: 26 e4        	csc	cs1, 8(csp)
200404b8: db 94 01 f2  	cincoffset	cs1, cgp, -224
200404bc: db a4 14 00  	csetbounds	cs1, cs1, 1
200404c0: 03 c6 04 00  	clbu	a2, 0(cs1)
200404c4: 85 46        	addi	a3, zero, 1
200404c6: 63 1f d6 02  	bne	a2, a3, 0x20040504 <.LBB0_2>
; 		HeapCap = heap;
200404ca: 5b 96 01 f3  	cincoffset	ca2, cgp, -208
200404ce: 5b 26 86 00  	csetbounds	ca2, ca2, 8
200404d2: 08 e2        	csc	ca0, 0(ca2)
; 		pm_nxt = (pmalloc_t)((uintptr_t)heap + len - sizeof(struct malloc_s));
200404d4: 5b 04 f5 fe  	cgetaddr	s0, ca0
200404d8: 5b 06 b5 22  	cincoffset	ca2, ca0, a1
200404dc: a2 95        	add	a1, a1, s0
200404de: c1 15        	addi	a1, a1, -16
200404e0: 5b 06 b6 20  	csetaddr	ca2, ca2, a1
; 		setMallocDescriptor(pm, 0xffffffff, (uint32_t)pm_nxt, HSP_FREE);
200404e4: 32 e0        	csc	ca2, 0(csp)
200404e6: 5b 06 b0 22  	cincoffset	ca2, cnull, a1
200404ea: db 15 f0 ff  	cincoffset	ca1, cnull, -1
200404ee: 81 46        	mv	a3, zero
200404f0: 41 37        	cjal	0x20040470 <setMallocDescriptor(malloc_s*, __uintcap_t, __uintcap_t, unsigned int)>
; 		setMallocDescriptor(pm_nxt, (uint32_t)pm, 0, HSP_END);
200404f2: db 05 80 22  	cincoffset	ca1, cnull, s0
200404f6: 89 46        	addi	a3, zero, 2
200404f8: 02 65        	clc	ca0, 0(csp)
200404fa: 5b 06 a0 fe  	cmove	ca2, cnull
200404fe: 8d 3f        	cjal	0x20040470 <setMallocDescriptor(malloc_s*, __uintcap_t, __uintcap_t, unsigned int)>
; 		MallocInit = 0;
20040500: 23 80 04 00  	csb	zero, 0(cs1)

20040504 <.LBB0_2>:
; }
20040504: a2 64        	clc	cs1, 8(csp)
20040506: 42 64        	clc	cs0, 16(csp)
20040508: e2 60        	clc	cra, 24(csp)
2004050a: 05 61        	cincoffset	csp, csp, 32
2004050c: 82 80        	cret

2004050e <malloc(unsigned int)>:
; {
2004050e: 79 71        	cincoffset	csp, csp, -48
; 	if(size == 0) {
20040510: 06 f4        	csc	cra, 40(csp)
20040512: 22 f0        	csc	cs0, 32(csp)
20040514: 26 ec        	csc	cs1, 24(csp)
20040516: 15 c9        	beqz	a0, 0x2004054a <.LBB1_5>
; 	pm = (pmalloc_t)HeapCap;
20040518: db 95 01 f3  	cincoffset	ca1, cgp, -208
2004051c: db a5 85 00  	csetbounds	ca1, ca1, 8
20040520: 90 61        	clc	ca2, 0(ca1)
; 	size += (((size^0x7)+1)&0x7);
20040522: b3 06 a0 40  	neg	a3, a0
20040526: 9d 8a        	andi	a3, a3, 7
20040528: 36 95        	add	a0, a0, a3
2004052a: 89 46        	addi	a3, zero, 2
2004052c: 5b 04 a6 fe  	cmove	cs0, ca2

20040530 <.LBB1_2>:
; 		if(pm->status == HSP_FREE && size <= pm->size) {
20040530: 03 57 84 00  	clhu	a4, 8(cs0)
20040534: 01 e7        	bnez	a4, 0x2004053c <.LBB1_4>
20040536: 58 44        	clw	a4, 12(cs0)
20040538: 63 70 a7 02  	bgeu	a4, a0, 0x20040558 <.LBB1_7>

2004053c <.LBB1_4>:
; 		pm = (pmalloc_t)malloc_fromaddr(pm->next_addr);
2004053c: 58 40        	clw	a4, 4(cs0)
; 	return cheri_address_set(HeapCap, addr);
2004053e: 5b 04 e6 20  	csetaddr	cs0, ca2, a4
; 	} while (pm->status != HSP_END);
20040542: 03 57 84 00  	clhu	a4, 8(cs0)
20040546: e3 15 d7 fe  	bne	a4, a3, 0x20040530 <.LBB1_2>

2004054a <.LBB1_5>:
; }
2004054a: 5b 05 a0 fe  	cmove	ca0, cnull

2004054e <.LBB1_6>:
2004054e: e2 64        	clc	cs1, 24(csp)
20040550: 02 74        	clc	cs0, 32(csp)
20040552: a2 70        	clc	cra, 40(csp)
20040554: 45 61        	cincoffset	csp, csp, 48
20040556: 82 80        	cret

20040558 <.LBB1_7>:
; 			if((pm->size - size) < sizeof(struct malloc_s) + sizeof(void *)) {
20040558: 33 06 a7 40  	sub	a2, a4, a0
2004055c: dd 46        	addi	a3, zero, 23
2004055e: 63 e8 c6 00  	bltu	a3, a2, 0x2004056e <.LBB1_9>
20040562: 05 45        	addi	a0, zero, 1
; 				pm->status = HSP_USED;
20040564: 23 14 a4 00  	csh	a0, 8(cs0)
; 			return (void*)((uintptr_t)pm+sizeof(struct malloc_s));
20040568: 5b 05 f4 fe  	cgetaddr	a0, cs0
2004056c: 99 a0        	j	0x200405b2 <.LBB1_10>

2004056e <.LBB1_9>:
; 				pm_new = (pmalloc_t) ((uintptr_t)pm+sizeof(struct malloc_s)+size);
2004056e: 5b 06 f4 fe  	cgetaddr	a2, cs0
20040572: 32 c8        	csw	a2, 16(csp)
20040574: 32 95        	add	a0, a0, a2
; 				pm_nxt = (pmalloc_t) malloc_fromaddr(pm->next_addr);
20040576: 58 40        	clw	a4, 4(cs0)
; 	return cheri_address_set(HeapCap, addr);
20040578: 8c 61        	clc	ca1, 0(ca1)
; 				setMallocDescriptor(pm, (uintptr_t)malloc_fromaddr(pm->prev_addr), (uintptr_t)pm_new, HSP_USED);
2004057a: 14 40        	clw	a3, 0(cs0)
; 				pm_new = (pmalloc_t) ((uintptr_t)pm+sizeof(struct malloc_s)+size);
2004057c: 41 05        	addi	a0, a0, 16
2004057e: 2a ca        	csw	a0, 20(csp)
20040580: db 04 a4 20  	csetaddr	cs1, cs0, a0
; 	return cheri_address_set(HeapCap, addr);
20040584: 5b 85 e5 20  	csetaddr	ca0, ca1, a4
20040588: 2a e4        	csc	ca0, 8(csp)
2004058a: db 85 d5 20  	csetaddr	ca1, ca1, a3
; 				setMallocDescriptor(pm, (uintptr_t)malloc_fromaddr(pm->prev_addr), (uintptr_t)pm_new, HSP_USED);
2004058e: 85 46        	addi	a3, zero, 1
20040590: 5b 05 a4 fe  	cmove	ca0, cs0
20040594: 5b 86 a4 fe  	cmove	ca2, cs1
20040598: e1 3d        	cjal	0x20040470 <setMallocDescriptor(malloc_s*, __uintcap_t, __uintcap_t, unsigned int)>
; 				setMallocDescriptor(pm_new, (uintptr_t)pm, (uintptr_t)pm_nxt,HSP_FREE);
2004059a: 5b 85 a4 fe  	cmove	ca0, cs1
2004059e: db 05 a4 fe  	cmove	ca1, cs0
200405a2: a2 64        	clc	cs1, 8(csp)
200405a4: 5b 86 a4 fe  	cmove	ca2, cs1
200405a8: 81 46        	mv	a3, zero
200405aa: d9 35        	cjal	0x20040470 <setMallocDescriptor(malloc_s*, __uintcap_t, __uintcap_t, unsigned int)>
; 				pm_nxt->prev_addr = (uintptr_t) pm_new;
200405ac: 52 45        	clw	a0, 20(csp)
200405ae: 88 c0        	csw	a0, 0(cs1)
200405b0: 42 45        	clw	a0, 16(csp)

200405b2 <.LBB1_10>:
; 			return (void*)((uintptr_t)pm+sizeof(struct malloc_s));
200405b2: 41 05        	addi	a0, a0, 16
200405b4: 5b 05 a4 20  	csetaddr	ca0, cs0, a0
200405b8: 59 bf        	j	0x2004054e <.LBB1_6>
200405ba: 00 00        	unimp	

200405bc <operator delete(void*)>:
;   free(ptr);
200405bc: f5 b3        	j	0x200403a8 <free(void*)>

200405be <operator delete(void*, unsigned int)>:
;   free(ptr);
200405be: ed b3        	j	0x200403a8 <free(void*)>

200405c0 <shift_lfsr(unsigned int*, unsigned int)>:
;   feedback = *lfsr&1;
200405c0: 10 41        	clw	a2, 0(ca0)
200405c2: 93 76 16 00  	andi	a3, a2, 1
200405c6: b3 06 d0 40  	neg	a3, a3
;   *lfsr >>=1;
200405ca: 05 82        	srli	a2, a2, 1
;   if(feedback ==1) {
200405cc: f5 8d        	and	a1, a1, a3
200405ce: b1 8d        	xor	a1, a1, a2
200405d0: 0c c1        	csw	a1, 0(ca0)
;   return *lfsr;
200405d2: 2e 85        	mv	a0, a1
200405d4: 82 80        	cret

200405d6 <rand()>:
;   feedback = *lfsr&1;
200405d6: 5b 95 41 f2  	cincoffset	ca0, cgp, -220
200405da: 5b 25 45 00  	csetbounds	ca0, ca0, 4
200405de: 0c 41        	clw	a1, 0(ca0)
200405e0: 13 f6 15 00  	andi	a2, a1, 1
200405e4: 33 06 c0 40  	neg	a2, a2
;   *lfsr >>=1;
200405e8: 93 d6 25 00  	srli	a3, a1, 2
200405ec: 37 77 5e 5a  	lui	a4, 370151
200405f0: 13 07 e7 9a  	addi	a4, a4, -1618
;   if(feedback ==1) {
200405f4: 79 8e        	and	a2, a2, a4
200405f6: 35 8e        	xor	a2, a2, a3
200405f8: fa 05        	slli	a1, a1, 30
200405fa: fd 85        	srai	a1, a1, 31
200405fc: b7 d6 bc b4  	lui	a3, 740301
20040600: 93 86 c6 35  	addi	a3, a3, 860
;   feedback = *lfsr&1;
20040604: 5b 97 81 f2  	cincoffset	ca4, cgp, -216
20040608: 5b 27 47 00  	csetbounds	ca4, ca4, 4
2004060c: 1c 43        	clw	a5, 0(ca4)
;   if(feedback ==1) {
2004060e: f5 8d        	and	a1, a1, a3
20040610: b1 8d        	xor	a1, a1, a2
20040612: 0c c1        	csw	a1, 0(ca0)
;   feedback = *lfsr&1;
20040614: 13 f5 17 00  	andi	a0, a5, 1
20040618: 33 05 a0 40  	neg	a0, a0
;   *lfsr >>=1;
2004061c: 13 d6 17 00  	srli	a2, a5, 1
20040620: b7 c6 5b 7a  	lui	a3, 501180
20040624: 93 86 36 2e  	addi	a3, a3, 739
;   if(feedback ==1) {
20040628: 75 8d        	and	a0, a0, a3
2004062a: 29 8e        	xor	a2, a2, a0
;   return (shift_lfsr(&lfsr32, POLY_MASK_32) ^ shift_lfsr(&lfsr31, POLY_MASK_31));
2004062c: 33 45 b6 00  	xor	a0, a2, a1
20040630: 10 c3        	csw	a2, 0(ca4)
;   return (shift_lfsr(&lfsr32, POLY_MASK_32) ^ shift_lfsr(&lfsr31, POLY_MASK_31));
20040632: 82 80        	cret

20040634 <srand(unsigned int)>:
; 	lfsr32 = seed;
20040634: db 95 41 f2  	cincoffset	ca1, cgp, -220
20040638: db a5 45 00  	csetbounds	ca1, ca1, 4
2004063c: 88 c1        	csw	a0, 0(ca1)
; 	lfsr31 = seed/2;
2004063e: 05 81        	srli	a0, a0, 1
20040640: db 95 81 f2  	cincoffset	ca1, cgp, -216
20040644: db a5 45 00  	csetbounds	ca1, ca1, 4
20040648: 88 c1        	csw	a0, 0(ca1)
; }
2004064a: 82 80        	cret

2004064c <random_range(unsigned int, unsigned int)>:
; {
2004064c: 3d 71        	cincoffset	csp, csp, -32
2004064e: 06 ec        	csc	cra, 24(csp)
20040650: 22 e8        	csc	cs0, 16(csp)
20040652: 26 e4        	csc	cs1, 8(csp)
20040654: 2e 84        	mv	s0, a1
20040656: aa 84        	mv	s1, a0
;     random_val = (rand() % (max+1-min))+min;
20040658: bd 3f        	cjal	0x200405d6 <rand()>
2004065a: b3 05 94 40  	sub	a1, s0, s1
2004065e: 85 05        	addi	a1, a1, 1
20040660: 33 75 b5 02  	remu	a0, a0, a1
20040664: 26 95        	add	a0, a0, s1
;     return random_val;
20040666: a2 64        	clc	cs1, 8(csp)
20040668: 42 64        	clc	cs0, 16(csp)
2004066a: e2 60        	clc	cra, 24(csp)
2004066c: 05 61        	cincoffset	csp, csp, 32
2004066e: 82 80        	cret

20040670 <random_fill(unsigned int*, unsigned int)>:
; void random_fill(uint32_t * arr, uint32_t num) {
20040670: 79 71        	cincoffset	csp, csp, -48
20040672: 06 f4        	csc	cra, 40(csp)
20040674: 22 f0        	csc	cs0, 32(csp)
20040676: 26 ec        	csc	cs1, 24(csp)
20040678: 2e ca        	csw	a1, 20(csp)
2004067a: 2a e4        	csc	ca0, 8(csp)
2004067c: 81 44        	mv	s1, zero

2004067e <.LBB4_1>:
; 	for(i=0;i<num;i++) 
2004067e: 52 45        	clw	a0, 20(csp)
20040680: 63 0b 95 00  	beq	a0, s1, 0x20040696 <.LBB4_3>
; 		hw_write32(arr+i,rand());
20040684: 13 95 24 00  	slli	a0, s1, 2
20040688: a2 65        	clc	ca1, 8(csp)
2004068a: 5b 84 a5 22  	cincoffset	cs0, ca1, a0
2004068e: a1 37        	cjal	0x200405d6 <rand()>
; inline void hw_write32(volatile uint32_t* addr, uint32_t data) { *addr = data; }
20040690: 08 c0        	csw	a0, 0(cs0)
; 	for(i=0;i<num;i++) 
20040692: 85 04        	addi	s1, s1, 1
20040694: ed b7        	j	0x2004067e <.LBB4_1>

20040696 <.LBB4_3>:
; }
20040696: e2 64        	clc	cs1, 24(csp)
20040698: 02 74        	clc	cs0, 32(csp)
2004069a: a2 70        	clc	cra, 40(csp)
2004069c: 45 61        	cincoffset	csp, csp, 48
2004069e: 82 80        	cret

200406a0 <operator new(unsigned int)>:
;   ptr = (void*) malloc(size);
200406a0: bd b5        	j	0x2004050e <malloc(unsigned int)>
200406a2: 00 00        	unimp	

200406a4 <calloc(unsigned int, unsigned int)>:
; {
200406a4: 3d 71        	cincoffset	csp, csp, -32
;   int bytes = num*size;
200406a6: 06 ec        	csc	cra, 24(csp)
200406a8: 22 e8        	csc	cs0, 16(csp)
200406aa: 26 e4        	csc	cs1, 8(csp)
200406ac: 33 84 a5 02  	mul	s0, a1, a0
;   void *ptr = malloc(bytes);
200406b0: 22 85        	mv	a0, s0
200406b2: b1 3d        	cjal	0x2004050e <malloc(unsigned int)>
200406b4: db 04 a5 fe  	cmove	cs1, ca0
;   if(ptr != NULL) {
200406b8: 99 c4        	beqz	s1, 0x200406c6 <.LBB0_2>
;     memset(ptr, 0, bytes);
200406ba: 5b 85 a4 fe  	cmove	ca0, cs1
200406be: 81 45        	mv	a1, zero
200406c0: 22 86        	mv	a2, s0
200406c2: ef 00 30 0f  	cjal	0x20040fb4 <memset(void*, int, unsigned int)>

200406c6 <.LBB0_2>:
; 	return ptr;
200406c6: 5b 85 a4 fe  	cmove	ca0, cs1
200406ca: a2 64        	clc	cs1, 8(csp)
200406cc: 42 64        	clc	cs0, 16(csp)
200406ce: e2 60        	clc	cra, 24(csp)
200406d0: 05 61        	cincoffset	csp, csp, 32
200406d2: 82 80        	cret

200406d4 <strtol(char const*, char**, int)>:
; {
200406d4: 5d 71        	cincoffset	csp, csp, -80
200406d6: 86 e4        	csc	cra, 72(csp)
200406d8: a2 e0        	csc	cs0, 64(csp)
200406da: 26 fc        	csc	cs1, 56(csp)
200406dc: 32 d4        	csw	a2, 40(csp)
200406de: 2e e8        	csc	ca1, 16(csp)
200406e0: 5b 04 a5 fe  	cmove	cs0, ca0
200406e4: 2a e0        	csc	ca0, 0(csp)

200406e6 <.LBB0_1>:
200406e6: db 04 a4 fe  	cmove	cs1, cs0
; 		c = *s++;
200406ea: 03 45 04 00  	clbu	a0, 0(cs0)
200406ee: 5b 14 14 00  	cincoffset	cs0, cs0, 1
; 	} while (isspace(c));
200406f2: 85 45        	addi	a1, zero, 1
200406f4: 2a da        	csw	a0, 52(csp)
200406f6: fd 34        	cjal	0x200401e4 <isctype(int, int)>
200406f8: 7d f5        	bnez	a0, 0x200406e6 <.LBB0_1>
200406fa: db 85 a4 fe  	cmove	ca1, cs1
200406fe: 13 05 d0 02  	addi	a0, zero, 45
20040702: d2 57        	clw	a5, 52(csp)
; 	if (c == '-') {
20040704: 63 8c a7 00  	beq	a5, a0, 0x2004071c <.LBB0_5>
20040708: db 04 a4 fe  	cmove	cs1, cs0
2004070c: 13 05 b0 02  	addi	a0, zero, 43
20040710: 05 47        	addi	a4, zero, 1
20040712: 22 54        	clw	s0, 40(csp)
; 	if (c == '-') {
20040714: 63 9a a7 00  	bne	a5, a0, 0x20040728 <.LBB0_7>
20040718: 05 47        	addi	a4, zero, 1
2004071a: 19 a0        	j	0x20040720 <.LBB0_6>

2004071c <.LBB0_5>:
2004071c: 01 47        	mv	a4, zero
2004071e: 22 54        	clw	s0, 40(csp)

20040720 <.LBB0_6>:
20040720: 83 c7 15 00  	clbu	a5, 1(ca1)
20040724: db 94 25 00  	cincoffset	cs1, ca1, 2

20040728 <.LBB0_7>:
; 	if ((base == 0 || base == 16) &&
20040728: 13 75 f4 fe  	andi	a0, s0, -17
2004072c: 93 35 15 00  	seqz	a1, a0
20040730: 13 85 07 fd  	addi	a0, a5, -48
20040734: 13 35 15 00  	seqz	a0, a0
20040738: e9 8d        	and	a1, a1, a0
2004073a: 91 c9        	beqz	a1, 0x2004074e <.LBB0_9>
; 	    c == '0' && (*s == 'x' || *s == 'X')) {
2004073c: 83 c5 04 00  	clbu	a1, 0(cs1)
20040740: 13 e6 05 02  	ori	a2, a1, 32
20040744: 93 06 80 07  	addi	a3, zero, 120
20040748: c1 45        	addi	a1, zero, 16
2004074a: 63 01 d6 02  	beq	a2, a3, 0x2004076c <.LBB0_11>

2004074e <.LBB0_9>:
; 	} else if ((base == 0 || base == 2) &&
2004074e: 93 75 d4 ff  	andi	a1, s0, -3
20040752: 93 b5 15 00  	seqz	a1, a1
20040756: 6d 8d        	and	a0, a0, a1
20040758: 19 cd        	beqz	a0, 0x20040776 <.LBB0_12>
; 	    c == '0' && (*s == 'b' || *s == 'B')) {
2004075a: 03 c5 04 00  	clbu	a0, 0(cs1)
2004075e: 13 65 05 02  	ori	a0, a0, 32
20040762: 13 06 20 06  	addi	a2, zero, 98
20040766: 89 45        	addi	a1, zero, 2
20040768: 63 10 c5 02  	bne	a0, a2, 0x20040788 <.LBB0_14>

2004076c <.LBB0_11>:
2004076c: 83 c7 14 00  	clbu	a5, 1(cs1)
20040770: db 94 24 00  	cincoffset	cs1, cs1, 2
20040774: 2e 84        	mv	s0, a1

20040776 <.LBB0_12>:
20040776: 93 05 00 03  	addi	a1, zero, 48
; 	if (base == 0)
2004077a: 13 35 14 00  	seqz	a0, s0
2004077e: 63 87 b7 00  	beq	a5, a1, 0x2004078c <.LBB0_15>
20040782: a9 45        	addi	a1, zero, 10
20040784: 2e d2        	csw	a1, 36(csp)
20040786: 39 a0        	j	0x20040794 <.LBB0_16>

20040788 <.LBB0_14>:
; 	if (base == 0)
20040788: 13 35 14 00  	seqz	a0, s0

2004078c <.LBB0_15>:
2004078c: a1 45        	addi	a1, zero, 8
2004078e: 2e d2        	csw	a1, 36(csp)
20040790: 93 07 00 03  	addi	a5, zero, 48

20040794 <.LBB0_16>:
20040794: 26 f4        	csc	cs1, 40(csp)
; 	if (base == 0)
20040796: 11 e1        	bnez	a0, 0x2004079a <.LBB0_18>
20040798: 22 d2        	csw	s0, 36(csp)

2004079a <.LBB0_18>:
2004079a: 81 44        	mv	s1, zero
2004079c: 02 da        	csw	zero, 52(csp)
2004079e: 37 05 00 80  	lui	a0, 524288
200407a2: 3a c6        	csw	a4, 12(csp)
; 	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
200407a4: b3 05 e5 40  	sub	a1, a0, a4
200407a8: 12 55        	clw	a0, 36(csp)
; 	cutoff /= (unsigned long)base;
200407aa: 33 d6 a5 02  	divu	a2, a1, a0
200407ae: 32 d0        	csw	a2, 32(csp)
200407b0: 33 05 a6 02  	mul	a0, a2, a0
200407b4: 2e c4        	csw	a1, 8(csp)
200407b6: 33 85 a5 40  	sub	a0, a1, a0
200407ba: 2a ce        	csw	a0, 28(csp)

200407bc <.LBB0_19>:
; 		if (isdigit(c))
200407bc: a1 45        	addi	a1, zero, 8
200407be: 3e 85        	mv	a0, a5
200407c0: 3e 84        	mv	s0, a5
200407c2: 0d 34        	cjal	0x200401e4 <isctype(int, int)>
200407c4: 01 c5        	beqz	a0, 0x200407cc <.LBB0_21>
; 			c -= '0';
200407c6: 13 05 04 fd  	addi	a0, s0, -48
200407ca: 05 a0        	j	0x200407ea <.LBB0_25>

200407cc <.LBB0_21>:
; 		else if (isalpha(c))
200407cc: 93 05 00 04  	addi	a1, zero, 64
200407d0: 22 85        	mv	a0, s0
200407d2: 09 3c        	cjal	0x200401e4 <isctype(int, int)>
200407d4: 2d c1        	beqz	a0, 0x20040836 <.LBB0_31>
; 			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
200407d6: 91 45        	addi	a1, zero, 4
200407d8: 22 85        	mv	a0, s0
200407da: 29 34        	cjal	0x200401e4 <isctype(int, int)>
200407dc: 93 05 90 fa  	addi	a1, zero, -87
; 			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
200407e0: 19 c1        	beqz	a0, 0x200407e6 <.LBB0_24>
200407e2: 93 05 90 fc  	addi	a1, zero, -55

200407e6 <.LBB0_24>:
; 			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
200407e6: 33 85 85 00  	add	a0, a1, s0

200407ea <.LBB0_25>:
; 		if (c >= base)
200407ea: 92 55        	clw	a1, 36(csp)
200407ec: 63 55 b5 04  	bge	a0, a1, 0x20040836 <.LBB0_31>
; 		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
200407f0: d2 55        	clw	a1, 52(csp)
200407f2: 93 a5 05 00  	slti	a1, a1, 0
200407f6: 02 57        	clw	a4, 32(csp)
200407f8: 33 36 97 00  	sltu	a2, a4, s1
200407fc: d1 8d        	or	a1, a1, a2
200407fe: fd 56        	addi	a3, zero, -1
20040800: 99 c1        	beqz	a1, 0x20040806 <.LBB0_28>
20040802: a6 85        	mv	a1, s1
20040804: 05 a0        	j	0x20040824 <.LBB0_30>

20040806 <.LBB0_28>:
; 		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
20040806: b3 c5 e4 00  	xor	a1, s1, a4
2004080a: 93 b5 15 00  	seqz	a1, a1
2004080e: 72 46        	clw	a2, 28(csp)
20040810: 33 26 a6 00  	slt	a2, a2, a0
20040814: 6d 8e        	and	a2, a2, a1
20040816: ba 85        	mv	a1, a4
20040818: 11 e6        	bnez	a2, 0x20040824 <.LBB0_30>
; 			acc *= base;
2004081a: 92 55        	clw	a1, 36(csp)
2004081c: b3 85 b4 02  	mul	a1, s1, a1
; 			acc += c;
20040820: aa 95        	add	a1, a1, a0
20040822: 85 46        	addi	a3, zero, 1

20040824 <.LBB0_30>:
20040824: 36 da        	csw	a3, 52(csp)
20040826: 22 75        	clc	ca0, 40(csp)
; 	for (acc = 0, any = 0;; c = *s++) {
20040828: 83 47 05 00  	clbu	a5, 0(ca0)
2004082c: 5b 15 15 00  	cincoffset	ca0, ca0, 1
20040830: 2a f4        	csc	ca0, 40(csp)
20040832: ae 84        	mv	s1, a1
20040834: 61 b7        	j	0x200407bc <.LBB0_19>

20040836 <.LBB0_31>:
20040836: 42 65        	clc	ca0, 16(csp)
20040838: 32 44        	clw	s0, 12(csp)
; 	if (endptr != 0)
2004083a: 01 c9        	beqz	a0, 0x2004084a <.LBB0_35>
2004083c: 82 65        	clc	ca1, 0(csp)
; 		*endptr = (char *)(any ? s - 1 : nptr);
2004083e: 52 56        	clw	a2, 52(csp)
20040840: 01 c6        	beqz	a2, 0x20040848 <.LBB0_34>
20040842: a2 75        	clc	ca1, 40(csp)
20040844: db 95 f5 ff  	cincoffset	ca1, ca1, -1

20040848 <.LBB0_34>:
; 		*endptr = (char *)(any ? s - 1 : nptr);
20040848: 0c e1        	csc	ca1, 0(ca0)

2004084a <.LBB0_35>:
; 	if (any < 0) {
2004084a: 19 e0        	bnez	s0, 0x20040850 <.LBB0_37>
2004084c: b3 04 90 40  	neg	s1, s1

20040850 <.LBB0_37>:
20040850: 22 45        	clw	a0, 8(csp)
20040852: d2 55        	clw	a1, 52(csp)
; 	if (any < 0) {
20040854: 63 c3 05 00  	bltz	a1, 0x2004085a <.LBB0_39>
20040858: 26 85        	mv	a0, s1

2004085a <.LBB0_39>:
; 	return (acc);
2004085a: e2 74        	clc	cs1, 56(csp)
2004085c: 06 64        	clc	cs0, 64(csp)
2004085e: a6 60        	clc	cra, 72(csp)
20040860: 61 61        	cincoffset	csp, csp, 80
20040862: 82 80        	cret

20040864 <pvsprintf(char*, char const*, void*)>:
; {
20040864: 59 71        	cincoffset	csp, csp, -112
20040866: 86 f4        	csc	cra, 104(csp)
20040868: a2 f0        	csc	cs0, 96(csp)
2004086a: a6 ec        	csc	cs1, 88(csp)
2004086c: b2 e4        	csc	ca2, 72(csp)
2004086e: db 02 a5 fe  	cmove	ct0, ca0
20040872: 01 46        	mv	a2, zero
20040874: 81 40        	mv	ra, zero
20040876: 81 44        	mv	s1, zero
20040878: 81 46        	mv	a3, zero
2004087a: 02 d6        	csw	zero, 44(csp)
2004087c: 0d 43        	addi	t1, zero, 3
2004087e: 5b 97 81 f3  	cincoffset	ca4, cgp, -200
20040882: 5b 27 17 01  	csetbounds	ca4, ca4, 17
20040886: 3a f0        	csc	ca4, 32(csp)
20040888: 5b 17 f7 00  	cincoffset	ca4, ca4, 15
2004088c: 3a e4        	csc	ca4, 8(csp)

2004088e <.LBB0_58>:
2004088e: 17 17 00 00  	auipcc	ca4, 1
20040892: 5b 17 47 70  	cincoffset	ca4, ca4, 1796
20040896: 5b 27 07 02  	csetbounds	ca4, ca4, 32
2004089a: 3a ec        	csc	ca4, 24(csp)
2004089c: 2a e0        	csc	ca0, 0(csp)
2004089e: 5b 87 a5 fe  	cmove	ca4, ca1

200408a2 <.LBB0_1>:
; 	while((cval=*format++)) {
200408a2: 03 45 07 00  	clbu	a0, 0(ca4)
200408a6: 63 03 05 30  	beqz	a0, 0x20040bac <.LBB0_53>
200408aa: db 13 17 00  	cincoffset	ct2, ca4, 1
; 		switch(state) {
200408ae: 25 c6        	beqz	a2, 0x20040916 <.LBB0_13>
200408b0: 63 01 66 06  	beq	a2, t1, 0x20040912 <.LBB0_12>
200408b4: 89 47        	addi	a5, zero, 2
200408b6: 63 00 f6 08  	beq	a2, a5, 0x20040936 <.LBB0_15>
;                 for(x=0;x<fmt_cnt;x++) { *lptr++ = *pfmt++; }
200408ba: 63 43 90 00  	bgtz	s1, 0x200408c0 <.LBB0_7>
200408be: 81 44        	mv	s1, zero

200408c0 <.LBB0_7>:
200408c0: db 87 a5 fe  	cmove	ca5, ca1
;                 for(x=0;x<fmt_cnt;x++) { *lptr++ = *pfmt++; }
200408c4: 99 c8        	beqz	s1, 0x200408da <.LBB0_9>

200408c6 <.LBB0_8>:
200408c6: 83 85 07 00  	clb	a1, 0(ca5)
200408ca: db 97 17 00  	cincoffset	ca5, ca5, 1
200408ce: 23 80 b2 00  	csb	a1, 0(ct0)
200408d2: db 92 12 00  	cincoffset	ct0, ct0, 1
200408d6: fd 14        	addi	s1, s1, -1
200408d8: fd f4        	bnez	s1, 0x200408c6 <.LBB0_8>

200408da <.LBB0_9>:
200408da: 01 46        	mv	a2, zero
200408dc: 85 44        	addi	s1, zero, 1
200408de: db 05 a7 fe  	cmove	ca1, ca4
200408e2: 81 40        	mv	ra, zero
200408e4: 81 46        	mv	a3, zero
200408e6: 02 d6        	csw	zero, 44(csp)
200408e8: 5b 87 a3 fe  	cmove	ca4, ct2
; 				if(cval == '%') {
200408ec: 13 04 50 02  	addi	s0, zero, 37
200408f0: e3 09 85 fa  	beq	a0, s0, 0x200408a2 <.LBB0_1>
200408f4: 93 05 30 02  	addi	a1, zero, 35
200408f8: 63 19 b5 02  	bne	a0, a1, 0x2004092a <.LBB0_14>
200408fc: 81 40        	mv	ra, zero
200408fe: 81 44        	mv	s1, zero
20040900: 81 46        	mv	a3, zero
20040902: 05 45        	addi	a0, zero, 1
20040904: 2a d6        	csw	a0, 44(csp)
20040906: 09 46        	addi	a2, zero, 2
20040908: db 85 a7 fe  	cmove	ca1, ca5
2004090c: 5b 87 a3 fe  	cmove	ca4, ct2
20040910: 49 bf        	j	0x200408a2 <.LBB0_1>

20040912 <.LBB0_12>:
20040912: 36 84        	mv	s0, a3
20040914: 15 a8        	j	0x20040948 <.LBB0_16>

20040916 <.LBB0_13>:
; 				if(cval == '%') {
20040916: 13 05 b5 fd  	addi	a0, a0, -37
2004091a: 13 36 15 00  	seqz	a2, a0
2004091e: 33 35 a0 00  	snez	a0, a0
20040922: aa 94        	add	s1, s1, a0
20040924: 5b 87 a3 fe  	cmove	ca4, ct2
20040928: ad bf        	j	0x200408a2 <.LBB0_1>

2004092a <.LBB0_14>:
2004092a: db 85 a7 fe  	cmove	ca1, ca5
2004092e: b2 80        	mv	ra, a2
20040930: b2 84        	mv	s1, a2
20040932: b2 86        	mv	a3, a2
20040934: 32 d6        	csw	a2, 44(csp)

20040936 <.LBB0_15>:
20040936: 36 84        	mv	s0, a3
20040938: 85 46        	addi	a3, zero, 1
2004093a: 0d 46        	addi	a2, zero, 3
2004093c: 5b 87 a3 fe  	cmove	ca4, ct2
; 				if(cval == '0') {
20040940: 93 07 00 03  	addi	a5, zero, 48
20040944: e3 0f f5 f4  	beq	a0, a5, 0x200408a2 <.LBB0_1>

20040948 <.LBB0_16>:
; 				switch(cval) {
20040948: 13 06 80 05  	addi	a2, zero, 88
2004094c: a6 66        	clc	ca3, 72(csp)
2004094e: 63 07 c5 04  	beq	a0, a2, 0x2004099c <.LBB0_25>
20040952: 13 06 30 06  	addi	a2, zero, 99
20040956: 63 00 c5 18  	beq	a0, a2, 0x20040ad6 <.LBB0_43>
2004095a: 13 06 40 06  	addi	a2, zero, 100
2004095e: 63 02 c5 02  	beq	a0, a2, 0x20040982 <.LBB0_23>
20040962: 13 06 90 06  	addi	a2, zero, 105
20040966: 63 0e c5 00  	beq	a0, a2, 0x20040982 <.LBB0_23>
2004096a: 13 06 30 07  	addi	a2, zero, 115
2004096e: 63 08 c5 1a  	beq	a0, a2, 0x20040b1e <.LBB0_44>
20040972: 13 06 80 07  	addi	a2, zero, 120
20040976: 63 03 c5 02  	beq	a0, a2, 0x2004099c <.LBB0_25>
2004097a: 13 06 50 07  	addi	a2, zero, 117
2004097e: 63 16 c5 20  	bne	a0, a2, 0x20040b8a <.LBB0_50>

20040982 <.LBB0_23>:
; 						d = va_arg(ap, int);
20040982: 90 42        	clw	a2, 0(ca3)
; 	if(sign != 0 && value < 0) {
20040984: 13 05 b5 f8  	addi	a0, a0, -117
20040988: 33 35 a0 00  	snez	a0, a0
2004098c: 93 25 06 00  	slti	a1, a2, 0
20040990: 6d 8d        	and	a0, a0, a1
20040992: a6 c2        	csw	s1, 68(csp)
20040994: a2 ca        	csw	s0, 84(csp)
20040996: 51 e9        	bnez	a0, 0x20040a2a <.LBB0_32>
20040998: b2 85        	mv	a1, a2
2004099a: 51 a8        	j	0x20040a2e <.LBB0_33>

2004099c <.LBB0_25>:
2004099c: a2 ca        	csw	s0, 84(csp)
2004099e: a6 c2        	csw	s1, 68(csp)
; 						u = va_arg(ap, uint32_t);
200409a0: db 95 46 00  	cincoffset	ca1, ca3, 4
200409a4: 2e e8        	csc	ca1, 16(csp)
200409a6: 8c 42        	clw	a1, 0(ca3)
; 						s = int2ascihex(u, (cval=='X'?16:0),&count);
200409a8: 13 05 85 fa  	addi	a0, a0, -88
200409ac: 13 35 15 00  	seqz	a0, a0
200409b0: 12 05        	slli	a0, a0, 4
; 	*ptr-- = '\0';
200409b2: 02 76        	clc	ca2, 32(csp)
200409b4: 23 08 06 00  	csb	zero, 16(ca2)
200409b8: 05 44        	addi	s0, zero, 1
200409ba: a2 64        	clc	cs1, 8(csp)
200409bc: e2 66        	clc	ca3, 24(csp)
200409be: 41 47        	addi	a4, zero, 16
200409c0: 1e f8        	csc	ct2, 48(csp)

200409c2 <.LBB0_26>:
; 		*ptr = HexTable[(value&0xf)+ulcase];
200409c2: 13 f6 f5 00  	andi	a2, a1, 15
200409c6: 49 8e        	or	a2, a2, a0
200409c8: 5b 86 c6 22  	cincoffset	ca2, ca3, a2
200409cc: 03 06 06 00  	clb	a2, 0(ca2)
200409d0: 23 80 c4 00  	csb	a2, 0(cs1)
; 		if(value == 0) break;
200409d4: 63 e9 e5 00  	bltu	a1, a4, 0x200409e6 <.LBB0_29>
; 		value =(value>>4) &0x0fffffff;	
200409d8: 91 81        	srli	a1, a1, 4
; 	} while(ptr > str);
200409da: 05 04        	addi	s0, s0, 1
; 		ptr--;
200409dc: db 94 f4 ff  	cincoffset	cs1, cs1, -1
; 	} while(ptr > str);
200409e0: e3 11 e4 fe  	bne	s0, a4, 0x200409c2 <.LBB0_26>
200409e4: 3d 44        	addi	s0, zero, 15

200409e6 <.LBB0_29>:
; 						lptr += write_char_cnt(lptr, size, count, hex_str, lead_zero);
200409e6: 5b 85 a2 fe  	cmove	ca0, ct0
200409ea: 86 c0        	csw	ra, 64(csp)
200409ec: 86 85        	mv	a1, ra
200409ee: 22 86        	mv	a2, s0
200409f0: b2 56        	clw	a3, 44(csp)
200409f2: 56 47        	clw	a4, 84(csp)
200409f4: 16 fc        	csc	ct0, 56(csp)
200409f6: dd 22        	cjal	0x20040bdc <write_char_cnt(char*, int, int, int, int)>
200409f8: e2 72        	clc	ct0, 56(csp)
; 						lptr += write_char_cnt(lptr, size, count, hex_str, lead_zero);
200409fa: db 82 a2 22  	cincoffset	ct0, ct0, a0
200409fe: 0d 43        	addi	t1, zero, 3
20040a00: 42 77        	clc	ca4, 48(csp)
;                         for(x=0;x<count;x++) { *lptr++ = *s++; }
20040a02: 19 c8        	beqz	s0, 0x20040a18 <.LBB0_31>

20040a04 <.LBB0_30>:
20040a04: 03 85 04 00  	clb	a0, 0(cs1)
20040a08: db 94 14 00  	cincoffset	cs1, cs1, 1
20040a0c: 23 80 a2 00  	csb	a0, 0(ct0)
20040a10: db 92 12 00  	cincoffset	ct0, ct0, 1
20040a14: 7d 14        	addi	s0, s0, -1
20040a16: 7d f4        	bnez	s0, 0x20040a04 <.LBB0_30>

20040a18 <.LBB0_31>:
20040a18: 01 46        	mv	a2, zero
20040a1a: db 05 a7 fe  	cmove	ca1, ca4
20040a1e: 42 65        	clc	ca0, 16(csp)
20040a20: aa e4        	csc	ca0, 72(csp)
20040a22: d6 46        	clw	a3, 84(csp)
20040a24: 96 44        	clw	s1, 68(csp)
20040a26: 86 40        	clw	ra, 64(csp)
20040a28: ad bd        	j	0x200408a2 <.LBB0_1>

20040a2a <.LBB0_32>:
20040a2a: b3 05 c0 40  	neg	a1, a2

20040a2e <.LBB0_33>:
20040a2e: 62 67        	clc	ca4, 24(csp)
20040a30: 41 43        	addi	t1, zero, 16
20040a32: 29 44        	addi	s0, zero, 10
20040a34: cd 47        	addi	a5, zero, 19
20040a36: db 96 46 00  	cincoffset	ca3, ca3, 4
20040a3a: b6 e4        	csc	ca3, 72(csp)
20040a3c: 13 55 f6 01  	srli	a0, a2, 31
20040a40: 02 76        	clc	ca2, 32(csp)
; 	*ptr-- = '\0';
20040a42: 23 08 06 00  	csb	zero, 16(ca2)
20040a46: db 14 f6 00  	cincoffset	cs1, ca2, 15

20040a4a <.LBB0_34>:
20040a4a: 2e 86        	mv	a2, a1
; 		lvalue = lvalue/10;	
20040a4c: b3 c5 85 02  	div	a1, a1, s0
20040a50: b3 86 85 02  	mul	a3, a1, s0
20040a54: b3 06 d6 40  	sub	a3, a2, a3
; 		*ptr = HexTable[lvalue%10];
20040a58: db 06 d7 22  	cincoffset	ca3, ca4, a3
20040a5c: 83 86 06 00  	clb	a3, 0(ca3)
; 		if(lvalue == 0) break;
20040a60: 25 06        	addi	a2, a2, 9
; 		*ptr = HexTable[lvalue%10];
20040a62: 23 80 d4 00  	csb	a3, 0(cs1)
; 		if(lvalue == 0) break;
20040a66: 63 6a f6 00  	bltu	a2, a5, 0x20040a7a <.LBB0_36>
; 		ptr--;
20040a6a: db 94 f4 ff  	cincoffset	cs1, cs1, -1
; 	} while(ptr >  str);
20040a6e: 5b 96 81 f3  	cincoffset	ca2, cgp, -200
20040a72: 5b 26 16 01  	csetbounds	ca2, ca2, 17
20040a76: e3 6a 96 fc  	bltu	a2, s1, 0x20040a4a <.LBB0_34>

20040a7a <.LBB0_36>:
; 	if(value < 0) {
20040a7a: 1e f8        	csc	ct2, 48(csp)
20040a7c: 09 c9        	beqz	a0, 0x20040a8e <.LBB0_38>
; 		ptr--;
20040a7e: 5b 95 f4 ff  	cincoffset	ca0, cs1, -1
; 		*ptr = '-';
20040a82: 93 05 d0 02  	addi	a1, zero, 45
20040a86: a3 8f b4 fe  	csb	a1, -1(cs1)
20040a8a: db 04 a5 fe  	cmove	cs1, ca0

20040a8e <.LBB0_38>:
; 	*count = 16-(ptr-str);
20040a8e: 02 75        	clc	ca0, 32(csp)
20040a90: 5b 85 a4 28  	csub	a0, cs1, ca0
20040a94: 33 04 a3 40  	sub	s0, t1, a0
; 						lptr += write_char_cnt(lptr, size, count, 0, lead_zero);
20040a98: 5b 85 a2 fe  	cmove	ca0, ct0
20040a9c: 86 c0        	csw	ra, 64(csp)
20040a9e: 86 85        	mv	a1, ra
20040aa0: 22 86        	mv	a2, s0
20040aa2: 81 46        	mv	a3, zero
20040aa4: 56 47        	clw	a4, 84(csp)
20040aa6: 16 fc        	csc	ct0, 56(csp)
20040aa8: 15 2a        	cjal	0x20040bdc <write_char_cnt(char*, int, int, int, int)>
;                         for(x=0;x<count;x++) { *lptr++ = *s++; }
20040aaa: 63 43 80 00  	bgtz	s0, 0x20040ab0 <.LBB0_40>
20040aae: 01 44        	mv	s0, zero

20040ab0 <.LBB0_40>:
20040ab0: e2 72        	clc	ct0, 56(csp)
20040ab2: db 82 a2 22  	cincoffset	ct0, ct0, a0
20040ab6: 0d 43        	addi	t1, zero, 3
20040ab8: 42 77        	clc	ca4, 48(csp)
20040aba: 86 40        	clw	ra, 64(csp)
;                         for(x=0;x<count;x++) { *lptr++ = *s++; }
20040abc: 19 c8        	beqz	s0, 0x20040ad2 <.LBB0_42>

20040abe <.LBB0_41>:
20040abe: 03 85 04 00  	clb	a0, 0(cs1)
20040ac2: db 94 14 00  	cincoffset	cs1, cs1, 1
20040ac6: 23 80 a2 00  	csb	a0, 0(ct0)
20040aca: db 92 12 00  	cincoffset	ct0, ct0, 1
20040ace: 7d 14        	addi	s0, s0, -1
20040ad0: 7d f4        	bnez	s0, 0x20040abe <.LBB0_41>

20040ad2 <.LBB0_42>:
20040ad2: 01 46        	mv	a2, zero
20040ad4: 75 a0        	j	0x20040b80 <.LBB0_49>

20040ad6 <.LBB0_43>:
; 						c = (char) va_arg(ap, int);
20040ad6: 88 42        	clw	a0, 0(ca3)
20040ad8: aa c0        	csw	a0, 64(csp)
20040ada: a6 c2        	csw	s1, 68(csp)
; 						c = (char) va_arg(ap, int);
20040adc: 5b 95 46 00  	cincoffset	ca0, ca3, 4
; 						lptr += write_char_cnt(lptr, size, 1, 0, 0);
20040ae0: aa e4        	csc	ca0, 72(csp)
20040ae2: 05 46        	addi	a2, zero, 1
20040ae4: 5b 85 a2 fe  	cmove	ca0, ct0
20040ae8: 86 85        	mv	a1, ra
20040aea: 81 46        	mv	a3, zero
20040aec: 01 47        	mv	a4, zero
20040aee: 16 fc        	csc	ct0, 56(csp)
20040af0: a2 ca        	csw	s0, 84(csp)
20040af2: 5b 84 a3 fe  	cmove	cs0, ct2
20040af6: 86 84        	mv	s1, ra
; 						lptr += write_char_cnt(lptr, size, 1, 0, 0);
20040af8: d5 20        	cjal	0x20040bdc <write_char_cnt(char*, int, int, int, int)>
20040afa: a6 80        	mv	ra, s1
20040afc: 0d 43        	addi	t1, zero, 3
20040afe: 01 46        	mv	a2, zero
; 						lptr += write_char_cnt(lptr, size, 1, 0, 0);
20040b00: e2 75        	clc	ca1, 56(csp)
20040b02: 5b 85 a5 22  	cincoffset	ca0, ca1, a0
;                         *lptr++ = c;
20040b06: 86 45        	clw	a1, 64(csp)
20040b08: 23 00 b5 00  	csb	a1, 0(ca0)
20040b0c: db 12 15 00  	cincoffset	ct0, ca0, 1
20040b10: db 05 a4 fe  	cmove	ca1, cs0
20040b14: 96 44        	clw	s1, 68(csp)
20040b16: d6 46        	clw	a3, 84(csp)
20040b18: 5b 07 a4 fe  	cmove	ca4, cs0
20040b1c: 59 b3        	j	0x200408a2 <.LBB0_1>

20040b1e <.LBB0_44>:
20040b1e: a2 ca        	csw	s0, 84(csp)
20040b20: 1e f8        	csc	ct2, 48(csp)
20040b22: a6 c2        	csw	s1, 68(csp)
; 						s = va_arg(ap, char *);
20040b24: 5b 85 f6 fe  	cgetaddr	a0, ca3
20040b28: 1d 05        	addi	a0, a0, 7
20040b2a: 61 99        	andi	a0, a0, -8
20040b2c: 5b 85 a6 20  	csetaddr	ca0, ca3, a0
20040b30: aa e4        	csc	ca0, 72(csp)
20040b32: 08 61        	clc	ca0, 0(ca0)
20040b34: 2a fc        	csc	ca0, 56(csp)
20040b36: db 84 a2 fe  	cmove	cs1, ct0
20040b3a: 86 c0        	csw	ra, 64(csp)
; 						count = (int)strlen(s);
20040b3c: 05 2e        	cjal	0x20040e6c <strlen(char const*)>
20040b3e: 2a 84        	mv	s0, a0
; 						lptr += write_char_cnt(lptr, size, count, 0, 0);
20040b40: 5b 85 a4 fe  	cmove	ca0, cs1
20040b44: 86 45        	clw	a1, 64(csp)
20040b46: 22 86        	mv	a2, s0
20040b48: 81 46        	mv	a3, zero
20040b4a: 01 47        	mv	a4, zero
20040b4c: 41 28        	cjal	0x20040bdc <write_char_cnt(char*, int, int, int, int)>
;                         for(x=0;x<count;x++) { *lptr++ = *s++; }
20040b4e: 63 43 80 00  	bgtz	s0, 0x20040b54 <.LBB0_46>
20040b52: 01 44        	mv	s0, zero

20040b54 <.LBB0_46>:
20040b54: db 82 a4 22  	cincoffset	ct0, cs1, a0
20040b58: 0d 43        	addi	t1, zero, 3
20040b5a: 42 77        	clc	ca4, 48(csp)
20040b5c: 86 40        	clw	ra, 64(csp)
20040b5e: e2 75        	clc	ca1, 56(csp)
;                         for(x=0;x<count;x++) { *lptr++ = *s++; }
20040b60: 19 c8        	beqz	s0, 0x20040b76 <.LBB0_48>

20040b62 <.LBB0_47>:
20040b62: 03 85 05 00  	clb	a0, 0(ca1)
20040b66: db 95 15 00  	cincoffset	ca1, ca1, 1
20040b6a: 23 80 a2 00  	csb	a0, 0(ct0)
20040b6e: db 92 12 00  	cincoffset	ct0, ct0, 1
20040b72: 7d 14        	addi	s0, s0, -1
20040b74: 7d f4        	bnez	s0, 0x20040b62 <.LBB0_47>

20040b76 <.LBB0_48>:
20040b76: 01 46        	mv	a2, zero
; 						s = va_arg(ap, char *);
20040b78: 26 65        	clc	ca0, 72(csp)
20040b7a: 5b 15 85 00  	cincoffset	ca0, ca0, 8
20040b7e: aa e4        	csc	ca0, 72(csp)

20040b80 <.LBB0_49>:
20040b80: db 05 a7 fe  	cmove	ca1, ca4
20040b84: d6 46        	clw	a3, 84(csp)
20040b86: 96 44        	clw	s1, 68(csp)
20040b88: 29 bb        	j	0x200408a2 <.LBB0_1>

20040b8a <.LBB0_50>:
; 						if(cval >= 0x30 && cval < 0x3a) {
20040b8a: 13 06 05 fd  	addi	a2, a0, -48
20040b8e: 13 76 f6 0f  	andi	a2, a2, 255
20040b92: a9 46        	addi	a3, zero, 10
20040b94: 63 77 d6 00  	bgeu	a2, a3, 0x20040ba2 <.LBB0_52>
20040b98: 33 86 d0 02  	mul	a2, ra, a3
20040b9c: 32 95        	add	a0, a0, a2
20040b9e: 93 00 05 fd  	addi	ra, a0, -48

20040ba2 <.LBB0_52>:
20040ba2: 0d 46        	addi	a2, zero, 3
20040ba4: a2 86        	mv	a3, s0
20040ba6: 5b 87 a3 fe  	cmove	ca4, ct2
20040baa: e5 b9        	j	0x200408a2 <.LBB0_1>

20040bac <.LBB0_53>:
;     for(x=0;x<fmt_cnt;x++) { *lptr++ = *pfmt++; }
20040bac: 63 4d 90 00  	bgtz	s1, 0x20040bc6 <.LBB0_56>
20040bb0: 81 44        	mv	s1, zero
20040bb2: 11 a8        	j	0x20040bc6 <.LBB0_56>

20040bb4 <.LBB0_55>:
;     for(x=0;x<fmt_cnt;x++) { *lptr++ = *pfmt++; }
20040bb4: 03 85 05 00  	clb	a0, 0(ca1)
20040bb8: db 95 15 00  	cincoffset	ca1, ca1, 1
20040bbc: 23 80 a2 00  	csb	a0, 0(ct0)
20040bc0: db 92 12 00  	cincoffset	ct0, ct0, 1
20040bc4: fd 14        	addi	s1, s1, -1

20040bc6 <.LBB0_56>:
20040bc6: fd f4        	bnez	s1, 0x20040bb4 <.LBB0_55>
;     return( (int)(lptr-line));
20040bc8: 02 65        	clc	ca0, 0(csp)
20040bca: 5b 85 a2 28  	csub	a0, ct0, ca0
;     *lptr = '\0';
20040bce: 23 80 02 00  	csb	zero, 0(ct0)
;     return( (int)(lptr-line));
20040bd2: e6 64        	clc	cs1, 88(csp)
20040bd4: 06 74        	clc	cs0, 96(csp)
20040bd6: a6 70        	clc	cra, 104(csp)
20040bd8: 65 61        	cincoffset	csp, csp, 112
20040bda: 82 80        	cret

20040bdc <write_char_cnt(char*, int, int, int, int)>:
; {
20040bdc: 7d 71        	cincoffset	csp, csp, -16
20040bde: 22 e4        	csc	cs0, 8(csp)
; 	char c = (lead_zero != 0) ? '0' : ' ';
20040be0: 33 33 e0 00  	snez	t1, a4
20040be4: 93 07 00 03  	addi	a5, zero, 48
20040be8: 19 e3        	bnez	a4, 0x20040bee <.LBB1_2>
20040bea: 93 07 00 02  	addi	a5, zero, 32

20040bee <.LBB1_2>:
; 	if(hex_str != 0 && lead_zero != 0) {
20040bee: b3 32 d0 00  	snez	t0, a3
20040bf2: b3 f6 62 00  	and	a3, t0, t1
20040bf6: 99 ce        	beqz	a3, 0x20040c14 <.LBB1_4>
20040bf8: 93 06 00 03  	addi	a3, zero, 48
;         *str++ = '0';
20040bfc: 23 00 d5 00  	csb	a3, 0(ca0)
20040c00: 93 06 80 07  	addi	a3, zero, 120
;         *str++ = 'x';
20040c04: a3 00 d5 00  	csb	a3, 1(ca0)
20040c08: 5b 15 25 00  	cincoffset	ca0, ca0, 2
20040c0c: 09 43        	addi	t1, zero, 2
; 	if(leading > used) {
20040c0e: 63 46 b6 00  	blt	a2, a1, 0x20040c1a <.LBB1_5>
20040c12: 3d a0        	j	0x20040c40 <.LBB1_9>

20040c14 <.LBB1_4>:
20040c14: 01 43        	mv	t1, zero
; 	if(leading > used) {
20040c16: 63 55 b6 02  	bge	a2, a1, 0x20040c40 <.LBB1_9>

20040c1a <.LBB1_5>:
20040c1a: 81 46        	mv	a3, zero
; 		fill = leading-used;
20040c1c: 91 8d        	sub	a1, a1, a2
20040c1e: 93 03 d0 07  	addi	t2, zero, 125

20040c22 <.LBB1_6>:
; 		for(i=0;(i<fill)&&(i<126);i++) {
20040c22: 33 a6 b6 00  	slt	a2, a3, a1
20040c26: 13 46 16 00  	xori	a2, a2, 1
20040c2a: 33 b4 d3 00  	sltu	s0, t2, a3
20040c2e: 41 8e        	or	a2, a2, s0
20040c30: 19 e6        	bnez	a2, 0x20040c3e <.LBB1_8>
; 			*str++ = c;
20040c32: 23 00 f5 00  	csb	a5, 0(ca0)
20040c36: 5b 15 15 00  	cincoffset	ca0, ca0, 1
; 		for(i=0;(i<fill)&&(i<126);i++) {
20040c3a: 85 06        	addi	a3, a3, 1
20040c3c: dd b7        	j	0x20040c22 <.LBB1_6>

20040c3e <.LBB1_8>:
20040c3e: 36 93        	add	t1, t1, a3

20040c40 <.LBB1_9>:
20040c40: 93 35 17 00  	seqz	a1, a4
; 	if(hex_str != 0 && lead_zero == 0) {
20040c44: b3 f5 b2 00  	and	a1, t0, a1
20040c48: 91 c9        	beqz	a1, 0x20040c5c <.LBB1_11>
20040c4a: 93 05 00 03  	addi	a1, zero, 48
;         *str++ = '0';
20040c4e: 23 00 b5 00  	csb	a1, 0(ca0)
20040c52: 93 05 80 07  	addi	a1, zero, 120
;         *str++ = 'x';
20040c56: a3 00 b5 00  	csb	a1, 1(ca0)
;         cnt+=2;
20040c5a: 09 03        	addi	t1, t1, 2

20040c5c <.LBB1_11>:
; 	return cnt;
20040c5c: 1a 85        	mv	a0, t1
20040c5e: 22 64        	clc	cs0, 8(csp)
20040c60: 41 61        	cincoffset	csp, csp, 16
20040c62: 82 80        	cret

20040c64 <cfprintf(unsigned int**, char const*, ...)>:
; {
20040c64: 5b 11 01 b0  	cincoffset	csp, csp, -1280
20040c68: 23 3c 11 4e  	csc	cra, 1272(csp)
20040c6c: 23 38 81 4e  	csc	cs0, 1264(csp)
20040c70: 23 34 91 4e  	csc	cs1, 1256(csp)
20040c74: 5b 14 01 50  	cincoffset	cs0, csp, 1280
20040c78: 5b 06 f1 fe  	cgetaddr	a2, csp
20040c7c: 13 76 06 f8  	andi	a2, a2, -128
20040c80: 5b 01 c1 20  	csetaddr	csp, csp, a2
20040c84: b0 18        	cincoffset	ca2, csp, 120
20040c86: 5b 26 86 00  	csetbounds	ca2, ca2, 8
20040c8a: db 16 04 00  	cincoffset	ca3, cs0, 0
; 		va_start(ap, format);
20040c8e: 14 e2        	csc	ca3, 0(ca2)
; 		int c_cnt = pvsprintf(ptr, format, ap);
20040c90: 66 76        	clc	ca2, 120(csp)
20040c92: aa f4        	csc	ca0, 104(csp)
20040c94: 08 01        	cincoffset	ca0, csp, 128
20040c96: 5b 25 05 40  	csetbounds	ca0, ca0, 1024
; 		int c_cnt = pvsprintf(ptr, format, ap);
20040c9a: aa f8        	csc	ca0, 112(csp)
20040c9c: e1 36        	cjal	0x20040864 <pvsprintf(char*, char const*, void*)>
20040c9e: aa 84        	mv	s1, a0
; 		write((int)stream, line, c_cnt);
20040ca0: 26 75        	clc	ca0, 104(csp)
20040ca2: 5b 05 f5 fe  	cgetaddr	a0, ca0
20040ca6: c6 75        	clc	ca1, 112(csp)
20040ca8: 26 86        	mv	a2, s1
20040caa: ef 00 f0 11  	cjal	0x200415c8 <_write(int, char const*, int)>
; 		return c_cnt;
20040cae: 26 85        	mv	a0, s1
20040cb0: 5b 11 04 b0  	cincoffset	csp, cs0, -1280
20040cb4: 83 34 81 4e  	clc	cs1, 1256(csp)
20040cb8: 03 34 01 4f  	clc	cs0, 1264(csp)
20040cbc: 83 30 81 4f  	clc	cra, 1272(csp)
20040cc0: 5b 11 01 50  	cincoffset	csp, csp, 1280
20040cc4: 82 80        	cret

20040cc6 <pfprintf(unsigned int**, char const*, ...)>:
; {
20040cc6: 09 71        	cincoffset	csp, csp, -384
20040cc8: 86 fe        	csc	cra, 376(csp)
20040cca: a2 fa        	csc	cs0, 368(csp)
20040ccc: 00 03        	cincoffset	cs0, csp, 384
20040cce: 5b 05 f1 fe  	cgetaddr	a0, csp
20040cd2: 01 99        	andi	a0, a0, -32
20040cd4: 5b 01 a1 20  	csetaddr	csp, csp, a0
20040cd8: 13 05 00 05  	addi	a0, zero, 80
; 		*ptr++ = 'P';
20040cdc: 23 00 a1 02  	csb	a0, 32(csp)
20040ce0: 08 10        	cincoffset	ca0, csp, 32
20040ce2: 5b 25 05 14  	csetbounds	ca0, ca0, 320
20040ce6: 30 08        	cincoffset	ca2, csp, 24
20040ce8: 5b 26 86 00  	csetbounds	ca2, ca2, 8
20040cec: db 16 04 00  	cincoffset	ca3, cs0, 0
; 		va_start(ap, format);
20040cf0: 14 e2        	csc	ca3, 0(ca2)
; 		int c_cnt = pvsprintf(ptr, format, ap);
20040cf2: 62 66        	clc	ca2, 24(csp)
; 		*ptr++ = '0';  //hardcode to 0 for git psi_libc, cpu id is/was for print server
20040cf4: 5b 15 25 00  	cincoffset	ca0, ca0, 2
20040cf8: 93 06 00 03  	addi	a3, zero, 48
; 		*ptr++ = '0';  //hardcode to 0 for git psi_libc, cpu id is/was for print server
20040cfc: a3 00 d1 02  	csb	a3, 33(csp)
; 		int c_cnt = pvsprintf(ptr, format, ap);
20040d00: 95 36        	cjal	0x20040864 <pvsprintf(char*, char const*, void*)>
; 		return c_cnt;
20040d02: 5b 11 04 e8  	cincoffset	csp, cs0, -384
20040d06: 56 74        	clc	cs0, 368(csp)
20040d08: f6 70        	clc	cra, 376(csp)
20040d0a: 19 61        	cincoffset	csp, csp, 384
20040d0c: 82 80        	cret

20040d0e <psprintf(char*, char const*, ...)>:
; {
20040d0e: 7d 71        	cincoffset	csp, csp, -16
20040d10: 06 e4        	csc	cra, 8(csp)
20040d12: 5b 16 01 00  	cincoffset	ca2, csp, 0
20040d16: 5b 26 86 00  	csetbounds	ca2, ca2, 8
20040d1a: 14 08        	cincoffset	ca3, csp, 16
;     va_start(ap, format);
20040d1c: 14 e2        	csc	ca3, 0(ca2)
;     int c_cnt = pvsprintf(line, format, ap);
20040d1e: 02 66        	clc	ca2, 0(csp)
20040d20: 91 36        	cjal	0x20040864 <pvsprintf(char*, char const*, void*)>
;     return c_cnt;
20040d22: a2 60        	clc	cra, 8(csp)
20040d24: 41 61        	cincoffset	csp, csp, 16
20040d26: 82 80        	cret

20040d28 <print_test_header(char const*)>:
; {
20040d28: 3d 71        	cincoffset	csp, csp, -32
20040d2a: 06 ec        	csc	cra, 24(csp)
20040d2c: 22 e8        	csc	cs0, 16(csp)
20040d2e: 26 e4        	csc	cs1, 8(csp)
20040d30: 5b 04 a5 fe  	cmove	cs0, ca0

20040d34 <.LBB5_1>:
; 	pprintf("===================================================\n");
20040d34: 97 14 00 00  	auipcc	cs1, 1
20040d38: db 94 04 20  	cincoffset	cs1, cs1, 512
20040d3c: db a4 54 03  	csetbounds	cs1, cs1, 53
20040d40: db 85 a4 fe  	cmove	ca1, cs1
20040d44: 49 37        	cjal	0x20040cc6 <pfprintf(unsigned int**, char const*, ...)>

20040d46 <.LBB5_2>:
; 	pprintf(" Starting Test %s\n", test);
20040d46: 97 15 00 00  	auipcc	ca1, 1
20040d4a: db 95 95 23  	cincoffset	ca1, ca1, 569
20040d4e: db a5 35 01  	csetbounds	ca1, ca1, 19
20040d52: 22 e0        	csc	cs0, 0(csp)
20040d54: 8d 3f        	cjal	0x20040cc6 <pfprintf(unsigned int**, char const*, ...)>
; 	pprintf("===================================================\n");
20040d56: db 85 a4 fe  	cmove	ca1, cs1
20040d5a: a2 64        	clc	cs1, 8(csp)
20040d5c: 42 64        	clc	cs0, 16(csp)
20040d5e: e2 60        	clc	cra, 24(csp)
20040d60: 05 61        	cincoffset	csp, csp, 32
20040d62: 95 b7        	j	0x20040cc6 <pfprintf(unsigned int**, char const*, ...)>

20040d64 <print_array(unsigned int*, char const*, unsigned int)>:
; void print_array(uint32_t * arr, const char * str, uint32_t num) {
20040d64: 39 71        	cincoffset	csp, csp, -64
20040d66: 06 fc        	csc	cra, 56(csp)
20040d68: 22 f8        	csc	cs0, 48(csp)
20040d6a: 26 f4        	csc	cs1, 40(csp)
20040d6c: 32 d2        	csw	a2, 36(csp)
20040d6e: 2e ec        	csc	ca1, 24(csp)
20040d70: 2a e8        	csc	ca0, 16(csp)
20040d72: 81 44        	mv	s1, zero

20040d74 <.LBB6_4>:
20040d74: 17 14 00 00  	auipcc	cs0, 1
20040d78: 5b 14 54 1f  	cincoffset	cs0, cs0, 501
20040d7c: 5b 24 64 01  	csetbounds	cs0, cs0, 22

20040d80 <.LBB6_1>:
; 	for(i=0;i<num;i++) 
20040d80: 12 55        	clw	a0, 36(csp)
20040d82: 63 01 95 02  	beq	a0, s1, 0x20040da4 <.LBB6_3>
; 		pprintf("%s word %d is 0x%08x\n",str,i,hw_read32(arr+i));
20040d86: 13 95 24 00  	slli	a0, s1, 2
20040d8a: c2 65        	clc	ca1, 16(csp)
20040d8c: 5b 85 a5 22  	cincoffset	ca0, ca1, a0
; inline uint32_t hw_read32(volatile uint32_t* addr) { return *addr; }
20040d90: 08 41        	clw	a0, 0(ca0)
; 		pprintf("%s word %d is 0x%08x\n",str,i,hw_read32(arr+i));
20040d92: 2a c6        	csw	a0, 12(csp)
20040d94: 26 c4        	csw	s1, 8(csp)
20040d96: 62 65        	clc	ca0, 24(csp)
20040d98: 2a e0        	csc	ca0, 0(csp)
20040d9a: db 05 a4 fe  	cmove	ca1, cs0
20040d9e: 25 37        	cjal	0x20040cc6 <pfprintf(unsigned int**, char const*, ...)>
; 	for(i=0;i<num;i++) 
20040da0: 85 04        	addi	s1, s1, 1
20040da2: f9 bf        	j	0x20040d80 <.LBB6_1>

20040da4 <.LBB6_3>:
; }
20040da4: a2 74        	clc	cs1, 40(csp)
20040da6: 42 74        	clc	cs0, 48(csp)
20040da8: e2 70        	clc	cra, 56(csp)
20040daa: 21 61        	cincoffset	csp, csp, 64
20040dac: 82 80        	cret
20040dae: 00 00        	unimp	

20040db0 <fputc(int, unsigned int**)>:
; {
20040db0: 7d 71        	cincoffset	csp, csp, -16
20040db2: 06 e4        	csc	cra, 8(csp)
20040db4: 2a c2        	csw	a0, 4(csp)
; 	write((int)stream, (const char*)&c, 1);
20040db6: 5b 85 f5 fe  	cgetaddr	a0, ca1
20040dba: 4c 00        	cincoffset	ca1, csp, 4
20040dbc: db a5 45 00  	csetbounds	ca1, ca1, 4
; 	write((int)stream, (const char*)&c, 1);
20040dc0: 05 46        	addi	a2, zero, 1
20040dc2: ef 00 70 00  	cjal	0x200415c8 <_write(int, char const*, int)>
; 	return c;
20040dc6: 12 45        	clw	a0, 4(csp)
20040dc8: a2 60        	clc	cra, 8(csp)
20040dca: 41 61        	cincoffset	csp, csp, 16
20040dcc: 82 80        	cret
20040dce: 00 00        	unimp	

20040dd0 <fputs(char const*, unsigned int**)>:
; {
20040dd0: 3d 71        	cincoffset	csp, csp, -32
20040dd2: 06 ec        	csc	cra, 24(csp)
20040dd4: 22 e8        	csc	cs0, 16(csp)
20040dd6: 26 e4        	csc	cs1, 8(csp)
20040dd8: 5b 04 a5 fe  	cmove	cs0, ca0
; 	return write((int)stream, (char *)s, strlen(s));
20040ddc: db 84 f5 fe  	cgetaddr	s1, ca1
20040de0: 71 20        	cjal	0x20040e6c <strlen(char const*)>
20040de2: 2a 86        	mv	a2, a0
20040de4: 26 85        	mv	a0, s1
20040de6: db 05 a4 fe  	cmove	ca1, cs0
20040dea: a2 64        	clc	cs1, 8(csp)
20040dec: 42 64        	clc	cs0, 16(csp)
20040dee: e2 60        	clc	cra, 24(csp)
20040df0: 05 61        	cincoffset	csp, csp, 32
20040df2: d9 af        	j	0x200415c8 <_write(int, char const*, int)>

20040df4 <fgets(char*, int, unsigned int**)>:
; {
20040df4: 39 71        	cincoffset	csp, csp, -64
20040df6: 06 fc        	csc	cra, 56(csp)
20040df8: 22 f8        	csc	cs0, 48(csp)
20040dfa: 26 f4        	csc	cs1, 40(csp)
20040dfc: 2e d0        	csw	a1, 32(csp)
20040dfe: db 04 a5 fe  	cmove	cs1, ca0
20040e02: 01 44        	mv	s0, zero
20040e04: db 05 f6 fe  	cgetaddr	a1, ca2
20040e08: 2e ce        	csw	a1, 28(csp)
20040e0a: db 15 71 02  	cincoffset	ca1, csp, 39
20040e0e: db a5 15 00  	csetbounds	ca1, ca1, 1
20040e12: 2e e8        	csc	ca1, 16(csp)
20040e14: 2a e4        	csc	ca0, 8(csp)

20040e16 <.LBB0_1>:
; 		read((int)stream, &c, 1);
20040e16: 05 46        	addi	a2, zero, 1
20040e18: 72 45        	clw	a0, 28(csp)
20040e1a: c2 65        	clc	ca1, 16(csp)
20040e1c: f9 2f        	cjal	0x200415fa <_read(int, char*, int)>
; 		*ptr++ = c;
20040e1e: 03 45 71 02  	clbu	a0, 39(csp)
20040e22: 23 80 a4 00  	csb	a0, 0(cs1)
; 	} while(cnt++ < size && c != '\n');
20040e26: 82 55        	clw	a1, 32(csp)
20040e28: b3 25 b4 00  	slt	a1, s0, a1
20040e2c: 05 04        	addi	s0, s0, 1
20040e2e: 59 15        	addi	a0, a0, -10
20040e30: 33 35 a0 00  	snez	a0, a0
20040e34: e9 8d        	and	a1, a1, a0
; 		*ptr++ = c;
20040e36: db 94 14 00  	cincoffset	cs1, cs1, 1
; 	} while(cnt++ < size && c != '\n');
20040e3a: f1 fd        	bnez	a1, 0x20040e16 <.LBB0_1>
; 	*ptr = '\0';
20040e3c: 23 80 04 00  	csb	zero, 0(cs1)
; 	return s;
20040e40: 22 65        	clc	ca0, 8(csp)
20040e42: a2 74        	clc	cs1, 40(csp)
20040e44: 42 74        	clc	cs0, 48(csp)
20040e46: e2 70        	clc	cra, 56(csp)
20040e48: 21 61        	cincoffset	csp, csp, 64
20040e4a: 82 80        	cret

20040e4c <fgetc(unsigned int**)>:
; {
20040e4c: 7d 71        	cincoffset	csp, csp, -16
; 	read((int)stream, &buf, 1);
20040e4e: 06 e4        	csc	cra, 8(csp)
20040e50: 5b 05 f5 fe  	cgetaddr	a0, ca0
20040e54: db 15 71 00  	cincoffset	ca1, csp, 7
20040e58: db a5 15 00  	csetbounds	ca1, ca1, 1
; 	read((int)stream, &buf, 1);
20040e5c: 05 46        	addi	a2, zero, 1
20040e5e: 71 2f        	cjal	0x200415fa <_read(int, char*, int)>
; 	return (int) buf;
20040e60: 03 45 71 00  	clbu	a0, 7(csp)
20040e64: a2 60        	clc	cra, 8(csp)
20040e66: 41 61        	cincoffset	csp, csp, 16
20040e68: 82 80        	cret
20040e6a: 00 00        	unimp	

20040e6c <strlen(char const*)>:
; {
20040e6c: 81 45        	mv	a1, zero

20040e6e <.LBB0_1>:
; 	while(*s++ != 0)i++;
20040e6e: 03 46 05 00  	clbu	a2, 0(ca0)
20040e72: 09 c6        	beqz	a2, 0x20040e7c <.LBB0_3>
20040e74: 5b 15 15 00  	cincoffset	ca0, ca0, 1
20040e78: 85 05        	addi	a1, a1, 1
20040e7a: d5 bf        	j	0x20040e6e <.LBB0_1>

20040e7c <.LBB0_3>:
; 	return i;
20040e7c: 2e 85        	mv	a0, a1
20040e7e: 82 80        	cret

20040e80 <strcmp(char const*, char const*)>:
; 	for(;*s1 == *s2;++s1, ++s2) {
20040e80: 03 46 05 00  	clbu	a2, 0(ca0)
20040e84: 83 c6 05 00  	clbu	a3, 0(ca1)
20040e88: 63 18 d6 00  	bne	a2, a3, 0x20040e98 <.LBB0_4>
; 		if(*s1 == 0) return 0;
20040e8c: 19 ca        	beqz	a2, 0x20040ea2 <.LBB0_7>
; 	for(;*s1 == *s2;++s1, ++s2) {
20040e8e: 5b 15 15 00  	cincoffset	ca0, ca0, 1
20040e92: db 95 15 00  	cincoffset	ca1, ca1, 1
20040e96: ed b7        	j	0x20040e80 <strcmp(char const*, char const*)>

20040e98 <.LBB0_4>:
20040e98: 7d 55        	addi	a0, zero, -1
; 	return *(uint8_t *)s1 < *(uint8_t *)s2 ? -1 : 1;	
20040e9a: 63 63 d6 00  	bltu	a2, a3, 0x20040ea0 <.LBB0_6>
20040e9e: 05 45        	addi	a0, zero, 1

20040ea0 <.LBB0_6>:
; }
20040ea0: 82 80        	cret

20040ea2 <.LBB0_7>:
20040ea2: 01 45        	mv	a0, zero
; }
20040ea4: 82 80        	cret
20040ea6: 00 00        	unimp	

20040ea8 <memset_rand(void*, unsigned int)>:
; {
20040ea8: 3d 71        	cincoffset	csp, csp, -32
20040eaa: 06 ec        	csc	cra, 24(csp)
20040eac: 22 e8        	csc	cs0, 16(csp)
20040eae: 26 e4        	csc	cs1, 8(csp)
20040eb0: ae 84        	mv	s1, a1
20040eb2: 5b 04 a5 fe  	cmove	cs0, ca0
20040eb6: 2a e0        	csc	ca0, 0(csp)
; 	while (len-- > 0) {
20040eb8: 99 c8        	beqz	s1, 0x20040ece <.LBB0_2>

20040eba <.LBB0_1>:
20040eba: fd 14        	addi	s1, s1, -1
; 		*dest++ = rand();
20040ebc: ef f0 af f1  	cjal	0x200405d6 <rand()>
20040ec0: db 15 14 00  	cincoffset	ca1, cs0, 1
20040ec4: 23 00 a4 00  	csb	a0, 0(cs0)
20040ec8: 5b 84 a5 fe  	cmove	cs0, ca1
; 	while (len-- > 0) {
20040ecc: fd f4        	bnez	s1, 0x20040eba <.LBB0_1>

20040ece <.LBB0_2>:
; 	return destaddr;
20040ece: 02 65        	clc	ca0, 0(csp)
20040ed0: a2 64        	clc	cs1, 8(csp)
20040ed2: 42 64        	clc	cs0, 16(csp)
20040ed4: e2 60        	clc	cra, 24(csp)
20040ed6: 05 61        	cincoffset	csp, csp, 32
20040ed8: 82 80        	cret
20040eda: 00 00        	unimp	

20040edc <memcmp(void const*, void const*, unsigned int)>:
;   while (len-- > 0 && (retval=*dest++-*src++) == 0);
20040edc: 93 06 16 00  	addi	a3, a2, 1

20040ee0 <.LBB0_1>:
20040ee0: fd 16        	addi	a3, a3, -1
20040ee2: 81 ce        	beqz	a3, 0x20040efa <.LBB0_3>
20040ee4: 03 46 05 00  	clbu	a2, 0(ca0)
20040ee8: 03 c7 05 00  	clbu	a4, 0(ca1)
20040eec: 5b 15 15 00  	cincoffset	ca0, ca0, 1
20040ef0: db 95 15 00  	cincoffset	ca1, ca1, 1
20040ef4: 19 8e        	sub	a2, a2, a4
20040ef6: 6d d6        	beqz	a2, 0x20040ee0 <.LBB0_1>
20040ef8: 11 a0        	j	0x20040efc <.LBB0_4>

20040efa <.LBB0_3>:
20040efa: 01 46        	mv	a2, zero

20040efc <.LBB0_4>:
;   return retval;
20040efc: 32 85        	mv	a0, a2
20040efe: 82 80        	cret

20040f00 <strcpy(char*, char const*)>:
; {
20040f00: 5b 06 a5 fe  	cmove	ca2, ca0

20040f04 <.LBB0_1>:
; 	while((*dst++ = *src++) != '\0');
20040f04: 83 c6 05 00  	clbu	a3, 0(ca1)
20040f08: db 95 15 00  	cincoffset	ca1, ca1, 1
20040f0c: 5b 17 16 00  	cincoffset	ca4, ca2, 1
20040f10: 23 00 d6 00  	csb	a3, 0(ca2)
20040f14: 5b 06 a7 fe  	cmove	ca2, ca4
20040f18: f5 f6        	bnez	a3, 0x20040f04 <.LBB0_1>
; 	return dest;
20040f1a: 82 80        	cret

20040f1c <memcpy(void*, void const*, unsigned int)>:
; {
20040f1c: db 06 a5 fe  	cmove	ca3, ca0
;   while (len-- > 0)
20040f20: 19 ca        	beqz	a2, 0x20040f36 <.LBB0_2>

20040f22 <.LBB0_1>:
;     *dest++ = *src++;
20040f22: 03 87 05 00  	clb	a4, 0(ca1)
20040f26: db 95 15 00  	cincoffset	ca1, ca1, 1
20040f2a: 23 80 e6 00  	csb	a4, 0(ca3)
20040f2e: db 96 16 00  	cincoffset	ca3, ca3, 1
;   while (len-- > 0)
20040f32: 7d 16        	addi	a2, a2, -1
20040f34: 7d f6        	bnez	a2, 0x20040f22 <.LBB0_1>

20040f36 <.LBB0_2>:
;   return destaddr;
20040f36: 82 80        	cret

20040f38 <wordcmp(void const*, void const*, int)>:
;   while (len-- > 0 && (retval=*dest++-*src++) == 0);
20040f38: 93 06 16 00  	addi	a3, a2, 1

20040f3c <.LBB0_1>:
20040f3c: fd 16        	addi	a3, a3, -1
20040f3e: 63 5b d0 00  	blez	a3, 0x20040f54 <.LBB0_3>
20040f42: 10 41        	clw	a2, 0(ca0)
20040f44: 98 41        	clw	a4, 0(ca1)
20040f46: 5b 15 45 00  	cincoffset	ca0, ca0, 4
20040f4a: db 95 45 00  	cincoffset	ca1, ca1, 4
20040f4e: 19 8e        	sub	a2, a2, a4
20040f50: 75 d6        	beqz	a2, 0x20040f3c <.LBB0_1>
20040f52: 11 a0        	j	0x20040f56 <.LBB0_4>

20040f54 <.LBB0_3>:
20040f54: 01 46        	mv	a2, zero

20040f56 <.LBB0_4>:
;   return retval;
20040f56: 32 85        	mv	a0, a2
20040f58: 82 80        	cret
20040f5a: 00 00        	unimp	

20040f5c <wordcpy(void*, void const*, int)>:
; {
20040f5c: db 06 a5 fe  	cmove	ca3, ca0
;   while (len-- > 0)
20040f60: 63 5b c0 00  	blez	a2, 0x20040f76 <.LBB0_2>

20040f64 <.LBB0_1>:
;     *dest++ = *src++;
20040f64: 98 41        	clw	a4, 0(ca1)
20040f66: db 95 45 00  	cincoffset	ca1, ca1, 4
20040f6a: 98 c2        	csw	a4, 0(ca3)
20040f6c: db 96 46 00  	cincoffset	ca3, ca3, 4
;   while (len-- > 0)
20040f70: 7d 16        	addi	a2, a2, -1
20040f72: e3 49 c0 fe  	bgtz	a2, 0x20040f64 <.LBB0_1>

20040f76 <.LBB0_2>:
;   return destaddr;
20040f76: 82 80        	cret

20040f78 <strncpy(char*, char const*, unsigned int)>:
; {
20040f78: 81 46        	mv	a3, zero
; 	for (i = 0 ; i < n && src[i] != '\0' ; i++)
20040f7a: 63 0e d6 00  	beq	a2, a3, 0x20040f96 <.LBB0_3>

20040f7e <.LBB0_1>:
20040f7e: 5b 87 d5 22  	cincoffset	ca4, ca1, a3
20040f82: 03 47 07 00  	clbu	a4, 0(ca4)
20040f86: 09 cb        	beqz	a4, 0x20040f98 <.LBB0_4>
; 		dest[i] = src[i];
20040f88: db 07 d5 22  	cincoffset	ca5, ca0, a3
20040f8c: 23 80 e7 00  	csb	a4, 0(ca5)
; 	for (i = 0 ; i < n && src[i] != '\0' ; i++)
20040f90: 85 06        	addi	a3, a3, 1
20040f92: e3 16 d6 fe  	bne	a2, a3, 0x20040f7e <.LBB0_1>

20040f96 <.LBB0_3>:
20040f96: b2 86        	mv	a3, a2

20040f98 <.LBB0_4>:
20040f98: b6 85        	mv	a1, a3
20040f9a: 63 69 d6 00  	bltu	a2, a3, 0x20040fac <.LBB0_7>
20040f9e: b2 85        	mv	a1, a2
20040fa0: 31 a0        	j	0x20040fac <.LBB0_7>

20040fa2 <.LBB0_6>:
; 		dest[i] = '\0';
20040fa2: 5b 06 d5 22  	cincoffset	ca2, ca0, a3
20040fa6: 23 00 06 00  	csb	zero, 0(ca2)
; 	for ( ; i < n ; i++)
20040faa: 85 06        	addi	a3, a3, 1

20040fac <.LBB0_7>:
20040fac: e3 9b d5 fe  	bne	a1, a3, 0x20040fa2 <.LBB0_6>
; 	return dest;
20040fb0: 82 80        	cret
20040fb2: 00 00        	unimp	

20040fb4 <memset(void*, int, unsigned int)>:
; {
20040fb4: db 06 a5 fe  	cmove	ca3, ca0
; 	while (len-- > 0) {
20040fb8: 19 c6        	beqz	a2, 0x20040fc6 <.LBB0_2>

20040fba <.LBB0_1>:
; 		*dest++ = c;
20040fba: 23 80 b6 00  	csb	a1, 0(ca3)
20040fbe: db 96 16 00  	cincoffset	ca3, ca3, 1
; 	while (len-- > 0) {
20040fc2: 7d 16        	addi	a2, a2, -1
20040fc4: 7d fa        	bnez	a2, 0x20040fba <.LBB0_1>

20040fc6 <.LBB0_2>:
; 	return destaddr;
20040fc6: 82 80        	cret

20040fc8 <wordset(void*, unsigned int, unsigned int)>:
; {
20040fc8: db 06 a5 fe  	cmove	ca3, ca0
; 	while (len-- > 0) {
20040fcc: 11 c6        	beqz	a2, 0x20040fd8 <.LBB0_2>

20040fce <.LBB0_1>:
; 		*dest++ = c;
20040fce: 8c c2        	csw	a1, 0(ca3)
20040fd0: db 96 46 00  	cincoffset	ca3, ca3, 4
; 	while (len-- > 0) {
20040fd4: 7d 16        	addi	a2, a2, -1
20040fd6: 65 fe        	bnez	a2, 0x20040fce <.LBB0_1>

20040fd8 <.LBB0_2>:
; 	return destaddr;
20040fd8: 82 80        	cret
20040fda: 00 00        	unimp	

20040fdc <memset_unique(void*, unsigned int)>:
; {
20040fdc: 81 46        	mv	a3, zero
20040fde: 5b 06 a5 fe  	cmove	ca2, ca0
; 	while (len-- > 0) {
20040fe2: 63 8d d5 00  	beq	a1, a3, 0x20040ffc <.LBB0_2>

20040fe6 <.LBB0_1>:
; 		*dest++ = i++;
20040fe6: 13 87 16 00  	addi	a4, a3, 1
20040fea: db 17 16 00  	cincoffset	ca5, ca2, 1
20040fee: 23 00 d6 00  	csb	a3, 0(ca2)
20040ff2: 5b 86 a7 fe  	cmove	ca2, ca5
20040ff6: ba 86        	mv	a3, a4
; 	while (len-- > 0) {
20040ff8: e3 97 d5 fe  	bne	a1, a3, 0x20040fe6 <.LBB0_1>

20040ffc <.LBB0_2>:
; 	return destaddr;
20040ffc: 82 80        	cret
20040ffe: 00 00        	unimp	

20041000 <register_handler(unsigned int, void (*)())>:
;     old = irq_array[irq_bit_number];
20041000: 13 16 35 00  	slli	a2, a0, 3
20041004: db 96 01 f6  	cincoffset	ca3, cgp, -160
20041008: db a6 06 18  	csetbounds	ca3, ca3, 384
2004100c: db 86 c6 22  	cincoffset	ca3, ca3, a2
20041010: 90 62        	clc	ca2, 0(ca3)
;     irq_array[irq_bit_number] = handler;
20041012: 8c e2        	csc	ca1, 0(ca3)
;     irq_vector_exists[irq_bit_number] = 1;
20041014: db 95 01 0e  	cincoffset	ca1, cgp, 224
20041018: db a5 05 03  	csetbounds	ca1, ca1, 48
2004101c: 5b 85 a5 22  	cincoffset	ca0, ca1, a0
20041020: 85 45        	addi	a1, zero, 1
;     irq_vector_exists[irq_bit_number] = 1;
20041022: 23 00 b5 00  	csb	a1, 0(ca0)
;     return old;
20041026: 5b 05 a6 fe  	cmove	ca0, ca2
2004102a: 82 80        	cret

2004102c <unregister_handler(unsigned int)>:
;     old = irq_array[irq_bit_number];
2004102c: 93 15 35 00  	slli	a1, a0, 3
20041030: 5b 96 01 f6  	cincoffset	ca2, cgp, -160
20041034: 5b 26 06 18  	csetbounds	ca2, ca2, 384
20041038: 5b 06 b6 22  	cincoffset	ca2, ca2, a1
2004103c: 0c 62        	clc	ca1, 0(ca2)
;     irq_array[irq_bit_number] = NULL;
2004103e: 23 30 06 00  	csc	cnull, 0(ca2)
;     irq_vector_exists[irq_bit_number] = 0;
20041042: 5b 96 01 0e  	cincoffset	ca2, cgp, 224
20041046: 5b 26 06 03  	csetbounds	ca2, ca2, 48
2004104a: 5b 05 a6 22  	cincoffset	ca0, ca2, a0
2004104e: 23 00 05 00  	csb	zero, 0(ca0)
;     return old;
20041052: 5b 85 a5 fe  	cmove	ca0, ca1
20041056: 82 80        	cret

20041058 <dispatch_irqs(unsigned int)>:
; {
20041058: 7d 71        	cincoffset	csp, csp, -16
;     if(irq_vector_exists[irq_bit_number] && irq_bit_number < _NUM_IRQ ) {
2004105a: 06 e4        	csc	cra, 8(csp)
2004105c: db 95 01 0e  	cincoffset	ca1, cgp, 224
20041060: db a5 05 03  	csetbounds	ca1, ca1, 48
20041064: db 85 a5 22  	cincoffset	ca1, ca1, a0
20041068: 83 c5 05 00  	clbu	a1, 0(ca1)
2004106c: b3 35 b0 00  	snez	a1, a1
20041070: 13 36 05 03  	sltiu	a2, a0, 48
20041074: f1 8d        	and	a1, a1, a2
20041076: 81 cd        	beqz	a1, 0x2004108e <.LBB2_4>
;             irq_array[irq_bit_number]();
20041078: 0e 05        	slli	a0, a0, 3
2004107a: db 95 01 f6  	cincoffset	ca1, cgp, -160
2004107e: db a5 05 18  	csetbounds	ca1, ca1, 384
20041082: 5b 85 a5 22  	cincoffset	ca0, ca1, a0
20041086: 08 61        	clc	ca0, 0(ca0)
20041088: 02 95        	cjalr	ca0
2004108a: 05 45        	addi	a0, zero, 1
2004108c: 31 a8        	j	0x200410a8 <.LBB2_3>

2004108e <.LBB2_4>:
;             pprintf("Error...Unhandled Exception(%d). Exiting test\n", irq_bit_number);
2004108e: 97 05 00 00  	auipcc	ca1, 0
20041092: db 95 75 67  	cincoffset	ca1, ca1, 1655
20041096: db a5 f5 02  	csetbounds	ca1, ca1, 47
2004109a: 2a c0        	csw	a0, 0(csp)
2004109c: 5b 05 a0 fe  	cmove	ca0, cnull
200410a0: 1d 31        	cjal	0x20040cc6 <pfprintf(unsigned int**, char const*, ...)>
;             exit(1);
200410a2: 05 45        	addi	a0, zero, 1
200410a4: d5 2c        	cjal	0x20041398 <__cxa_pure_virtual>
200410a6: 01 45        	mv	a0, zero

200410a8 <.LBB2_3>:
; }
200410a8: a2 60        	clc	cra, 8(csp)
200410aa: 41 61        	cincoffset	csp, csp, 16
200410ac: 82 80        	cret
200410ae: 00 00        	unimp	

200410b0 <GenerateECC(unsigned long long, ENCRYPTION_TYPE_E)>:
; {
200410b0: 39 71        	cincoffset	csp, csp, -64
200410b2: 06 fc        	csc	cra, 56(csp)
200410b4: 22 f8        	csc	cs0, 48(csp)
200410b6: 26 f4        	csc	cs1, 40(csp)
200410b8: 36 84        	mv	s0, a3
200410ba: 32 cc        	csw	a2, 24(csp)
200410bc: 2e ce        	csw	a1, 28(csp)
200410be: aa 87        	mv	a5, a0
200410c0: 37 55 55 00  	lui	a0, 1365
200410c4: 13 05 55 55  	addi	a0, a0, 1365
; 	p1  = ComputeParity(data & (PARITY1  | secded_mode));
200410c8: 33 e7 a6 00  	or	a4, a3, a0
200410cc: 37 b5 aa 56  	lui	a0, 354987
200410d0: 13 05 b5 d5  	addi	a0, a0, -677
200410d4: 51 8d        	or	a0, a0, a2
200410d6: 7d 8d        	and	a0, a0, a5
200410d8: be 84        	mv	s1, a5
200410da: 3e d2        	csw	a5, 36(csp)
200410dc: f9 8d        	and	a1, a1, a4
200410de: ed 2a        	cjal	0x200412d8 <ComputeParity(unsigned long long)>
200410e0: 2a c8        	csw	a0, 16(csp)
200410e2: 37 a5 99 00  	lui	a0, 2458
200410e6: 13 05 95 99  	addi	a0, a0, -1639
; 	p2  = ComputeParity(data & (PARITY2  | secded_mode));
200410ea: 22 d0        	csw	s0, 32(csp)
200410ec: b3 65 a4 00  	or	a1, s0, a0
200410f0: 37 35 33 9b  	lui	a0, 635699
200410f4: 13 05 d5 66  	addi	a0, a0, 1645
200410f8: 62 46        	clw	a2, 24(csp)
200410fa: 51 8d        	or	a0, a0, a2
200410fc: 65 8d        	and	a0, a0, s1
200410fe: f2 44        	clw	s1, 28(csp)
; 	p2  = ComputeParity(data & (PARITY2  | secded_mode));
20041100: e5 8d        	and	a1, a1, s1
20041102: d9 2a        	cjal	0x200412d8 <ComputeParity(unsigned long long)>
20041104: 2a c6        	csw	a0, 12(csp)
20041106: 37 e5 e1 00  	lui	a0, 3614
2004110a: 13 05 15 1e  	addi	a0, a0, 481
; 	p4  = ComputeParity(data & (PARITY4  | secded_mode));
2004110e: b3 65 a4 00  	or	a1, s0, a0
20041112: 37 c5 c3 e3  	lui	a0, 932924
20041116: 13 05 e5 78  	addi	a0, a0, 1934
2004111a: 62 44        	clw	s0, 24(csp)
; 	p4  = ComputeParity(data & (PARITY4  | secded_mode));
2004111c: 41 8d        	or	a0, a0, s0
2004111e: 12 56        	clw	a2, 36(csp)
20041120: 71 8d        	and	a0, a0, a2
20041122: e5 8d        	and	a1, a1, s1
20041124: 55 2a        	cjal	0x200412d8 <ComputeParity(unsigned long long)>
20041126: 2a c4        	csw	a0, 8(csp)
20041128: 37 05 fe 00  	lui	a0, 4064
2004112c: 13 05 e5 1f  	addi	a0, a0, 510
; 	p8  = ComputeParity(data & (PARITY8  | secded_mode));
20041130: 82 55        	clw	a1, 32(csp)
20041132: c9 8d        	or	a1, a1, a0
20041134: 37 05 fc 03  	lui	a0, 16320
20041138: 13 05 05 7f  	addi	a0, a0, 2032
; 	p8  = ComputeParity(data & (PARITY8  | secded_mode));
2004113c: 41 8d        	or	a0, a0, s0
2004113e: 12 56        	clw	a2, 36(csp)
20041140: 71 8d        	and	a0, a0, a2
20041142: e5 8d        	and	a1, a1, s1
20041144: 51 2a        	cjal	0x200412d8 <ComputeParity(unsigned long long)>
20041146: 2a c2        	csw	a0, 4(csp)
20041148: 37 05 00 01  	lui	a0, 4096
2004114c: 13 05 05 e0  	addi	a0, a0, -512
; 	p16 = ComputeParity(data & (PARITY16 | secded_mode));
20041150: 82 55        	clw	a1, 32(csp)
20041152: c9 8d        	or	a1, a1, a0
20041154: 37 05 00 04  	lui	a0, 16384
20041158: 13 05 05 80  	addi	a0, a0, -2048
; 	p16 = ComputeParity(data & (PARITY16 | secded_mode));
2004115c: 41 8d        	or	a0, a0, s0
2004115e: 12 56        	clw	a2, 36(csp)
20041160: 71 8d        	and	a0, a0, a2
20041162: e5 8d        	and	a1, a1, s1
20041164: 95 2a        	cjal	0x200412d8 <ComputeParity(unsigned long long)>
20041166: 2a ca        	csw	a0, 20(csp)
20041168: 37 05 00 01  	lui	a0, 4096
2004116c: 7d 15        	addi	a0, a0, -1
2004116e: 82 54        	clw	s1, 32(csp)
; 	p32 = ComputeParity(data & (PARITY32 | secded_mode));
20041170: b3 e5 a4 00  	or	a1, s1, a0
20041174: 37 05 00 fc  	lui	a0, 1032192
20041178: 41 8d        	or	a0, a0, s0
2004117a: 12 56        	clw	a2, 36(csp)
2004117c: 71 8d        	and	a0, a0, a2
2004117e: 72 46        	clw	a2, 28(csp)
20041180: f1 8d        	and	a1, a1, a2
20041182: 99 2a        	cjal	0x200412d8 <ComputeParity(unsigned long long)>
;   if(secded_mode == 0) {
20041184: b3 65 94 00  	or	a1, s0, s1
; 	p32 = ComputeParity(data & (PARITY32 | secded_mode));
20041188: aa 87        	mv	a5, a0
;   if(secded_mode == 0) {
2004118a: e1 c1        	beqz	a1, 0x2004124a <.LBB0_2>
2004118c: 37 05 00 02  	lui	a0, 8192
20041190: 7d 15        	addi	a0, a0, -1
;   p64 = ComputeParity(data & (PARITY64 | secded_mode)) ^ p1 ^ p2 ^ p4 ^ p8 ^ p16 ^ p32;
20041192: 45 8d        	or	a0, a0, s1
20041194: f2 45        	clw	a1, 28(csp)
20041196: e9 8d        	and	a1, a1, a0
20041198: 12 54        	clw	s0, 36(csp)
2004119a: 22 85        	mv	a0, s0
2004119c: be 84        	mv	s1, a5
2004119e: 2d 2a        	cjal	0x200412d8 <ComputeParity(unsigned long long)>
200411a0: c2 42        	clw	t0, 16(csp)
200411a2: 32 43        	clw	t1, 12(csp)
;   p64 = ComputeParity(data & (PARITY64 | secded_mode)) ^ p1 ^ p2 ^ p4 ^ p8 ^ p16 ^ p32;
200411a4: b3 45 53 00  	xor	a1, t1, t0
200411a8: a2 43        	clw	t2, 8(csp)
200411aa: b3 c5 75 00  	xor	a1, a1, t2
200411ae: 92 40        	clw	ra, 4(csp)
200411b0: b3 c5 15 00  	xor	a1, a1, ra
200411b4: 52 46        	clw	a2, 20(csp)
200411b6: b1 8d        	xor	a1, a1, a2
200411b8: a5 8d        	xor	a1, a1, s1
200411ba: a9 8d        	xor	a1, a1, a0
; 				  ((data&0xf8000000)<<6) | ((data&0x7800000)<<5) | ((data&0x07C0000)<<4)  | ((data&0x03C000)<<3) | 
200411bc: 13 15 54 00  	slli	a0, s0, 5
200411c0: 37 06 00 f0  	lui	a2, 983040
200411c4: 71 8d        	and	a0, a0, a2
200411c6: 13 16 44 00  	slli	a2, s0, 4
200411ca: b7 06 c0 07  	lui	a3, 31744
200411ce: 75 8e        	and	a2, a2, a3
200411d0: 93 16 34 00  	slli	a3, s0, 3
200411d4: 37 07 1e 00  	lui	a4, 480
200411d8: f9 8e        	and	a3, a3, a4
; 				  ((data&0x3E00)<<2)     | ((data&0x1E0)<<1)      |  (data&0x1F);
200411da: 13 17 24 00  	slli	a4, s0, 2
200411de: c1 67        	lui	a5, 16
200411e0: 93 87 07 80  	addi	a5, a5, -2048
200411e4: 7d 8f        	and	a4, a4, a5
200411e6: 93 77 f4 01  	andi	a5, s0, 31
; 	  addr_data = (p64<<38) | (p32<<32) | (p16<<27) | (p8<<21) | (p4<<16) | (p2<<10) | (p1<<5) | 
200411ea: 5d 8d        	or	a0, a0, a5
200411ec: 51 8d        	or	a0, a0, a2
200411ee: 55 8d        	or	a0, a0, a3
200411f0: 59 8d        	or	a0, a0, a4
; 				  ((data&0x3E00)<<2)     | ((data&0x1E0)<<1)      |  (data&0x1F);
200411f2: 13 16 14 00  	slli	a2, s0, 1
200411f6: 13 76 06 3c  	andi	a2, a2, 960
; 	  addr_data = (p64<<38) | (p32<<32) | (p16<<27) | (p8<<21) | (p4<<16) | (p2<<10) | (p1<<5) | 
200411fa: 51 8d        	or	a0, a0, a2
200411fc: 13 96 52 00  	slli	a2, t0, 5
20041200: 51 8d        	or	a0, a0, a2
20041202: 13 d6 b2 01  	srli	a2, t0, 27
; 				  ((data&0xf8000000)<<6) | ((data&0x7800000)<<5) | ((data&0x07C0000)<<4)  | ((data&0x03C000)<<3) | 
20041206: 93 56 a4 01  	srli	a3, s0, 26
2004120a: 93 f6 e6 03  	andi	a3, a3, 62
; 	  addr_data = (p64<<38) | (p32<<32) | (p16<<27) | (p8<<21) | (p4<<16) | (p2<<10) | (p1<<5) | 
2004120e: 55 8e        	or	a2, a2, a3
20041210: 93 16 a3 00  	slli	a3, t1, 10
; 				  ((data&0xf8000000)<<6) | ((data&0x7800000)<<5) | ((data&0x07C0000)<<4)  | ((data&0x03C000)<<3) | 
20041214: 55 8d        	or	a0, a0, a3
; 	  addr_data = (p64<<38) | (p32<<32) | (p16<<27) | (p8<<21) | (p4<<16) | (p2<<10) | (p1<<5) | 
20041216: 93 56 63 01  	srli	a3, t1, 22
; 				  ((data&0xf8000000)<<6) | ((data&0x7800000)<<5) | ((data&0x07C0000)<<4)  | ((data&0x03C000)<<3) | 
2004121a: 55 8e        	or	a2, a2, a3
; 	  addr_data = (p64<<38) | (p32<<32) | (p16<<27) | (p8<<21) | (p4<<16) | (p2<<10) | (p1<<5) | 
2004121c: 93 96 03 01  	slli	a3, t2, 16
; 				  ((data&0xf8000000)<<6) | ((data&0x7800000)<<5) | ((data&0x07C0000)<<4)  | ((data&0x03C000)<<3) | 
20041220: 55 8d        	or	a0, a0, a3
; 	  addr_data = (p64<<38) | (p32<<32) | (p16<<27) | (p8<<21) | (p4<<16) | (p2<<10) | (p1<<5) | 
20041222: 93 d6 03 01  	srli	a3, t2, 16
; 				  ((data&0xf8000000)<<6) | ((data&0x7800000)<<5) | ((data&0x07C0000)<<4)  | ((data&0x03C000)<<3) | 
20041226: 55 8e        	or	a2, a2, a3
; 	  addr_data = (p64<<38) | (p32<<32) | (p16<<27) | (p8<<21) | (p4<<16) | (p2<<10) | (p1<<5) | 
20041228: 93 96 50 01  	slli	a3, ra, 21
; 				  ((data&0xf8000000)<<6) | ((data&0x7800000)<<5) | ((data&0x07C0000)<<4)  | ((data&0x03C000)<<3) | 
2004122c: 55 8d        	or	a0, a0, a3
; 	  addr_data = (p64<<38) | (p32<<32) | (p16<<27) | (p8<<21) | (p4<<16) | (p2<<10) | (p1<<5) | 
2004122e: 93 d6 b0 00  	srli	a3, ra, 11
; 				  ((data&0xf8000000)<<6) | ((data&0x7800000)<<5) | ((data&0x07C0000)<<4)  | ((data&0x03C000)<<3) | 
20041232: 55 8e        	or	a2, a2, a3
20041234: 52 47        	clw	a4, 20(csp)
; 	  addr_data = (p64<<38) | (p32<<32) | (p16<<27) | (p8<<21) | (p4<<16) | (p2<<10) | (p1<<5) | 
20041236: 93 16 b7 01  	slli	a3, a4, 27
; 				  ((data&0xf8000000)<<6) | ((data&0x7800000)<<5) | ((data&0x07C0000)<<4)  | ((data&0x03C000)<<3) | 
2004123a: 55 8d        	or	a0, a0, a3
; 	  addr_data = (p64<<38) | (p32<<32) | (p16<<27) | (p8<<21) | (p4<<16) | (p2<<10) | (p1<<5) | 
2004123c: 93 56 57 00  	srli	a3, a4, 5
; 				  ((data&0xf8000000)<<6) | ((data&0x7800000)<<5) | ((data&0x07C0000)<<4)  | ((data&0x03C000)<<3) | 
20041240: 55 8e        	or	a2, a2, a3
; 				  ((data&0x3E00)<<2)     | ((data&0x1E0)<<1)      |  (data&0x1F);
20041242: 45 8e        	or	a2, a2, s1
; 	  addr_data = (p64<<38) | (p32<<32) | (p16<<27) | (p8<<21) | (p4<<16) | (p2<<10) | (p1<<5) | 
20041244: 9a 05        	slli	a1, a1, 6
; 				  ((data&0x3E00)<<2)     | ((data&0x1E0)<<1)      |  (data&0x1F);
20041246: d1 8d        	or	a1, a1, a2
20041248: 59 a0        	j	0x200412ce <.LBB0_3>

2004124a <.LBB0_2>:
2004124a: 92 54        	clw	s1, 36(csp)
; 				  ((data&0xF8000000)<<5) | ((data&0x7E00000)<<4)  | ((data&0x1F0000)<<3) | 
2004124c: 13 95 44 00  	slli	a0, s1, 4
20041250: b7 05 00 7e  	lui	a1, 516096
20041254: 6d 8d        	and	a0, a0, a1
20041256: 93 95 34 00  	slli	a1, s1, 3
2004125a: 37 06 f8 00  	lui	a2, 3968
2004125e: f1 8d        	and	a1, a1, a2
; 				  ((data&0xF800)<<2)     | ((data&0x7E0)<<1)      |  (data&0x1F);
20041260: 13 96 24 00  	slli	a2, s1, 2
20041264: b7 e6 03 00  	lui	a3, 62
20041268: 75 8e        	and	a2, a2, a3
2004126a: 93 96 14 00  	slli	a3, s1, 1
2004126e: 05 67        	lui	a4, 1
20041270: 13 07 07 fc  	addi	a4, a4, -64
20041274: f9 8e        	and	a3, a3, a4
20041276: 13 f7 f4 01  	andi	a4, s1, 31
; 	  addr_data = (p32<<37) | (p16<<31) | (p8<<24) | (p4<<18) | (p2<<12) | (p1<<5) | 
2004127a: 59 8d        	or	a0, a0, a4
2004127c: 4d 8d        	or	a0, a0, a1
2004127e: 51 8d        	or	a0, a0, a2
20041280: 55 8d        	or	a0, a0, a3
20041282: 42 46        	clw	a2, 16(csp)
20041284: 93 15 56 00  	slli	a1, a2, 5
20041288: 4d 8d        	or	a0, a0, a1
2004128a: b3 e5 c4 00  	or	a1, s1, a2
2004128e: b2 46        	clw	a3, 12(csp)
20041290: 13 96 c6 00  	slli	a2, a3, 12
; 				  ((data&0xF8000000)<<5) | ((data&0x7E00000)<<4)  | ((data&0x1F0000)<<3) | 
20041294: 51 8d        	or	a0, a0, a2
; 	  addr_data = (p32<<37) | (p16<<31) | (p8<<24) | (p4<<18) | (p2<<12) | (p1<<5) | 
20041296: 13 d6 46 01  	srli	a2, a3, 20
2004129a: ed 81        	srli	a1, a1, 27
; 				  ((data&0xF8000000)<<5) | ((data&0x7E00000)<<4)  | ((data&0x1F0000)<<3) | 
2004129c: d1 8d        	or	a1, a1, a2
2004129e: a2 46        	clw	a3, 8(csp)
; 	  addr_data = (p32<<37) | (p16<<31) | (p8<<24) | (p4<<18) | (p2<<12) | (p1<<5) | 
200412a0: 13 96 26 01  	slli	a2, a3, 18
; 				  ((data&0xF8000000)<<5) | ((data&0x7E00000)<<4)  | ((data&0x1F0000)<<3) | 
200412a4: 51 8d        	or	a0, a0, a2
; 	  addr_data = (p32<<37) | (p16<<31) | (p8<<24) | (p4<<18) | (p2<<12) | (p1<<5) | 
200412a6: 13 d6 e6 00  	srli	a2, a3, 14
; 				  ((data&0xF8000000)<<5) | ((data&0x7E00000)<<4)  | ((data&0x1F0000)<<3) | 
200412aa: d1 8d        	or	a1, a1, a2
200412ac: 92 46        	clw	a3, 4(csp)
; 	  addr_data = (p32<<37) | (p16<<31) | (p8<<24) | (p4<<18) | (p2<<12) | (p1<<5) | 
200412ae: 13 96 86 01  	slli	a2, a3, 24
; 				  ((data&0xF8000000)<<5) | ((data&0x7E00000)<<4)  | ((data&0x1F0000)<<3) | 
200412b2: 51 8d        	or	a0, a0, a2
; 	  addr_data = (p32<<37) | (p16<<31) | (p8<<24) | (p4<<18) | (p2<<12) | (p1<<5) | 
200412b4: 13 d6 86 00  	srli	a2, a3, 8
; 				  ((data&0xF8000000)<<5) | ((data&0x7E00000)<<4)  | ((data&0x1F0000)<<3) | 
200412b8: d1 8d        	or	a1, a1, a2
200412ba: d2 46        	clw	a3, 20(csp)
; 	  addr_data = (p32<<37) | (p16<<31) | (p8<<24) | (p4<<18) | (p2<<12) | (p1<<5) | 
200412bc: 13 96 f6 01  	slli	a2, a3, 31
; 				  ((data&0xF800)<<2)     | ((data&0x7E0)<<1)      |  (data&0x1F);
200412c0: 51 8d        	or	a0, a0, a2
; 	  addr_data = (p32<<37) | (p16<<31) | (p8<<24) | (p4<<18) | (p2<<12) | (p1<<5) | 
200412c2: 13 d6 16 00  	srli	a2, a3, 1
; 				  ((data&0xF800)<<2)     | ((data&0x7E0)<<1)      |  (data&0x1F);
200412c6: d1 8d        	or	a1, a1, a2
; 	  addr_data = (p32<<37) | (p16<<31) | (p8<<24) | (p4<<18) | (p2<<12) | (p1<<5) | 
200412c8: 13 96 57 00  	slli	a2, a5, 5
; 				  ((data&0xF800)<<2)     | ((data&0x7E0)<<1)      |  (data&0x1F);
200412cc: d1 8d        	or	a1, a1, a2

200412ce <.LBB0_3>:
; 	return addr_data;
200412ce: a2 74        	clc	cs1, 40(csp)
200412d0: 42 74        	clc	cs0, 48(csp)
200412d2: e2 70        	clc	cra, 56(csp)
200412d4: 21 61        	cincoffset	csp, csp, 64
200412d6: 82 80        	cret

200412d8 <ComputeParity(unsigned long long)>:
; 	Parity ^= Parity >>  32;
200412d8: 2d 8d        	xor	a0, a0, a1
; 	Parity ^= Parity >>  16;
200412da: 13 56 05 01  	srli	a2, a0, 16
200412de: 93 96 05 01  	slli	a3, a1, 16
200412e2: 55 8e        	or	a2, a2, a3
200412e4: 93 d6 05 01  	srli	a3, a1, 16
200412e8: 31 8d        	xor	a0, a0, a2
200412ea: b5 8d        	xor	a1, a1, a3
; 	Parity ^= Parity >>  8;
200412ec: 13 56 85 00  	srli	a2, a0, 8
200412f0: 93 96 85 01  	slli	a3, a1, 24
200412f4: 55 8e        	or	a2, a2, a3
200412f6: 93 d6 85 00  	srli	a3, a1, 8
200412fa: 31 8d        	xor	a0, a0, a2
200412fc: b5 8d        	xor	a1, a1, a3
; 	Parity ^= Parity >>  4;
200412fe: 13 56 45 00  	srli	a2, a0, 4
20041302: 93 96 c5 01  	slli	a3, a1, 28
20041306: 55 8e        	or	a2, a2, a3
20041308: 93 d6 45 00  	srli	a3, a1, 4
2004130c: 31 8d        	xor	a0, a0, a2
2004130e: b5 8d        	xor	a1, a1, a3
; 	Parity ^= Parity >>  2;
20041310: 13 56 25 00  	srli	a2, a0, 2
20041314: fa 05        	slli	a1, a1, 30
20041316: d1 8d        	or	a1, a1, a2
20041318: 2d 8d        	xor	a0, a0, a1
; 	Parity ^= Parity >>  1;
2004131a: 93 55 15 00  	srli	a1, a0, 1
2004131e: 2d 8d        	xor	a0, a0, a1
; 	return (uint32_t)(Parity&0x1);
20041320: 05 89        	andi	a0, a0, 1
20041322: 82 80        	cret

20041324 <ConCatAddrData(unsigned int, unsigned int, unsigned int, ENCRYPTION_TYPE_E)>:
; {
20041324: ae 82        	mv	t0, a1
; 	uint32_t msb = ((Addr>>(Width-1))&0x1)^0x1;
20041326: 93 05 f6 ff  	addi	a1, a2, -1
2004132a: b3 57 b5 00  	srl	a5, a0, a1
2004132e: fd 55        	addi	a1, zero, -1
; 	k = ((1<<Width)-1);
20041330: b3 95 c5 00  	sll	a1, a1, a2
20041334: 13 c3 f5 ff  	not	t1, a1
; 	Addr &= (secded_mode == 0) ? 0xFFFFFC : 0x1FFFFFC;
20041338: 55 8f        	or	a4, a4, a3
2004133a: 93 36 17 00  	seqz	a3, a4
2004133e: 01 c7        	beqz	a4, 0x20041346 <.LBB2_2>
20041340: 37 07 00 02  	lui	a4, 8192
20041344: 19 a0        	j	0x2004134a <.LBB2_3>

20041346 <.LBB2_2>:
20041346: 37 07 00 01  	lui	a4, 4096

2004134a <.LBB2_3>:
2004134a: 71 17        	addi	a4, a4, -4
2004134c: 93 c7 f7 ff  	not	a5, a5
20041350: e5 45        	addi	a1, zero, 25
; 	uint32_t max_addr = (secded_mode == 0) ? 24 : 25;
20041352: b3 86 d5 40  	sub	a3, a1, a3
20041356: b3 75 a3 00  	and	a1, t1, a0
; 	for(j=Width;j<max_addr;j++) {
2004135a: 63 63 d6 00  	bltu	a2, a3, 0x20041360 <.LBB2_5>
2004135e: b2 86        	mv	a3, a2

20041360 <.LBB2_5>:
20041360: 13 f5 17 00  	andi	a0, a5, 1
20041364: f9 8d        	and	a1, a1, a4
; 	for(j=Width;j<max_addr;j++) {
20041366: 63 88 c6 00  	beq	a3, a2, 0x20041376 <.LBB2_7>

2004136a <.LBB2_6>:
; 	  Addr |= msb<<j;
2004136a: 33 17 c5 00  	sll	a4, a0, a2
2004136e: d9 8d        	or	a1, a1, a4
; 	for(j=Width;j<max_addr;j++) {
20041370: 05 06        	addi	a2, a2, 1
20041372: e3 9c c6 fe  	bne	a3, a2, 0x2004136a <.LBB2_6>

20041376 <.LBB2_7>:
; 	return concat;
20041376: 16 85        	mv	a0, t0
20041378: 82 80        	cret

2004137a <ConstructECC(unsigned int, unsigned int, unsigned int, ENCRYPTION_TYPE_E)>:
; {
2004137a: 3d 71        	cincoffset	csp, csp, -32
2004137c: 06 ec        	csc	cra, 24(csp)
2004137e: 22 e8        	csc	cs0, 16(csp)
20041380: 26 e4        	csc	cs1, 8(csp)
20041382: 3a 84        	mv	s0, a4
20041384: b6 84        	mv	s1, a3
; 	concatresult = ConCatAddrData(Addr, Data, Width, secded_mode);
20041386: 79 3f        	cjal	0x20041324 <ConCatAddrData(unsigned int, unsigned int, unsigned int, ENCRYPTION_TYPE_E)>
; 	return GenerateECC(concatresult, secded_mode);
20041388: 26 86        	mv	a2, s1
2004138a: a2 86        	mv	a3, s0
2004138c: a2 64        	clc	cs1, 8(csp)
2004138e: 42 64        	clc	cs0, 16(csp)
20041390: e2 60        	clc	cra, 24(csp)
20041392: 05 61        	cincoffset	csp, csp, 32
20041394: 31 bb        	j	0x200410b0 <GenerateECC(unsigned long long, ENCRYPTION_TYPE_E)>
20041396: 00 00        	unimp	

20041398 <__cxa_pure_virtual>:
; {
20041398: 7d 71        	cincoffset	csp, csp, -16
;   int retval = (val != 0) ? 0xfe : 0xff;
2004139a: 06 e4        	csc	cra, 8(csp)
2004139c: 13 35 15 00  	seqz	a0, a0
200413a0: 13 65 e5 0f  	ori	a0, a0, 254
;   putc(retval);
200413a4: db 15 10 00  	cincoffset	ca1, cnull, 1
200413a8: 21 34        	cjal	0x20040db0 <fputc(int, unsigned int**)>

200413aa <from_root(unsigned int)>:
;   return __builtin_cheri_address_set(globalRoot, addr);
200413aa: db 95 01 14  	cincoffset	ca1, cgp, 320
200413ae: db a5 85 00  	csetbounds	ca1, ca1, 8
200413b2: 8c 61        	clc	ca1, 0(ca1)
200413b4: 5b 85 a5 20  	csetaddr	ca0, ca1, a0
200413b8: 82 80        	cret

200413ba <cap_build(void*, unsigned int, unsigned int, unsigned int)>:
; 	ret = cheri_perms_and(ret, perms);
200413ba: 5b 05 d5 1a  	candperm	ca0, ca0, a3
; 	ret = cheri_address_set(ret, start);
200413be: 5b 05 b5 20  	csetaddr	ca0, ca0, a1
; 	ret = cheri_bounds_set(ret, len);
200413c2: 5b 05 c5 10  	csetbounds	ca0, ca0, a2
; 	return ret;
200413c6: 82 80        	cret

200413c8 <populate_caprelocs(CapReloc*, unsigned int)>:
; {
200413c8: 3d 71        	cincoffset	csp, csp, -32
200413ca: 06 ec        	csc	cra, 24(csp)
200413cc: 22 e8        	csc	cs0, 16(csp)
200413ce: 26 e4        	csc	cs1, 8(csp)
200413d0: 01 46        	mv	a2, zero
200413d2: 51 43        	addi	t1, zero, 20
200413d4: db 93 01 14  	cincoffset	ct2, cgp, 320
200413d8: db a3 83 00  	csetbounds	ct2, ct2, 8
200413dc: db 92 81 14  	cincoffset	ct0, cgp, 328
200413e0: db a2 82 00  	csetbounds	ct0, ct0, 8
;   for (unsigned int i = 0; i < n; ++i) {
200413e4: 63 8f c5 04  	beq	a1, a2, 0x20041442 <.LBB3_5>

200413e8 <.LBB3_1>:
;     void** capaddr = (void**)from_root(caprelocs[i].addr);
200413e8: b3 07 66 02  	mul	a5, a2, t1
;     if (caprelocs[i].flags & 0x80000000U) { // This is a function pointer.
200413ec: 93 86 07 01  	addi	a3, a5, 16
200413f0: db 06 d5 22  	cincoffset	ca3, ca0, a3
200413f4: 98 42        	clw	a4, 0(ca3)
;   return __builtin_cheri_address_set(globalRoot, addr);
200413f6: 83 b6 03 00  	clc	ca3, 0(ct2)
;     if (caprelocs[i].flags & 0x80000000U) { // This is a function pointer.
200413fa: 63 45 07 00  	bltz	a4, 0x20041404 <.LBB3_3>
;   return __builtin_cheri_address_set(globalRoot, addr);
200413fe: db 80 06 20  	csetaddr	cra, ca3, zero
20041402: 19 a0        	j	0x20041408 <.LBB3_4>

20041404 <.LBB3_3>:
;       cap = pccRoot;
20041404: 83 b0 02 00  	clc	cra, 0(ct0)

20041408 <.LBB3_4>:
20041408: 5b 04 f5 22  	cincoffset	cs0, ca0, a5
2004140c: 00 40        	clw	s0, 0(cs0)
;     cap = __builtin_cheri_address_set(cap, caprelocs[i].base);
2004140e: 93 84 47 00  	addi	s1, a5, 4
20041412: db 04 95 22  	cincoffset	cs1, ca0, s1
20041416: 84 40        	clw	s1, 0(cs1)
;     cap = __builtin_cheri_bounds_set(cap, caprelocs[i].len);
20041418: 13 87 c7 00  	addi	a4, a5, 12
2004141c: 5b 07 e5 22  	cincoffset	ca4, ca0, a4
20041420: 18 43        	clw	a4, 0(ca4)
;     cap = __builtin_cheri_offset_increment(cap, caprelocs[i].offset);
20041422: a1 07        	addi	a5, a5, 8
20041424: db 07 f5 22  	cincoffset	ca5, ca0, a5
20041428: 9c 43        	clw	a5, 0(ca5)
2004142a: db 86 86 20  	csetaddr	ca3, ca3, s0
;     cap = __builtin_cheri_address_set(cap, caprelocs[i].base);
2004142e: 5b 84 90 20  	csetaddr	cs0, cra, s1
;     cap = __builtin_cheri_bounds_set(cap, caprelocs[i].len);
20041432: 5b 07 e4 10  	csetbounds	ca4, cs0, a4
;     cap = __builtin_cheri_offset_increment(cap, caprelocs[i].offset);
20041436: 5b 07 f7 22  	cincoffset	ca4, ca4, a5
;     *capaddr = cap;
2004143a: 98 e2        	csc	ca4, 0(ca3)
;   for (unsigned int i = 0; i < n; ++i) {
2004143c: 05 06        	addi	a2, a2, 1
2004143e: e3 95 c5 fa  	bne	a1, a2, 0x200413e8 <.LBB3_1>

20041442 <.LBB3_5>:
; }
20041442: a2 64        	clc	cs1, 8(csp)
20041444: 42 64        	clc	cs0, 16(csp)
20041446: e2 60        	clc	cra, 24(csp)
20041448: 05 61        	cincoffset	csp, csp, 32
2004144a: 82 80        	cret

2004144c <cstart>:
; extern "C" void cstart(void *pccRootArg, void* memRootArg, void* heapCap, unsigned int heapSize, CapReloc* caprelocs, unsigned int nCaprelocs) {
2004144c: 5d 71        	cincoffset	csp, csp, -80
2004144e: 86 e4        	csc	cra, 72(csp)
20041450: a2 e0        	csc	cs0, 64(csp)
20041452: 26 fc        	csc	cs1, 56(csp)
20041454: 3e ce        	csw	a5, 28(csp)
20041456: 3a e8        	csc	ca4, 16(csp)
20041458: 36 da        	csw	a3, 52(csp)
2004145a: 32 f4        	csc	ca2, 40(csp)
2004145c: 2e e0        	csc	ca1, 0(csp)
2004145e: 2a e4        	csc	ca0, 8(csp)
; 	ptraddr_t dataROMStart = la_abs(_pcc_end);
20041460: 37 15 04 20  	lui	a0, 131137
20041464: 13 05 05 7c  	addi	a0, a0, 1984
; 	ptraddr_t dataRAMStart = la_abs(_data_start);
20041468: b7 06 0f 20  	lui	a3, 131312
2004146c: 93 86 06 00  	mv	a3, a3
; 	ptraddr_t bssRAMStart = la_abs(_bss_start);
20041470: 37 07 0f 20  	lui	a4, 131312
20041474: 13 07 c7 08  	addi	a4, a4, 140
; 	size_t sz = la_abs(_data_end) - dataRAMStart;
20041478: 37 06 0f 20  	lui	a2, 131312
2004147c: 13 06 c6 08  	addi	a2, a2, 140
20041480: 15 8e        	sub	a2, a2, a3
; 	size_t bssSz = la_abs(_bss_end) - la_abs(_bss_start);
20041482: b7 04 0f 20  	lui	s1, 131312
20041486: 93 84 84 2b  	addi	s1, s1, 696
2004148a: b7 07 0f 20  	lui	a5, 131312
2004148e: 93 87 c7 08  	addi	a5, a5, 140
20041492: 9d 8c        	sub	s1, s1, a5
20041494: 93 07 40 06  	addi	a5, zero, 100
; 	ret = cheri_perms_and(ret, perms);
20041498: db 87 f5 1a  	candperm	ca5, ca1, a5
; 	ret = cheri_address_set(ret, start);
2004149c: 3e f0        	csc	ca5, 32(csp)
2004149e: 5b 85 a7 20  	csetaddr	ca0, ca5, a0
; 	ret = cheri_bounds_set(ret, len);
200414a2: db 05 c5 10  	csetbounds	ca1, ca0, a2
; 	ret = cheri_address_set(ret, start);
200414a6: 5b 85 d7 20  	csetaddr	ca0, ca5, a3
; 	ret = cheri_bounds_set(ret, len);
200414aa: 5b 05 c5 10  	csetbounds	ca0, ca0, a2
; 	ret = cheri_address_set(ret, start);
200414ae: db 86 e7 20  	csetaddr	ca3, ca5, a4
; 	ret = cheri_bounds_set(ret, len);
200414b2: 5b 84 96 10  	csetbounds	cs0, ca3, s1
; 	memcpy(dataRAM, dataROM, sz);
200414b6: 9d 34        	cjal	0x20040f1c <memcpy(void*, void const*, unsigned int)>
; 	memset(bssRAM, 0, bssSz);
200414b8: 5b 05 a4 fe  	cmove	ca0, cs0
200414bc: 81 45        	mv	a1, zero
200414be: 26 86        	mv	a2, s1
200414c0: d5 3c        	cjal	0x20040fb4 <memset(void*, int, unsigned int)>
;   pccRoot = pccRootArg;
200414c2: 5b 95 81 14  	cincoffset	ca0, cgp, 328
200414c6: 5b 25 85 00  	csetbounds	ca0, ca0, 8
200414ca: a2 65        	clc	ca1, 8(csp)
200414cc: 0c e1        	csc	ca1, 0(ca0)
;   globalRoot = memRootArg;
200414ce: 5b 94 01 14  	cincoffset	cs0, cgp, 320
200414d2: 5b 24 84 00  	csetbounds	cs0, cs0, 8
200414d6: 02 65        	clc	ca0, 0(csp)
200414d8: 08 e0        	csc	ca0, 0(cs0)
;   populate_caprelocs(caprelocs, nCaprelocs);
200414da: 42 65        	clc	ca0, 16(csp)
200414dc: f2 45        	clw	a1, 28(csp)
200414de: ed 35        	cjal	0x200413c8 <populate_caprelocs(CapReloc*, unsigned int)>
;   return __builtin_cheri_address_set(globalRoot, addr);
200414e0: 08 60        	clc	ca0, 0(cs0)
200414e2: b7 05 00 21  	lui	a1, 135168
200414e6: 5b 06 b5 20  	csetaddr	ca2, ca0, a1
;   simReg  = (volatile unsigned int*)from_root(0x21000000U);
200414ea: db 96 01 12  	cincoffset	ca3, cgp, 288
200414ee: db a6 86 00  	csetbounds	ca3, ca3, 8
200414f2: 90 e2        	csc	ca2, 0(ca3)
200414f4: 13 86 05 10  	addi	a2, a1, 256
;   return __builtin_cheri_address_set(globalRoot, addr);
200414f8: 5b 06 c5 20  	csetaddr	ca2, ca0, a2
;   tmrReg  = (volatile unsigned int*)from_root(0x21000100U);
200414fc: db 96 81 11  	cincoffset	ca3, cgp, 280
20041500: db a6 86 00  	csetbounds	ca3, ca3, 8
20041504: 90 e2        	csc	ca2, 0(ca3)
20041506: 13 86 05 20  	addi	a2, a1, 512
;   return __builtin_cheri_address_set(globalRoot, addr);
2004150a: 5b 06 c5 20  	csetaddr	ca2, ca0, a2
;   uartReg = (volatile unsigned char*)from_root(0x21000200U);
2004150e: db 96 01 11  	cincoffset	ca3, cgp, 272
20041512: db a6 86 00  	csetbounds	ca3, ca3, 8
20041516: 90 e2        	csc	ca2, 0(ca3)
20041518: 13 86 05 30  	addi	a2, a1, 768
;   return __builtin_cheri_address_set(globalRoot, addr);
2004151c: 5b 06 c5 20  	csetaddr	ca2, ca0, a2
;   rngReg  = (volatile unsigned int*)from_root(0x21000300U);
20041520: db 96 81 12  	cincoffset	ca3, cgp, 296
20041524: db a6 86 00  	csetbounds	ca3, ca3, 8
20041528: 90 e2        	csc	ca2, 0(ca3)
2004152a: 93 85 05 40  	addi	a1, a1, 1024
;   return __builtin_cheri_address_set(globalRoot, addr);
2004152e: db 05 b5 20  	csetaddr	ca1, ca0, a1
;   cfgReg  = (volatile unsigned int*)from_root(0x21000400U);
20041532: 5b 96 01 13  	cincoffset	ca2, cgp, 304
20041536: 5b 26 86 00  	csetbounds	ca2, ca2, 8
2004153a: 0c e2        	csc	ca1, 0(ca2)
2004153c: b7 15 01 20  	lui	a1, 131089
;   return __builtin_cheri_address_set(globalRoot, addr);
20041540: 5b 05 b5 20  	csetaddr	ca0, ca0, a1
;   memRands = (volatile unsigned int*)from_root(0x20011000U);
20041544: db 95 81 13  	cincoffset	ca1, cgp, 312
20041548: db a5 85 00  	csetbounds	ca1, ca1, 8
2004154c: 88 e1        	csc	ca0, 0(ca1)
;   malloc_init(heapCap, heapSize);
2004154e: 22 75        	clc	ca0, 40(csp)
20041550: d2 55        	clw	a1, 52(csp)
20041552: ef e0 ff f5  	cjal	0x200404b0 <malloc_init(void*, unsigned int)>
20041556: 37 b5 00 8f  	lui	a0, 585739
; 	ret = cheri_address_set(ret, start);
2004155a: 82 75        	clc	ca1, 32(csp)
2004155c: 5b 85 a5 20  	csetaddr	ca0, ca1, a0
20041560: 85 65        	lui	a1, 1
; 	ret = cheri_bounds_set(ret, len);
20041562: 5b 05 b5 10  	csetbounds	ca0, ca0, a1
20041566: b7 35 31 01  	lui	a1, 4883
2004156a: 93 85 05 d0  	addi	a1, a1, -768
2004156e: 71 66        	lui	a2, 28
20041570: 13 06 06 20  	addi	a2, a2, 512
; 	uart_init(cap_build(memRootArg, UART_ADDR, 0x1000, memoryPerms), XTAL_FREQ, BAUDRATE);
20041574: 8d 46        	addi	a3, zero, 3
20041576: 01 47        	mv	a4, zero
20041578: 81 47        	mv	a5, zero
2004157a: 45 28        	cjal	0x2004162a <uart_init(void*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>
; 	int retval = main();
2004157c: 11 20        	cjal	0x20041580 <main>
; 	_exit(retval);
2004157e: 29 3d        	cjal	0x20041398 <__cxa_pure_virtual>

20041580 <main>:
; int main () {
20041580: 7d 71        	cincoffset	csp, csp, -16
;   printf("Cheri STDIN test starting..\n");
20041582: 06 e4        	csc	cra, 8(csp)

20041584 <.LBB0_1>:
20041584: 97 05 00 00  	auipcc	ca1, 0
20041588: db 95 45 16  	cincoffset	ca1, ca1, 356
2004158c: db a5 d5 01  	csetbounds	ca1, ca1, 29
20041590: 5b 15 10 00  	cincoffset	ca0, cnull, 1
20041594: ef f0 0f ed  	cjal	0x20040c64 <cfprintf(unsigned int**, char const*, ...)>
;   cheri_stdin_test(0);
20041598: 01 45        	mv	a0, zero
2004159a: ef e0 df bf  	cjal	0x20040196 <cheri_stdin_test>
; }
2004159e: 01 45        	mv	a0, zero
200415a0: a2 60        	clc	cra, 8(csp)
200415a2: 41 61        	cincoffset	csp, csp, 16
200415a4: 82 80        	cret
200415a6: 00 00        	unimp	

200415a8 <getLock(unsigned long*)>:
;     return;
200415a8: 82 80        	cret

200415aa <releaseLock(unsigned long*)>:
;     return;
200415aa: 82 80        	cret

200415ac <_flush(int)>:
; MY_EXTERN_C void _flush(int fd) {
200415ac: 5b 95 01 15  	cincoffset	ca0, cgp, 336
200415b0: 5b 25 85 00  	csetbounds	ca0, ca0, 8
200415b4: 08 61        	clc	ca0, 0(ca0)

200415b6 <.LBB2_1>:
;     while ((UartBasePtr->LSR.THRE == 0) || (UartBasePtr->LSR.TEMT == 0)){
200415b6: 4c 49        	clw	a1, 20(ca0)
200415b8: 93 f5 05 02  	andi	a1, a1, 32
200415bc: ed dd        	beqz	a1, 0x200415b6 <.LBB2_1>
200415be: 4c 49        	clw	a1, 20(ca0)
200415c0: 93 f5 05 04  	andi	a1, a1, 64
200415c4: ed d9        	beqz	a1, 0x200415b6 <.LBB2_1>
; }
200415c6: 82 80        	cret

200415c8 <_write(int, char const*, int)>:
; MY_EXTERN_C int _write(int fd, const char* data, int size) {
200415c8: 32 85        	mv	a0, a2
200415ca: db 96 01 15  	cincoffset	ca3, cgp, 336
200415ce: db a6 86 00  	csetbounds	ca3, ca3, 8
;     for(int i = 0; i<size; i++) {
200415d2: 63 43 c0 00  	bgtz	a2, 0x200415d8 <.LBB3_2>
200415d6: 01 46        	mv	a2, zero

200415d8 <.LBB3_2>:
200415d8: 94 62        	clc	ca3, 0(ca3)
200415da: 01 47        	mv	a4, zero
;     for(int i = 0; i<size; i++) {
200415dc: 63 0e c7 00  	beq	a4, a2, 0x200415f8 <.LBB3_5>

200415e0 <.LBB3_3>:
;         while (UartBasePtr->LSR.THRE == 0){
200415e0: dc 4a        	clw	a5, 20(ca3)
200415e2: 93 f7 07 02  	andi	a5, a5, 32
200415e6: ed df        	beqz	a5, 0x200415e0 <.LBB3_3>
; 	    UartBasePtr->THR = data[i];
200415e8: db 87 e5 22  	cincoffset	ca5, ca1, a4
200415ec: 83 c7 07 00  	clbu	a5, 0(ca5)
200415f0: 9c c2        	csw	a5, 0(ca3)
;     for(int i = 0; i<size; i++) {
200415f2: 05 07        	addi	a4, a4, 1
200415f4: e3 16 c7 fe  	bne	a4, a2, 0x200415e0 <.LBB3_3>

200415f8 <.LBB3_5>:
;     return size;
200415f8: 82 80        	cret

200415fa <_read(int, char*, int)>:
; MY_EXTERN_C int _read(int fd, char* data, int size) {
200415fa: 32 85        	mv	a0, a2
200415fc: 5b 96 01 15  	cincoffset	ca2, cgp, 336
20041600: 5b 26 86 00  	csetbounds	ca2, ca2, 8
;     for(cnt=0;cnt<size;cnt++) {
20041604: 63 43 a0 00  	bgtz	a0, 0x2004160a <.LBB4_2>
20041608: 01 45        	mv	a0, zero

2004160a <.LBB4_2>:
2004160a: 10 62        	clc	ca2, 0(ca2)
2004160c: 81 46        	mv	a3, zero
;     for(cnt=0;cnt<size;cnt++) {
2004160e: 63 8d a6 00  	beq	a3, a0, 0x20041628 <.LBB4_5>

20041612 <.LBB4_3>:
;         while(!(UartBasePtr->LSR.DR)) { continue; }
20041612: 58 4a        	clw	a4, 20(ca2)
20041614: 05 8b        	andi	a4, a4, 1
20041616: 75 df        	beqz	a4, 0x20041612 <.LBB4_3>
;         data[cnt] = (char)UartBasePtr->RBR;
20041618: 18 42        	clw	a4, 0(ca2)
2004161a: db 87 d5 22  	cincoffset	ca5, ca1, a3
2004161e: 23 80 e7 00  	csb	a4, 0(ca5)
;     for(cnt=0;cnt<size;cnt++) {
20041622: 85 06        	addi	a3, a3, 1
20041624: e3 97 a6 fe  	bne	a3, a0, 0x20041612 <.LBB4_3>

20041628 <.LBB4_5>:
;     return cnt;
20041628: 82 80        	cret

2004162a <uart_init(void*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>:
; ) {
2004162a: 3d 71        	cincoffset	csp, csp, -32
;     UartBasePtr = (PMSFT_UART_16550_t)addr;
2004162c: 06 ec        	csc	cra, 24(csp)
2004162e: db 92 01 15  	cincoffset	ct0, cgp, 336
20041632: db a2 82 00  	csetbounds	ct0, ct0, 8
20041636: 23 b0 a2 00  	csc	ca0, 0(ct0)

2004163a <.LBB5_1>:
;     while (UartBasePtr->LSR.TEMT != 1 || UartBasePtr->LSR.THRE != 1);
2004163a: 83 22 45 01  	clw	t0, 20(ca0)
2004163e: 93 f2 02 04  	andi	t0, t0, 64
20041642: e3 8c 02 fe  	beqz	t0, 0x2004163a <.LBB5_1>
20041646: 83 22 45 01  	clw	t0, 20(ca0)
2004164a: 93 f2 02 02  	andi	t0, t0, 32
2004164e: e3 86 02 fe  	beqz	t0, 0x2004163a <.LBB5_1>
;     lcr.AsUINT32 = 0;
20041652: 02 ca        	csw	zero, 20(csp)
;     lcr.DLAB = 1;
20041654: d2 42        	clw	t0, 20(csp)
20041656: 93 e2 02 08  	ori	t0, t0, 128
2004165a: 16 ca        	csw	t0, 20(csp)
;     lcr.STOP = stop;
2004165c: d2 42        	clw	t0, 20(csp)
2004165e: 8a 07        	slli	a5, a5, 2
20041660: 13 f3 47 00  	andi	t1, a5, 4
20041664: 93 f7 b2 ff  	andi	a5, t0, -5
20041668: b3 e7 67 00  	or	a5, a5, t1
2004166c: 3e ca        	csw	a5, 20(csp)
;     lcr.PEN = parity;
2004166e: d2 47        	clw	a5, 20(csp)
20041670: 0e 07        	slli	a4, a4, 3
20041672: 21 8b        	andi	a4, a4, 8
20041674: dd 9b        	andi	a5, a5, -9
20041676: 5d 8f        	or	a4, a4, a5
20041678: 3a ca        	csw	a4, 20(csp)
;     lcr.DLS = word_size;
2004167a: 52 47        	clw	a4, 20(csp)
2004167c: 8d 8a        	andi	a3, a3, 3
2004167e: 71 9b        	andi	a4, a4, -4
20041680: d9 8e        	or	a3, a3, a4
20041682: 36 ca        	csw	a3, 20(csp)
;     UartBasePtr->LCR.AsUINT32 = lcr.AsUINT32;
20041684: d2 46        	clw	a3, 20(csp)
20041686: 54 c5        	csw	a3, 12(ca0)
;     baudxdiv = 16*baudrate;
20041688: 12 06        	slli	a2, a2, 4
;     br_int = xtal_freq/(16*baudrate);
2004168a: b3 d6 c5 02  	divu	a3, a1, a2
2004168e: 33 87 c6 02  	mul	a4, a3, a2
20041692: 99 8d        	sub	a1, a1, a4
;     rem = ((xtal_freq % baudxdiv) <<(FRAC_BRG_BITS+1))/baudxdiv;
20041694: 96 05        	slli	a1, a1, 5
20041696: b3 d5 c5 02  	divu	a1, a1, a2
;     rem = (rem>>1) + (rem&0x1);
2004169a: 13 d6 15 00  	srli	a2, a1, 1
2004169e: 85 89        	andi	a1, a1, 1
200416a0: b2 95        	add	a1, a1, a2
;     UartBasePtr->DLF = rem;
200416a2: 4c d1        	csw	a1, 36(ca0)
;     UartBasePtr->DLL = (br_int>>0)&0xff;
200416a4: 93 f5 f6 0f  	andi	a1, a3, 255
200416a8: 0c c1        	csw	a1, 0(ca0)
;     UartBasePtr->DLH = (br_int>>8)&0xff;
200416aa: 93 d5 86 00  	srli	a1, a3, 8
200416ae: 93 f5 f5 0f  	andi	a1, a1, 255
200416b2: 4c c1        	csw	a1, 4(ca0)
;     lcr.DLAB = 0;
200416b4: d2 45        	clw	a1, 20(csp)
200416b6: 93 f5 f5 f7  	andi	a1, a1, -129
200416ba: 2e ca        	csw	a1, 20(csp)
;     UartBasePtr->LCR.AsUINT32 = lcr.AsUINT32;
200416bc: d2 45        	clw	a1, 20(csp)
200416be: 4c c5        	csw	a1, 12(ca0)
;     fcr.AsUINT32 = 0;
200416c0: 02 c8        	csw	zero, 16(csp)
;     fcr.FIFOE = 1;
200416c2: c2 45        	clw	a1, 16(csp)
200416c4: 93 e5 15 00  	ori	a1, a1, 1
200416c8: 2e c8        	csw	a1, 16(csp)
;     UartBasePtr->FCR.AsUINT32 = fcr.AsUINT32;
200416ca: c2 45        	clw	a1, 16(csp)
200416cc: 0c c5        	csw	a1, 8(ca0)
200416ce: 13 05 00 02  	addi	a0, zero, 32
;     const char space = ' ';
200416d2: a3 07 a1 00  	csb	a0, 15(csp)
200416d6: 5b 15 f1 00  	cincoffset	ca0, csp, 15
200416da: db 25 15 00  	csetbounds	ca1, ca0, 1
;     _write(1,&space,1);
200416de: 05 46        	addi	a2, zero, 1
200416e0: e5 35        	cjal	0x200415c8 <_write(int, char const*, int)>
; }
200416e2: e2 60        	clc	cra, 24(csp)
200416e4: 05 61        	cincoffset	csp, csp, 32
200416e6: 82 80        	cret

200416e8 <_rodata_start>:
200416e8: 43 68 65 72  	<unknown>
200416ec: 69 20        	cjal	0x20041776 <_rodata_start+0x8e>
200416ee: 53 54 44 49  	<unknown>
200416f2: 4e 20        	<unknown>
200416f4: 74 65        	clc	ca3, 200(ca0)
200416f6: 73 74 20 73  	csrrci	s0, 1842, 0
200416fa: 74 61        	clc	ca3, 192(ca0)
200416fc: 72 74        	clc	cs0, 312(csp)
200416fe: 69 6e        	<unknown>
20041700: 67 2e 2e 0a  	<unknown>
20041704: 00 45        	clw	s0, 8(ca0)
20041706: 72 72        	clc	ctp, 312(csp)
20041708: 6f 72 2e 2e  	cjal	ctp, 0x201289ea <_heap_start+0x3872a>
2004170c: 2e 55        	clw	a0, 232(csp)
2004170e: 6e 68        	<unknown>
20041710: 61 6e        	<unknown>
20041712: 64 6c        	clc	cs1, 216(cs0)
20041714: 65 64        	lui	s0, 25
20041716: 20 45        	clw	s0, 72(ca0)
20041718: 78 63        	clc	ca4, 192(ca4)
2004171a: 65 70        	c.lui	zero, -7
2004171c: 74 69        	clc	ca3, 208(ca0)
2004171e: 6f 6e 28 25  	<unknown>
20041722: 64 29        	<unknown>
20041724: 2e 20        	<unknown>
20041726: 45 78        	<unknown>
20041728: 69 74        	lui	s0, 1048570
2004172a: 69 6e        	<unknown>
2004172c: 67 20 74 65  	<unknown>
20041730: 73 74 0a 00  	csrrci	s0, ustatus, 20
20041734: 3d 3d        	cjal	0x20041572 <cstart+0x126>
20041736: 3d 3d        	cjal	0x20041574 <cstart+0x128>
20041738: 3d 3d        	cjal	0x20041576 <cstart+0x12a>
2004173a: 3d 3d        	cjal	0x20041578 <cstart+0x12c>
2004173c: 3d 3d        	cjal	0x2004157a <cstart+0x12e>
2004173e: 3d 3d        	cjal	0x2004157c <cstart+0x130>
20041740: 3d 3d        	cjal	0x2004157e <cstart+0x132>
20041742: 3d 3d        	cjal	0x20041580 <main>
20041744: 3d 3d        	cjal	0x20041582 <main+0x2>
20041746: 3d 3d        	cjal	0x20041584 <.LBB0_1>
20041748: 3d 3d        	cjal	0x20041586 <.LBB0_1+0x2>
2004174a: 3d 3d        	cjal	0x20041588 <.LBB0_1+0x4>
2004174c: 3d 3d        	cjal	0x2004158a <.LBB0_1+0x6>
2004174e: 3d 3d        	cjal	0x2004158c <.LBB0_1+0x8>
20041750: 3d 3d        	cjal	0x2004158e <.LBB0_1+0xa>
20041752: 3d 3d        	cjal	0x20041590 <.LBB0_1+0xc>
20041754: 3d 3d        	cjal	0x20041592 <.LBB0_1+0xe>
20041756: 3d 3d        	cjal	0x20041594 <.LBB0_1+0x10>
20041758: 3d 3d        	cjal	0x20041596 <.LBB0_1+0x12>
2004175a: 3d 3d        	cjal	0x20041598 <.LBB0_1+0x14>
2004175c: 3d 3d        	cjal	0x2004159a <.LBB0_1+0x16>
2004175e: 3d 3d        	cjal	0x2004159c <.LBB0_1+0x18>
20041760: 3d 3d        	cjal	0x2004159e <.LBB0_1+0x1a>
20041762: 3d 3d        	cjal	0x200415a0 <.LBB0_1+0x1c>
20041764: 3d 3d        	cjal	0x200415a2 <.LBB0_1+0x1e>
20041766: 3d 0a        	<unknown>
20041768: 00 25        	<unknown>
2004176a: 73 20 77 6f  	csrs	1783, a4
2004176e: 72 64        	clc	cs0, 280(csp)
20041770: 20 25        	<unknown>
20041772: 64 20        	<unknown>
20041774: 69 73        	lui	t1, 1048570
20041776: 20 30        	<unknown>
20041778: 78 25        	<unknown>
2004177a: 30 38        	<unknown>
2004177c: 78 0a        	cincoffset	ca4, csp, 284
2004177e: 00 20        	<unknown>
20041780: 53 74 61 72  	<unknown>
20041784: 74 69        	clc	ca3, 208(ca0)
20041786: 6e 67        	clc	ca4, 216(csp)
20041788: 20 54        	clw	s0, 104(cs0)
2004178a: 65 73        	lui	t1, 1048569
2004178c: 74 20        	<unknown>
2004178e: 25 73        	lui	t1, 1048553
20041790: 0a 00        	c.slli	zero, 2

20041792 <HexTable>:
20041792: 30 31 32 33 34 35 36 37         01234567
2004179a: 38 39 61 62 63 64 65 66         89abcdef
200417a2: 30 31 32 33 34 35 36 37         01234567
200417aa: 38 39 41 42 43 44 45 46         89ABCDEF

200417b2 <_rodata_end>:
		...
200417be: 00 00        	unimp	
