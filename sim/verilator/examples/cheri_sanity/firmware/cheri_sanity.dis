
/home/kunyanliu/riscdev/new_fpga/out/run/cheri/cheri_sanity/default/default/firmware/cpu0/cheri_sanity.elf:	file format elf32-littleriscv
architecture: riscv32
start address: 0x20040080

Program Header:
    LOAD off    0x00001000 vaddr 0x20040000 paddr 0x20040000 align 2**12
         filesz 0x00000188 memsz 0x00000188 flags rwx
    LOAD off    0x00001190 vaddr 0x20040190 paddr 0x20040190 align 2**12
         filesz 0x00001b70 memsz 0x00001b70 flags r-x
    LOAD off    0x00003000 vaddr 0x200f0000 paddr 0x20041d00 align 2**12
         filesz 0x000002c0 memsz 0x000002c0 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**64
         filesz 0x00000000 memsz 0x00000000 flags rw-

Dynamic Section:

Sections:
Idx Name              Size     VMA      LMA      Type
  0                   00000000 00000000 00000000 
  1 .init             00000188 20040000 20040000 TEXT
  2 __cap_relocs      00000000 20040188 20040188 DATA
  3 .text             00001b70 20040190 20040190 TEXT
  4 .data             000002c0 200f0000 20041d00 DATA
  5 .debug_info       000038ed 00000000 00000000 DEBUG
  6 .debug_abbrev     000018a6 00000000 00000000 DEBUG
  7 .debug_aranges    00000040 00000000 00000000 DEBUG
  8 .debug_line       00003c25 00000000 00000000 DEBUG
  9 .debug_loc        0000225b 00000000 00000000 DEBUG
 10 .debug_str        00001a2c 00000000 00000000 DEBUG
 11 .comment          000000e7 00000000 00000000 
 12 .riscv.attributes 00000030 00000000 00000000 
 13 .debug_frame      000007d0 00000000 00000000 DEBUG
 14 .debug_ranges     00000068 00000000 00000000 DEBUG
 15 .symtab           0000a290 00000000 00000000 
 16 .shstrtab         000000bb 00000000 00000000 
 17 .strtab           00000ba7 00000000 00000000 

SYMBOL TABLE:
20040080 l       .init	00000000 
20040080 l       .init	00000000 
00000000 l       .debug_info	00000000 
00000000 l       .debug_abbrev	00000000 
20040188 l       .init	00000000 
00000000 l       .debug_line	00000000 .Lline_table_start0
20040190 l       .text	00000000 
20040190 l       .text	00000000 
20040194 l       .text	00000000 
200401a0 l       .text	00000000 cheri_fault_handler
200401a0 l       .text	00000000 
200401a0 l       .text	00000000 
200401c0 l       .text	00000000 isr_n1
200401e2 l       .text	00000000 isr_done
200401be l       .text	00000000 
200401c0 l       .text	00000000 
200401c0 l       .text	00000000 
200401d0 l       .text	00000000 isr_n2
200401ce l       .text	00000000 
200401d0 l       .text	00000000 
200401d0 l       .text	00000000 
200401e0 l       .text	00000000 
200401e2 l       .text	00000000 
200401e2 l       .text	00000000 
200401f0 l       .text	00000000 
200401fc l       .text	00000000 .Ltmp0
20040254 l       .text	00000000 
20040298 l       .text	00000000 sw_intr_fail
2004029e l       .text	00000000 sw_intr_done
20040296 l       .text	00000000 
20040298 l       .text	00000000 
20040298 l       .text	00000000 
2004029c l       .text	00000000 
2004029e l       .text	00000000 
2004029e l       .text	00000000 
200402ba l       .text	00000000 
20040310 l       .text	00000000 tmr_intr_fail
20040316 l       .text	00000000 tmr_intr_done
2004030e l       .text	00000000 
20040310 l       .text	00000000 
20040310 l       .text	00000000 
20040314 l       .text	00000000 
20040316 l       .text	00000000 
20040316 l       .text	00000000 
20040332 l       .text	00000000 
20040390 l       .text	00000000 tsafe_fail1
2004036e l       .text	00000000 
20040370 l       .text	00000000 
20040396 l       .text	00000000 tsafe_fail2
2004038a l       .text	00000000 
2004038c l       .text	00000000 
2004039c l       .text	00000000 tsafe_done
2004038e l       .text	00000000 
20040390 l       .text	00000000 
20040390 l       .text	00000000 
20040394 l       .text	00000000 
20040396 l       .text	00000000 
20040396 l       .text	00000000 
2004039a l       .text	00000000 
2004039c l       .text	00000000 
2004039c l       .text	00000000 
200403b2 l       .text	00000000 
200403ea l       .text	00000000 tbre_init
200403ea l       .text	00000000 
200403f2 l       .text	00000000 
200403f4 l       .text	00000000 
20040480 l       .text	00000000 tbre_fail1
20040486 l       .text	00000000 tbre_fail2
20040460 l       .text	00000000 
20040462 l       .text	00000000 
2004048c l       .text	00000000 tbre_fail3
2004047a l       .text	00000000 
2004047c l       .text	00000000 
20040492 l       .text	00000000 tbre_done
2004047e l       .text	00000000 
20040480 l       .text	00000000 
20040480 l       .text	00000000 
20040484 l       .text	00000000 
20040486 l       .text	00000000 
20040486 l       .text	00000000 
2004048a l       .text	00000000 
2004048c l       .text	00000000 
2004048c l       .text	00000000 
20040490 l       .text	00000000 
20040492 l       .text	00000000 
20040492 l       .text	00000000 
200404a8 l       .text	00000000 
200404d6 l       .text	00000000 fill_stack
200404d6 l       .text	00000000 
2004056c l       .text	00000000 stkclr_fail
20040548 l       .text	00000000 
2004054a l       .text	00000000 
2004055e l       .text	00000000 chk_clr
2004055e l       .text	00000000 
20040564 l       .text	00000000 
20040566 l       .text	00000000 
20040572 l       .text	00000000 stkclr_done
2004056a l       .text	00000000 
2004056c l       .text	00000000 
2004056c l       .text	00000000 
20040570 l       .text	00000000 
20040572 l       .text	00000000 
20040572 l       .text	00000000 
00000157 l       .debug_info	00000000 
00000021 l       .debug_abbrev	00000000 
20040588 l       .text	00000000 
000000cf l       .debug_line	00000000 .Lline_table_start0
00000000 l    df *ABS*	00000000 isctype.cc
20040588 l       .text	00000000 
20040588 l       .text	00000000 
20040588 l       .text	00000000 
20040588 l       .text	00000000 
20040594 l       .text	00000000 
20040598 l       .text	00000000 
2004059a l       .text	00000000 
2004059c l       .text	00000000 
2004059c l       .text	00000000 
00000000 l       .debug_loc	00000000 
0000030f l       .debug_line	00000000 .Lline_table_start0
00000000 l       .debug_frame	00000000 
2004059c l       .text	00000000 
00000000 l    df *ABS*	00000000 realloc.cc
2004059c l       .text	00000000 
2004059c l       .text	00000000 
2004059c l       .text	00000000 
2004059e l       .text	00000000 
200405a4 l       .text	00000000 
200405a6 l       .text	00000000 
200405aa l       .text	00000000 
200405b2 l       .text	00000000 .LBB0_2
200405aa l       .text	00000000 
200405ac l       .text	00000000 
200405b2 l       .text	00000000 
200405b2 l       .text	00000000 
200405b6 l       .text	00000000 
200405b6 l       .text	00000000 
200405be l       .text	00000000 
200405e0 l       .text	00000000 .LBB0_6
200405c2 l       .text	00000000 
200405c2 l       .text	00000000 
200405cc l       .text	00000000 .LBB0_5
200405ca l       .text	00000000 
200405cc l       .text	00000000 
200405cc l       .text	00000000 
200405d8 l       .text	00000000 
200405d8 l       .text	00000000 
200405de l       .text	00000000 
200405de l       .text	00000000 
200405e0 l       .text	00000000 
200405e0 l       .text	00000000 
200405e4 l       .text	00000000 
200405ea l       .text	00000000 
200405ea l       .text	00000000 
00000013 l       .debug_loc	00000000 
00000031 l       .debug_loc	00000000 
0000004f l       .debug_loc	00000000 
00000062 l       .debug_loc	00000000 
00000077 l       .debug_loc	00000000 
000003a9 l       .debug_line	00000000 .Lline_table_start0
00000024 l       .debug_frame	00000000 
200405ea l       .text	00000000 
00000000 l    df *ABS*	00000000 strtoul.cc
200405ec l       .text	00000000 
200405ec l       .text	00000000 
200405ec l       .text	00000000 
200405ee l       .text	00000000 
200405ee l       .text	00000000 
200405f4 l       .text	00000000 
200405f4 l       .text	00000000 
200405f6 l       .text	00000000 
200405f8 l       .text	00000000 
200405fa l       .text	00000000 
200405fe l       .text	00000000 
200405fe l       .text	00000000 .LBB0_1
20040602 l       .text	00000000 
20040602 l       .text	00000000 
20040606 l       .text	00000000 
20040606 l       .text	00000000 
2004060a l       .text	00000000 
2004060a l       .text	00000000 
2004060c l       .text	00000000 
20040612 l       .text	00000000 
20040612 l       .text	00000000 
20040614 l       .text	00000000 
20040614 l       .text	00000000 
20040616 l       .text	00000000 
20040630 l       .text	00000000 .LBB0_5
2004061a l       .text	00000000 
2004061e l       .text	00000000 
2004063c l       .text	00000000 .LBB0_7
20040628 l       .text	00000000 
2004062c l       .text	00000000 
20040634 l       .text	00000000 .LBB0_6
20040638 l       .text	00000000 
2004063c l       .text	00000000 
2004063c l       .text	00000000 
20040664 l       .text	00000000 .LBB0_10
2004064a l       .text	00000000 
2004064e l       .text	00000000 
2004064e l       .text	00000000 
2004067a l       .text	00000000 .LBB0_12
2004065a l       .text	00000000 
2004065e l       .text	00000000 
20040662 l       .text	00000000 
20040664 l       .text	00000000 
20040668 l       .text	00000000 
2004067e l       .text	00000000 .LBB0_13
2004066c l       .text	00000000 
20040670 l       .text	00000000 
20040672 l       .text	00000000 
2004068a l       .text	00000000 .LBB0_14
20040676 l       .text	00000000 
2004068c l       .text	00000000 .LBB0_15
2004067a l       .text	00000000 
2004067a l       .text	00000000 
2004067e l       .text	00000000 
2004067e l       .text	00000000 
20040680 l       .text	00000000 
20040688 l       .text	00000000 
2004068a l       .text	00000000 
2004068c l       .text	00000000 
20040694 l       .text	00000000 
20040698 l       .text	00000000 
20040698 l       .text	00000000 
2004069a l       .text	00000000 
200406a2 l       .text	00000000 
200406a4 l       .text	00000000 
200406a4 l       .text	00000000 .LBB0_16
200406a4 l       .text	00000000 
200406a8 l       .text	00000000 
200406aa l       .text	00000000 
200406b2 l       .text	00000000 .LBB0_18
200406aa l       .text	00000000 
200406ac l       .text	00000000 
200406b0 l       .text	00000000 
200406d0 l       .text	00000000 .LBB0_22
200406b0 l       .text	00000000 
200406b2 l       .text	00000000 
200406b2 l       .text	00000000 
200406ba l       .text	00000000 
2004071c l       .text	00000000 .LBB0_28
200406ba l       .text	00000000 
200406bc l       .text	00000000 
200406c2 l       .text	00000000 
200406c2 l       .text	00000000 
200406cc l       .text	00000000 .LBB0_21
200406c6 l       .text	00000000 
200406c8 l       .text	00000000 
200406cc l       .text	00000000 
200406d0 l       .text	00000000 
200406d0 l       .text	00000000 
200406d6 l       .text	00000000 
200406dc l       .text	00000000 
200406dc l       .text	00000000 
200406e2 l       .text	00000000 
200406ec l       .text	00000000 .LBB0_25
200406e8 l       .text	00000000 
2004070a l       .text	00000000 .LBB0_27
200406ec l       .text	00000000 
200406fa l       .text	00000000 
20040700 l       .text	00000000 
20040700 l       .text	00000000 
20040706 l       .text	00000000 
20040706 l       .text	00000000 
20040708 l       .text	00000000 
2004070a l       .text	00000000 
2004070c l       .text	00000000 
2004070e l       .text	00000000 
20040712 l       .text	00000000 
20040716 l       .text	00000000 
20040716 l       .text	00000000 
20040718 l       .text	00000000 
2004071a l       .text	00000000 
2004071c l       .text	00000000 
2004072e l       .text	00000000 .LBB0_32
20040720 l       .text	00000000 
20040722 l       .text	00000000 
2004072c l       .text	00000000 .LBB0_31
20040724 l       .text	00000000 
20040726 l       .text	00000000 
2004072c l       .text	00000000 
2004072e l       .text	00000000 
20040732 l       .text	00000000 
20040738 l       .text	00000000 .LBB0_34
20040734 l       .text	00000000 
2004073e l       .text	00000000 .LBB0_36
20040738 l       .text	00000000 
2004073c l       .text	00000000 
2004073e l       .text	00000000 
2004073e l       .text	00000000 
20040744 l       .text	00000000 
2004074a l       .text	00000000 
2004074a l       .text	00000000 
0000008a l       .debug_loc	00000000 
000000a9 l       .debug_loc	00000000 
000000c8 l       .debug_loc	00000000 
0000010a l       .debug_loc	00000000 
00000190 l       .debug_loc	00000000 
000001a5 l       .debug_loc	00000000 
0000020b l       .debug_loc	00000000 
0000022a l       .debug_loc	00000000 
0000026d l       .debug_loc	00000000 
000002af l       .debug_loc	00000000 
00000522 l       .debug_line	00000000 .Lline_table_start0
00000054 l       .debug_frame	00000000 
2004074a l       .text	00000000 
00000000 l    df *ABS*	00000000 free.cc
2004074c l       .text	00000000 
2004074c l       .text	00000000 
2004074c l       .text	00000000 
2004074e l       .text	00000000 
20040754 l       .text	00000000 
20040758 l       .text	00000000 
20040758 l       .text	00000000 
2004080a l       .text	00000000 .LBB0_9
20040762 l       .text	00000000 
20040766 l       .text	00000000 
20040778 l       .text	00000000 
20040778 l       .text	00000000 
2004077c l       .text	00000000 
20040780 l       .text	00000000 
2004078a l       .text	00000000 
2004079c l       .text	00000000 .LBB0_4
2004078a l       .text	00000000 
2004078e l       .text	00000000 
20040798 l       .text	00000000 
2004079c l       .text	00000000 
200407a0 l       .text	00000000 
200407dc l       .text	00000000 .LBB0_6
200407a6 l       .text	00000000 
200407a8 l       .text	00000000 
200407ac l       .text	00000000 
200407b6 l       .text	00000000 
200407b6 l       .text	00000000 
200407ba l       .text	00000000 
200407ba l       .text	00000000 
200407be l       .text	00000000 
200407c4 l       .text	00000000 
200407c6 l       .text	00000000 
200407c6 l       .text	00000000 
200407ca l       .text	00000000 
200407ce l       .text	00000000 
200407ce l       .text	00000000 
200407d4 l       .text	00000000 
200407d4 l       .text	00000000 
200407d8 l       .text	00000000 
200407dc l       .text	00000000 
200407dc l       .text	00000000 
200407de l       .text	00000000 
200407de l       .text	00000000 
200407e2 l       .text	00000000 
200407e6 l       .text	00000000 
200407e8 l       .text	00000000 
200407ea l       .text	00000000 
200407ee l       .text	00000000 
200407f2 l       .text	00000000 
200407fc l       .text	00000000 
200407fc l       .text	00000000 
20040800 l       .text	00000000 
20040800 l       .text	00000000 
20040806 l       .text	00000000 
20040806 l       .text	00000000 
2004080a l       .text	00000000 
2004080a l       .text	00000000 
2004080e l       .text	00000000 
20040814 l       .text	00000000 
20040814 l       .text	00000000 
000002ce l       .debug_loc	00000000 
000002ec l       .debug_loc	00000000 
00000315 l       .debug_loc	00000000 
00000334 l       .debug_loc	00000000 
000007d1 l       .debug_line	00000000 .Lline_table_start0
00000084 l       .debug_frame	00000000 
20040814 l       .text	00000000 
00000000 l    df *ABS*	00000000 setMallocDescriptor.cc
20040814 l       .text	00000000 
20040814 l       .text	00000000 
20040814 l       .text	00000000 
20040814 l       .text	00000000 
20040818 l       .text	00000000 
20040818 l       .text	00000000 
2004081a l       .text	00000000 
2004081e l       .text	00000000 
20040820 l       .text	00000000 
2004082a l       .text	00000000 
2004082e l       .text	00000000 
20040832 l       .text	00000000 
20040834 l       .text	00000000 
20040836 l       .text	00000000 
20040838 l       .text	00000000 
20040838 l       .text	00000000 
00000347 l       .debug_loc	00000000 
000009bb l       .debug_line	00000000 .Lline_table_start0
000000b4 l       .debug_frame	00000000 
20040838 l       .text	00000000 
00000000 l    df *ABS*	00000000 get_ptr.cc
20040838 l       .text	00000000 
20040838 l       .text	00000000 
20040838 l       .text	00000000 
20040838 l       .text	00000000 
20040842 l       .text	00000000 
20040842 l       .text	00000000 
20040846 l       .text	00000000 
2004084a l       .text	00000000 
2004084e l       .text	00000000 
2004084e l       .text	00000000 
20040852 l       .text	00000000 
20040854 l       .text	00000000 
20040854 l       .text	00000000 
0000035a l       .debug_loc	00000000 
0000036d l       .debug_loc	00000000 
00000aee l       .debug_line	00000000 .Lline_table_start0
000000d8 l       .debug_frame	00000000 
20040854 l       .text	00000000 
00000000 l    df *ABS*	00000000 malloc.cc
20040854 l       .text	00000000 
20040854 l       .text	00000000 
20040854 l       .text	00000000 
20040856 l       .text	00000000 
20040856 l       .text	00000000 
2004085c l       .text	00000000 
200408a8 l       .text	00000000 .LBB0_2
2004086a l       .text	00000000 
2004086e l       .text	00000000 
20040876 l       .text	00000000 
20040878 l       .text	00000000 
20040882 l       .text	00000000 
20040882 l       .text	00000000 
20040888 l       .text	00000000 
20040888 l       .text	00000000 
2004088a l       .text	00000000 
2004088e l       .text	00000000 
20040896 l       .text	00000000 
20040896 l       .text	00000000 
2004089a l       .text	00000000 
200408a4 l       .text	00000000 
200408a4 l       .text	00000000 
200408a8 l       .text	00000000 
200408a8 l       .text	00000000 
200408b2 l       .text	00000000 
200408b2 l       .text	00000000 
200408b2 l       .text	00000000 
200408b2 l       .text	00000000 
200408b2 l       .text	00000000 
200408b4 l       .text	00000000 
200408b4 l       .text	00000000 
200408ba l       .text	00000000 
200408ee l       .text	00000000 .LBB1_5
200408bc l       .text	00000000 
200408c6 l       .text	00000000 
200408c6 l       .text	00000000 
200408ca l       .text	00000000 
200408cc l       .text	00000000 
200408ce l       .text	00000000 
200408d4 l       .text	00000000 
200408d4 l       .text	00000000 .LBB1_2
200408d4 l       .text	00000000 
200408e0 l       .text	00000000 .LBB1_4
200408d8 l       .text	00000000 
200408da l       .text	00000000 
200408fc l       .text	00000000 .LBB1_7
200408dc l       .text	00000000 
200408e0 l       .text	00000000 
200408e2 l       .text	00000000 
200408e2 l       .text	00000000 
200408e6 l       .text	00000000 
200408e6 l       .text	00000000 
200408ea l       .text	00000000 
200408ee l       .text	00000000 
200408ee l       .text	00000000 
200408f2 l       .text	00000000 
200408f2 l       .text	00000000 .LBB1_6
200408fc l       .text	00000000 
200408fc l       .text	00000000 
20040912 l       .text	00000000 .LBB1_9
20040902 l       .text	00000000 
20040906 l       .text	00000000 
20040908 l       .text	00000000 
20040908 l       .text	00000000 
2004090c l       .text	00000000 
20040956 l       .text	00000000 .LBB1_10
20040912 l       .text	00000000 
20040912 l       .text	00000000 
2004091a l       .text	00000000 
2004091a l       .text	00000000 
2004091c l       .text	00000000 
2004091c l       .text	00000000 
2004091e l       .text	00000000 
2004091e l       .text	00000000 
20040920 l       .text	00000000 
20040928 l       .text	00000000 
20040928 l       .text	00000000 
2004092c l       .text	00000000 
2004092c l       .text	00000000 
2004092e l       .text	00000000 
20040932 l       .text	00000000 
20040932 l       .text	00000000 
20040934 l       .text	00000000 
2004093e l       .text	00000000 
2004093e l       .text	00000000 
20040948 l       .text	00000000 
20040950 l       .text	00000000 
20040950 l       .text	00000000 
20040956 l       .text	00000000 
20040956 l       .text	00000000 
2004095e l       .text	00000000 
2004095e l       .text	00000000 
0000038b l       .debug_loc	00000000 
0000039e l       .debug_loc	00000000 
000003b1 l       .debug_loc	00000000 
000003c4 l       .debug_loc	00000000 
000003e3 l       .debug_loc	00000000 
0000040c l       .debug_loc	00000000 
00000435 l       .debug_loc	00000000 
00000448 l       .debug_loc	00000000 
00000472 l       .debug_loc	00000000 
00000bc3 l       .debug_line	00000000 .Lline_table_start0
00000000 l       .debug_ranges	00000000 
000000fc l       .debug_frame	00000000 
2004095e l       .text	00000000 
00000000 l    df *ABS*	00000000 delete.cc
20040960 l       .text	00000000 
20040960 l       .text	00000000 
20040960 l       .text	00000000 
20040960 l       .text	00000000 
20040962 l       .text	00000000 
20040962 l       .text	00000000 
20040962 l       .text	00000000 
20040962 l       .text	00000000 
20040962 l       .text	00000000 
20040962 l       .text	00000000 
20040962 l       .text	00000000 
20040964 l       .text	00000000 
20040964 l       .text	00000000 
20040964 l       .text	00000000 
00000e28 l       .debug_line	00000000 .Lline_table_start0
00000148 l       .debug_frame	00000000 
20040964 l       .text	00000000 
00000000 l    df *ABS*	00000000 rand.cc
20040964 l       .text	00000000 
20040964 l       .text	00000000 
20040964 l       .text	00000000 
20040964 l       .text	00000000 
20040966 l       .text	00000000 
2004096e l       .text	00000000 
20040970 l       .text	00000000 
20040972 l       .text	00000000 
20040974 l       .text	00000000 
20040976 l       .text	00000000 
20040978 l       .text	00000000 
2004097a l       .text	00000000 
2004097a l       .text	00000000 
2004097a l       .text	00000000 
2004097a l       .text	00000000 
2004097a l       .text	00000000 
2004097a l       .text	00000000 
20040982 l       .text	00000000 
20040984 l       .text	00000000 
2004098c l       .text	00000000 
20040998 l       .text	00000000 
2004099c l       .text	00000000 
2004099c l       .text	00000000 
200409a8 l       .text	00000000 
200409a8 l       .text	00000000 
200409b0 l       .text	00000000 
200409b2 l       .text	00000000 
200409b2 l       .text	00000000 
200409b6 l       .text	00000000 
200409b8 l       .text	00000000 
200409b8 l       .text	00000000 
200409bc l       .text	00000000 
200409c0 l       .text	00000000 
200409cc l       .text	00000000 
200409d0 l       .text	00000000 
200409d0 l       .text	00000000 
200409d4 l       .text	00000000 
200409d4 l       .text	00000000 
200409d6 l       .text	00000000 
200409d6 l       .text	00000000 
200409d8 l       .text	00000000 
200409d8 l       .text	00000000 
200409d8 l       .text	00000000 
200409d8 l       .text	00000000 
200409d8 l       .text	00000000 
200409d8 l       .text	00000000 
200409e2 l       .text	00000000 
200409e4 l       .text	00000000 
200409e4 l       .text	00000000 
200409ee l       .text	00000000 
200409f0 l       .text	00000000 
200409f0 l       .text	00000000 
200409f0 l       .text	00000000 
200409f0 l       .text	00000000 
200409f0 l       .text	00000000 
200409f2 l       .text	00000000 
200409f8 l       .text	00000000 
200409fa l       .text	00000000 
200409fc l       .text	00000000 
200409fc l       .text	00000000 
200409fe l       .text	00000000 
200409fe l       .text	00000000 
20040a04 l       .text	00000000 
20040a08 l       .text	00000000 
20040a0a l       .text	00000000 
20040a0a l       .text	00000000 
20040a0c l       .text	00000000 
20040a0e l       .text	00000000 
20040a14 l       .text	00000000 
20040a14 l       .text	00000000 
20040a14 l       .text	00000000 
20040a14 l       .text	00000000 
20040a14 l       .text	00000000 
20040a16 l       .text	00000000 
20040a1c l       .text	00000000 
20040a1e l       .text	00000000 
20040a20 l       .text	00000000 
20040a22 l       .text	00000000 
20040a22 l       .text	00000000 .LBB4_1
20040a22 l       .text	00000000 
20040a3a l       .text	00000000 .LBB4_3
20040a28 l       .text	00000000 
20040a32 l       .text	00000000 
20040a34 l       .text	00000000 
20040a34 l       .text	00000000 
20040a36 l       .text	00000000 
20040a36 l       .text	00000000 
20040a38 l       .text	00000000 
20040a3a l       .text	00000000 
20040a3c l       .text	00000000 
20040a44 l       .text	00000000 
20040a44 l       .text	00000000 
00000485 l       .debug_loc	00000000 
00000498 l       .debug_loc	00000000 
000004ab l       .debug_loc	00000000 
000004be l       .debug_loc	00000000 
000004d1 l       .debug_loc	00000000 
000004ea l       .debug_loc	00000000 
000004fd l       .debug_loc	00000000 
0000051b l       .debug_loc	00000000 
00000539 l       .debug_loc	00000000 
0000054c l       .debug_loc	00000000 
0000056b l       .debug_loc	00000000 
0000058a l       .debug_loc	00000000 
00000f0f l       .debug_line	00000000 .Lline_table_start0
00000018 l       .debug_ranges	00000000 
00000030 l       .debug_ranges	00000000 
0000017c l       .debug_frame	00000000 
20040a44 l       .text	00000000 
00000000 l    df *ABS*	00000000 new.cc
20040a44 l       .text	00000000 
20040a44 l       .text	00000000 
20040a44 l       .text	00000000 
20040a44 l       .text	00000000 
20040a46 l       .text	00000000 
20040a46 l       .text	00000000 
20040a46 l       .text	00000000 
0000113b l       .debug_line	00000000 .Lline_table_start0
000001f8 l       .debug_frame	00000000 
20040a46 l       .text	00000000 
00000000 l    df *ABS*	00000000 calloc.cc
20040a48 l       .text	00000000 
20040a48 l       .text	00000000 
20040a48 l       .text	00000000 
20040a4a l       .text	00000000 
20040a4a l       .text	00000000 
20040a50 l       .text	00000000 
20040a54 l       .text	00000000 
20040a54 l       .text	00000000 
20040a56 l       .text	00000000 
20040a58 l       .text	00000000 
20040a5c l       .text	00000000 
20040a6a l       .text	00000000 .LBB0_2
20040a5c l       .text	00000000 
20040a5e l       .text	00000000 
20040a6a l       .text	00000000 
20040a6a l       .text	00000000 
20040a70 l       .text	00000000 
20040a72 l       .text	00000000 
20040a78 l       .text	00000000 
20040a78 l       .text	00000000 
000005a9 l       .debug_loc	00000000 
000005bc l       .debug_loc	00000000 
000005cf l       .debug_loc	00000000 
000005e2 l       .debug_loc	00000000 
0000120e l       .debug_line	00000000 .Lline_table_start0
0000021c l       .debug_frame	00000000 
20040a78 l       .text	00000000 
00000000 l    df *ABS*	00000000 strtol.cc
20040a78 l       .text	00000000 
20040a78 l       .text	00000000 
20040a78 l       .text	00000000 
20040a7a l       .text	00000000 
20040a7a l       .text	00000000 
20040a80 l       .text	00000000 
20040a80 l       .text	00000000 
20040a82 l       .text	00000000 
20040a84 l       .text	00000000 
20040a88 l       .text	00000000 
20040a8a l       .text	00000000 
20040a8a l       .text	00000000 .LBB0_1
20040a8e l       .text	00000000 
20040a8e l       .text	00000000 
20040a92 l       .text	00000000 
20040a92 l       .text	00000000 
20040a96 l       .text	00000000 
20040a96 l       .text	00000000 
20040a9a l       .text	00000000 
20040a9c l       .text	00000000 
20040a9c l       .text	00000000 
20040a9e l       .text	00000000 
20040ac0 l       .text	00000000 .LBB0_5
20040aa8 l       .text	00000000 
20040aac l       .text	00000000 
20040ab0 l       .text	00000000 
20040acc l       .text	00000000 .LBB0_7
20040ab8 l       .text	00000000 
20040abc l       .text	00000000 
20040ac4 l       .text	00000000 .LBB0_6
20040ac0 l       .text	00000000 
20040ac4 l       .text	00000000 
20040ac8 l       .text	00000000 
20040acc l       .text	00000000 
20040acc l       .text	00000000 
20040af2 l       .text	00000000 .LBB0_9
20040ae0 l       .text	00000000 
20040ae4 l       .text	00000000 
20040b10 l       .text	00000000 .LBB0_11
20040af2 l       .text	00000000 
20040b1a l       .text	00000000 .LBB0_12
20040afe l       .text	00000000 
20040b02 l       .text	00000000 
20040b2c l       .text	00000000 .LBB0_14
20040b10 l       .text	00000000 
20040b14 l       .text	00000000 
20040b18 l       .text	00000000 
20040b1a l       .text	00000000 
20040b1e l       .text	00000000 
20040b30 l       .text	00000000 .LBB0_15
20040b22 l       .text	00000000 
20040b26 l       .text	00000000 
20040b38 l       .text	00000000 .LBB0_16
20040b2c l       .text	00000000 
20040b2c l       .text	00000000 
20040b30 l       .text	00000000 
20040b30 l       .text	00000000 
20040b3a l       .text	00000000 
20040b3e l       .text	00000000 .LBB0_18
20040b3a l       .text	00000000 
20040b3c l       .text	00000000 
20040b3e l       .text	00000000 
20040b48 l       .text	00000000 
20040b4c l       .text	00000000 
20040b4c l       .text	00000000 
20040b4e l       .text	00000000 
20040b5a l       .text	00000000 
20040b5a l       .text	00000000 
20040b5e l       .text	00000000 
20040b60 l       .text	00000000 
20040b60 l       .text	00000000 .LBB0_19
20040b60 l       .text	00000000 
20040b66 l       .text	00000000 
20040b68 l       .text	00000000 
20040b70 l       .text	00000000 .LBB0_21
20040b68 l       .text	00000000 
20040b6a l       .text	00000000 
20040b6e l       .text	00000000 
20040b8e l       .text	00000000 .LBB0_25
20040b6e l       .text	00000000 
20040b70 l       .text	00000000 
20040b70 l       .text	00000000 
20040b78 l       .text	00000000 
20040bda l       .text	00000000 .LBB0_31
20040b78 l       .text	00000000 
20040b7a l       .text	00000000 
20040b80 l       .text	00000000 
20040b80 l       .text	00000000 
20040b8a l       .text	00000000 .LBB0_24
20040b84 l       .text	00000000 
20040b86 l       .text	00000000 
20040b8a l       .text	00000000 
20040b8e l       .text	00000000 
20040b8e l       .text	00000000 
20040b94 l       .text	00000000 
20040ba0 l       .text	00000000 
20040baa l       .text	00000000 .LBB0_28
20040ba6 l       .text	00000000 
20040bc8 l       .text	00000000 .LBB0_30
20040baa l       .text	00000000 
20040bb8 l       .text	00000000 
20040bbe l       .text	00000000 
20040bbe l       .text	00000000 
20040bc4 l       .text	00000000 
20040bc4 l       .text	00000000 
20040bc6 l       .text	00000000 
20040bc8 l       .text	00000000 
20040bca l       .text	00000000 
20040bcc l       .text	00000000 
20040bcc l       .text	00000000 
20040bd0 l       .text	00000000 
20040bd0 l       .text	00000000 
20040bd4 l       .text	00000000 
20040bd4 l       .text	00000000 
20040bd6 l       .text	00000000 
20040bd8 l       .text	00000000 
20040bda l       .text	00000000 
20040bee l       .text	00000000 .LBB0_35
20040bde l       .text	00000000 
20040be0 l       .text	00000000 
20040be2 l       .text	00000000 
20040bec l       .text	00000000 .LBB0_34
20040be6 l       .text	00000000 
20040bec l       .text	00000000 
20040bf4 l       .text	00000000 .LBB0_37
20040bee l       .text	00000000 
20040bf0 l       .text	00000000 
20040bfe l       .text	00000000 .LBB0_39
20040bf8 l       .text	00000000 
20040bfc l       .text	00000000 
20040bfe l       .text	00000000 
20040bfe l       .text	00000000 
20040c08 l       .text	00000000 
20040c08 l       .text	00000000 
000005f5 l       .debug_loc	00000000 
0000061f l       .debug_loc	00000000 
0000063e l       .debug_loc	00000000 
00000680 l       .debug_loc	00000000 
00000703 l       .debug_loc	00000000 
00000718 l       .debug_loc	00000000 
000007a6 l       .debug_loc	00000000 
000007d1 l       .debug_loc	00000000 
00000816 l       .debug_loc	00000000 
00000856 l       .debug_loc	00000000 
0000132c l       .debug_line	00000000 .Lline_table_start0
0000024c l       .debug_frame	00000000 
20040c08 l       .text	00000000 
00000000 l    df *ABS*	00000000 fprintf.cc
20040c08 l       .text	00000000 
20040c08 l       .text	00000000 
20040c08 l       .text	00000000 
20040c0a l       .text	00000000 
20040c0a l       .text	00000000 
20040c10 l       .text	00000000 
20040c10 l       .text	00000000 
20040c12 l       .text	00000000 
20040c16 l       .text	00000000 
200f0098 l     O .data	00000011 str
20040c32 l       .text	00000000 
20040c32 l       .text	00000000 .LBB0_58
20041cdb l     O .text	00000020 HexTable
20040c42 l       .text	00000000 
20040c46 l       .text	00000000 
20040c46 l       .text	00000000 .LBB0_1
20040c46 l       .text	00000000 
20040f50 l       .text	00000000 .LBB0_53
20040c4a l       .text	00000000 
20040c4e l       .text	00000000 
20040c52 l       .text	00000000 
20040cba l       .text	00000000 .LBB0_13
20040c52 l       .text	00000000 
20040cb6 l       .text	00000000 .LBB0_12
20040cda l       .text	00000000 .LBB0_15
20040c64 l       .text	00000000 .LBB0_7
20040c5e l       .text	00000000 
20040c62 l       .text	00000000 
20040c64 l       .text	00000000 
20040c68 l       .text	00000000 
20040c7e l       .text	00000000 .LBB0_9
20040c68 l       .text	00000000 
20040c6a l       .text	00000000 .LBB0_8
20040c6a l       .text	00000000 
20040c6e l       .text	00000000 
20040c72 l       .text	00000000 
20040c76 l       .text	00000000 
20040c7a l       .text	00000000 
20040c7c l       .text	00000000 
20040c7e l       .text	00000000 
20040c80 l       .text	00000000 
20040c90 l       .text	00000000 
20040cce l       .text	00000000 .LBB0_14
20040ca0 l       .text	00000000 
20040cac l       .text	00000000 
20040cb6 l       .text	00000000 
20040cb8 l       .text	00000000 
20040cec l       .text	00000000 .LBB0_16
20040cba l       .text	00000000 
20040cba l       .text	00000000 
20040cc2 l       .text	00000000 
20040cc6 l       .text	00000000 
20040cc8 l       .text	00000000 
20040cc8 l       .text	00000000 
20040cce l       .text	00000000 
20040cda l       .text	00000000 
20040cdc l       .text	00000000 
20040ce4 l       .text	00000000 
20040cec l       .text	00000000 
20040d40 l       .text	00000000 .LBB0_25
20040e7a l       .text	00000000 .LBB0_43
20040d26 l       .text	00000000 .LBB0_23
20040ec2 l       .text	00000000 .LBB0_44
20040f2e l       .text	00000000 .LBB0_50
20040d26 l       .text	00000000 
20040d26 l       .text	00000000 
20040d28 l       .text	00000000 
20040d28 l       .text	00000000 
20040d2c l       .text	00000000 
20040d34 l       .text	00000000 
20040d34 l       .text	00000000 
20040d38 l       .text	00000000 
20040d3a l       .text	00000000 
20040dce l       .text	00000000 .LBB0_32
20040d3c l       .text	00000000 
20040d3c l       .text	00000000 
20040dd2 l       .text	00000000 .LBB0_33
20040d40 l       .text	00000000 
20040d42 l       .text	00000000 
20040d44 l       .text	00000000 
20040d44 l       .text	00000000 
20040d48 l       .text	00000000 
20040d4a l       .text	00000000 
20040d4c l       .text	00000000 
20040d4c l       .text	00000000 
20040d54 l       .text	00000000 
20040d56 l       .text	00000000 
20040d56 l       .text	00000000 
20040d58 l       .text	00000000 
20040d5c l       .text	00000000 
20040d5c l       .text	00000000 
20040d66 l       .text	00000000 
20040d66 l       .text	00000000 .LBB0_26
20040d66 l       .text	00000000 
20040d6a l       .text	00000000 
20040d6c l       .text	00000000 
20040d74 l       .text	00000000 
20040d78 l       .text	00000000 
20040d8a l       .text	00000000 .LBB0_29
20040d78 l       .text	00000000 
20040d7c l       .text	00000000 
20040d7e l       .text	00000000 
20040d7e l       .text	00000000 
20040d80 l       .text	00000000 
20040d80 l       .text	00000000 
20040d84 l       .text	00000000 
20040d88 l       .text	00000000 
20040d88 l       .text	00000000 
20040d8a l       .text	00000000 
20040d8a l       .text	00000000 
20040d90 l       .text	00000000 
20040d9a l       .text	00000000 
20040f80 l     F .text	00000088 write_char_cnt(char*, int, int, int, int)
20040d9c l       .text	00000000 
20040d9c l       .text	00000000 
20040d9e l       .text	00000000 
20040da2 l       .text	00000000 
20040da2 l       .text	00000000 
20040da6 l       .text	00000000 
20040dbc l       .text	00000000 .LBB0_31
20040da6 l       .text	00000000 
20040da8 l       .text	00000000 .LBB0_30
20040da8 l       .text	00000000 
20040dac l       .text	00000000 
20040db0 l       .text	00000000 
20040db4 l       .text	00000000 
20040db4 l       .text	00000000 
20040db8 l       .text	00000000 
20040dba l       .text	00000000 
20040dba l       .text	00000000 
20040dbc l       .text	00000000 
20040dca l       .text	00000000 
20040dce l       .text	00000000 
20040dde l       .text	00000000 
20040de0 l       .text	00000000 
20040de4 l       .text	00000000 
20040de6 l       .text	00000000 
20040de6 l       .text	00000000 
20040dee l       .text	00000000 
20040dee l       .text	00000000 .LBB0_34
20040dee l       .text	00000000 
20040df0 l       .text	00000000 
20040df0 l       .text	00000000 
20040dfc l       .text	00000000 
20040e04 l       .text	00000000 
20040e06 l       .text	00000000 
20040e06 l       .text	00000000 
20040e1e l       .text	00000000 .LBB0_36
20040e0a l       .text	00000000 
20040e0e l       .text	00000000 
20040e0e l       .text	00000000 
20040e12 l       .text	00000000 
20040e1a l       .text	00000000 
20040e1e l       .text	00000000 
20040e1e l       .text	00000000 
20040e20 l       .text	00000000 
20040e32 l       .text	00000000 .LBB0_38
20040e22 l       .text	00000000 
20040e26 l       .text	00000000 
20040e26 l       .text	00000000 
20040e32 l       .text	00000000 
20040e32 l       .text	00000000 
20040e38 l       .text	00000000 
20040e3c l       .text	00000000 
20040e3c l       .text	00000000 
20040e42 l       .text	00000000 
20040e4c l       .text	00000000 
20040e4e l       .text	00000000 
20040e54 l       .text	00000000 .LBB0_40
20040e4e l       .text	00000000 
20040e52 l       .text	00000000 
20040e52 l       .text	00000000 
20040e54 l       .text	00000000 
20040e5a l       .text	00000000 
20040e60 l       .text	00000000 
20040e76 l       .text	00000000 .LBB0_42
20040e60 l       .text	00000000 
20040e62 l       .text	00000000 .LBB0_41
20040e62 l       .text	00000000 
20040e66 l       .text	00000000 
20040e6a l       .text	00000000 
20040e6e l       .text	00000000 
20040e72 l       .text	00000000 
20040e74 l       .text	00000000 
20040e76 l       .text	00000000 
20040f24 l       .text	00000000 .LBB0_49
20040e7a l       .text	00000000 
20040e7a l       .text	00000000 
20040e7c l       .text	00000000 
20040e80 l       .text	00000000 
20040e80 l       .text	00000000 
20040e84 l       .text	00000000 
20040e84 l       .text	00000000 
20040e86 l       .text	00000000 
20040e8e l       .text	00000000 
20040e94 l       .text	00000000 
20040e94 l       .text	00000000 
20040e96 l       .text	00000000 
20040e9a l       .text	00000000 
20040e9c l       .text	00000000 
20040e9c l       .text	00000000 
20040e9e l       .text	00000000 
20040e9e l       .text	00000000 
20040ea0 l       .text	00000000 
20040ea4 l       .text	00000000 
20040eaa l       .text	00000000 
20040eaa l       .text	00000000 
20040eb0 l       .text	00000000 
20040eb0 l       .text	00000000 
20040eb4 l       .text	00000000 
20040eb4 l       .text	00000000 
20040ec0 l       .text	00000000 
20040ec2 l       .text	00000000 
20040ec4 l       .text	00000000 
20040ec6 l       .text	00000000 
20040ec8 l       .text	00000000 
20040ec8 l       .text	00000000 
20040ed8 l       .text	00000000 
20040ed8 l       .text	00000000 
20040eda l       .text	00000000 
20040ede l       .text	00000000 
20040ee0 l       .text	00000000 
20040ee0 l       .text	00000000 
20040ee2 l       .text	00000000 
20040ee4 l       .text	00000000 
20040ee4 l       .text	00000000 
20040ef2 l       .text	00000000 
20040ef8 l       .text	00000000 .LBB0_46
20040ef2 l       .text	00000000 
20040ef6 l       .text	00000000 
20040ef8 l       .text	00000000 
20040efc l       .text	00000000 
20040f04 l       .text	00000000 
20040f1a l       .text	00000000 .LBB0_48
20040f04 l       .text	00000000 
20040f06 l       .text	00000000 .LBB0_47
20040f06 l       .text	00000000 
20040f0a l       .text	00000000 
20040f0e l       .text	00000000 
20040f12 l       .text	00000000 
20040f16 l       .text	00000000 
20040f18 l       .text	00000000 
20040f1a l       .text	00000000 
20040f1c l       .text	00000000 
20040f22 l       .text	00000000 
20040f22 l       .text	00000000 
20040f24 l       .text	00000000 
20040f2e l       .text	00000000 
20040f2e l       .text	00000000 
20040f46 l       .text	00000000 .LBB0_52
20040f3c l       .text	00000000 
20040f46 l       .text	00000000 
20040f50 l       .text	00000000 
20040f6a l       .text	00000000 .LBB0_56
20040f50 l       .text	00000000 
20040f54 l       .text	00000000 
20040f56 l       .text	00000000 
20040f58 l       .text	00000000 .LBB0_55
20040f58 l       .text	00000000 
20040f5c l       .text	00000000 
20040f60 l       .text	00000000 
20040f64 l       .text	00000000 
20040f68 l       .text	00000000 
20040f6a l       .text	00000000 
20040f6c l       .text	00000000 
20040f72 l       .text	00000000 
20040f76 l       .text	00000000 
20040f7c l       .text	00000000 
20040f80 l       .text	00000000 
20040f80 l       .text	00000000 
20040f80 l       .text	00000000 
20040f80 l       .text	00000000 
20040f80 l       .text	00000000 
20040f82 l       .text	00000000 
20040f82 l       .text	00000000 
20040f84 l       .text	00000000 
20040f84 l       .text	00000000 
20040f84 l       .text	00000000 
20040f92 l       .text	00000000 .LBB1_2
20040f8c l       .text	00000000 
20040f8e l       .text	00000000 
20040f92 l       .text	00000000 
20040f96 l       .text	00000000 
20040f9a l       .text	00000000 
20040fb8 l       .text	00000000 .LBB1_4
20040f9c l       .text	00000000 
20040f9c l       .text	00000000 
20040fa0 l       .text	00000000 
20040fa8 l       .text	00000000 
20040fac l       .text	00000000 
20040fb0 l       .text	00000000 
20040fb0 l       .text	00000000 
20040fb2 l       .text	00000000 
20040fbe l       .text	00000000 .LBB1_5
20040fb2 l       .text	00000000 
20040fe4 l       .text	00000000 .LBB1_9
20040fb8 l       .text	00000000 
20040fb8 l       .text	00000000 
20040fba l       .text	00000000 
20040fba l       .text	00000000 
20040fbe l       .text	00000000 
20040fc0 l       .text	00000000 
20040fc2 l       .text	00000000 
20040fc2 l       .text	00000000 
20040fc6 l       .text	00000000 
20040fc6 l       .text	00000000 .LBB1_6
20040fc6 l       .text	00000000 
20040fce l       .text	00000000 
20040fd2 l       .text	00000000 
20040fe2 l       .text	00000000 .LBB1_8
20040fd6 l       .text	00000000 
20040fda l       .text	00000000 
20040fda l       .text	00000000 
20040fde l       .text	00000000 
20040fe0 l       .text	00000000 
20040fe0 l       .text	00000000 
20040fe2 l       .text	00000000 
20040fe4 l       .text	00000000 
20040fe8 l       .text	00000000 
20041000 l       .text	00000000 .LBB1_11
20040fee l       .text	00000000 
20040fee l       .text	00000000 
20040ff2 l       .text	00000000 
20040ffa l       .text	00000000 
20040ffe l       .text	00000000 
20041000 l       .text	00000000 
20041008 l       .text	00000000 
20041008 l       .text	00000000 
20041008 l       .text	00000000 
20041008 l       .text	00000000 
20041008 l       .text	00000000 
2004100c l       .text	00000000 
20041018 l       .text	00000000 
20041018 l       .text	00000000 
2004101c l       .text	00000000 
20041032 l       .text	00000000 
20041032 l       .text	00000000 
20041034 l       .text	00000000 
20041036 l       .text	00000000 
20041036 l       .text	00000000 
20041038 l       .text	00000000 
2004103e l       .text	00000000 
20041042 l       .text	00000000 
20041044 l       .text	00000000 
20041044 l       .text	00000000 
20041046 l       .text	00000000 
2004104a l       .text	00000000 
20041052 l       .text	00000000 
20041052 l       .text	00000000 
20041058 l       .text	00000000 
2004105c l       .text	00000000 
2004106a l       .text	00000000 
2004106a l       .text	00000000 
2004106a l       .text	00000000 
2004106a l       .text	00000000 
2004106a l       .text	00000000 
2004106c l       .text	00000000 
20041070 l       .text	00000000 
20041070 l       .text	00000000 
20041072 l       .text	00000000 
20041080 l       .text	00000000 
20041094 l       .text	00000000 
20041094 l       .text	00000000 
20041096 l       .text	00000000 
20041098 l       .text	00000000 
20041098 l       .text	00000000 
2004109c l       .text	00000000 
2004109c l       .text	00000000 
200410a0 l       .text	00000000 
200410a4 l       .text	00000000 
200410a6 l       .text	00000000 
200410a6 l       .text	00000000 
200410aa l       .text	00000000 
200410b2 l       .text	00000000 
200410b2 l       .text	00000000 
200410b2 l       .text	00000000 
200410b2 l       .text	00000000 
200410b2 l       .text	00000000 
200410b4 l       .text	00000000 
200410b6 l       .text	00000000 
200410c0 l       .text	00000000 
200410c0 l       .text	00000000 
200410c2 l       .text	00000000 
200410c4 l       .text	00000000 
200410c4 l       .text	00000000 
200410c6 l       .text	00000000 
200410c6 l       .text	00000000 
200410cc l       .text	00000000 
200410cc l       .text	00000000 
200410cc l       .text	00000000 
200410cc l       .text	00000000 
200410cc l       .text	00000000 
200410ce l       .text	00000000 
200410d4 l       .text	00000000 
200410d8 l       .text	00000000 
200410d8 l       .text	00000000 .LBB5_1
200410d8 l       .text	00000000 
200410ea l       .text	00000000 
200410ea l       .text	00000000 .LBB5_2
200410ea l       .text	00000000 
200410fa l       .text	00000000 
200410fa l       .text	00000000 
20041108 l       .text	00000000 
20041108 l       .text	00000000 
20041108 l       .text	00000000 
20041108 l       .text	00000000 
20041108 l       .text	00000000 
20041108 l       .text	00000000 
2004110a l       .text	00000000 
20041110 l       .text	00000000 
20041112 l       .text	00000000 
20041114 l       .text	00000000 
20041116 l       .text	00000000 
20041118 l       .text	00000000 
20041118 l       .text	00000000 .LBB6_4
20041124 l       .text	00000000 .LBB6_1
20041124 l       .text	00000000 
20041124 l       .text	00000000 
20041148 l       .text	00000000 .LBB6_3
2004112a l       .text	00000000 
20041134 l       .text	00000000 
20041134 l       .text	00000000 
20041136 l       .text	00000000 
20041136 l       .text	00000000 
20041144 l       .text	00000000 
20041144 l       .text	00000000 
20041146 l       .text	00000000 
20041148 l       .text	00000000 
2004114a l       .text	00000000 
20041152 l       .text	00000000 
20041152 l       .text	00000000 
00000875 l       .debug_loc	00000000 
0000089f l       .debug_loc	00000000 
00000918 l       .debug_loc	00000000 
000009b1 l       .debug_loc	00000000 
00000a4c l       .debug_loc	00000000 
00000acd l       .debug_loc	00000000 
00000b7d l       .debug_loc	00000000 
00000c4e l       .debug_loc	00000000 
00000cae l       .debug_loc	00000000 
00000d67 l       .debug_loc	00000000 
00000db7 l       .debug_loc	00000000 
00000e22 l       .debug_loc	00000000 
00000e3b l       .debug_loc	00000000 
00000e6f l       .debug_loc	00000000 
00000e82 l       .debug_loc	00000000 
00000ea0 l       .debug_loc	00000000 
00000eb3 l       .debug_loc	00000000 
00000ed2 l       .debug_loc	00000000 
00000f0a l       .debug_loc	00000000 
00000f37 l       .debug_loc	00000000 
00000f4a l       .debug_loc	00000000 
00000f73 l       .debug_loc	00000000 
00000fb3 l       .debug_loc	00000000 
00000fdc l       .debug_loc	00000000 
00000ffa l       .debug_loc	00000000 
0000100d l       .debug_loc	00000000 
00001020 l       .debug_loc	00000000 
00001033 l       .debug_loc	00000000 
000010a9 l       .debug_loc	00000000 
000010c9 l       .debug_loc	00000000 
000010dc l       .debug_loc	00000000 
00001107 l       .debug_loc	00000000 
0000111a l       .debug_loc	00000000 
00001147 l       .debug_loc	00000000 
0000115a l       .debug_loc	00000000 
0000116d l       .debug_loc	00000000 
00001180 l       .debug_loc	00000000 
000011ab l       .debug_loc	00000000 
000011be l       .debug_loc	00000000 
000011d1 l       .debug_loc	00000000 
000011e4 l       .debug_loc	00000000 
0000120f l       .debug_loc	00000000 
00001222 l       .debug_loc	00000000 
00001235 l       .debug_loc	00000000 
00001260 l       .debug_loc	00000000 
0000128b l       .debug_loc	00000000 
000012b6 l       .debug_loc	00000000 
000015bc l       .debug_line	00000000 .Lline_table_start0
00000050 l       .debug_ranges	00000000 
0000027c l       .debug_frame	00000000 
20041152 l       .text	00000000 
00000000 l    df *ABS*	00000000 fputc.cc
20041154 l       .text	00000000 
20041154 l       .text	00000000 
20041154 l       .text	00000000 
20041156 l       .text	00000000 
20041158 l       .text	00000000 
2004115a l       .text	00000000 
2004115e l       .text	00000000 
2004115e l       .text	00000000 
20041160 l       .text	00000000 
20041164 l       .text	00000000 
20041164 l       .text	00000000 
2004116a l       .text	00000000 
2004116c l       .text	00000000 
2004116c l       .text	00000000 
20041172 l       .text	00000000 
20041172 l       .text	00000000 
000012d5 l       .debug_loc	00000000 
000012ff l       .debug_loc	00000000 
00001cf2 l       .debug_line	00000000 .Lline_table_start0
00000354 l       .debug_frame	00000000 
20041172 l       .text	00000000 
00000000 l    df *ABS*	00000000 fputs.cc
20041174 l       .text	00000000 
20041174 l       .text	00000000 
20041174 l       .text	00000000 
20041176 l       .text	00000000 
2004117c l       .text	00000000 
20041180 l       .text	00000000 
20041180 l       .text	00000000 
20041186 l       .text	00000000 
20041192 l       .text	00000000 
2004119a l       .text	00000000 
2004119a l       .text	00000000 
00001312 l       .debug_loc	00000000 
00001330 l       .debug_loc	00000000 
00001de4 l       .debug_line	00000000 .Lline_table_start0
00000380 l       .debug_frame	00000000 
2004119a l       .text	00000000 
00000000 l    df *ABS*	00000000 fgets.cc
2004119c l       .text	00000000 
2004119c l       .text	00000000 
2004119c l       .text	00000000 
2004119e l       .text	00000000 
200411a4 l       .text	00000000 
200411a6 l       .text	00000000 
200411aa l       .text	00000000 
200411ac l       .text	00000000 
200411be l       .text	00000000 
200411be l       .text	00000000 .LBB0_1
200411be l       .text	00000000 
200411c8 l       .text	00000000 
200411cc l       .text	00000000 
200411cc l       .text	00000000 
200411d0 l       .text	00000000 
200411d6 l       .text	00000000 
200411d8 l       .text	00000000 
200411da l       .text	00000000 
200411e0 l       .text	00000000 
200411e4 l       .text	00000000 
200411e6 l       .text	00000000 
200411ea l       .text	00000000 
200411ee l       .text	00000000 
200411f0 l       .text	00000000 
200411f6 l       .text	00000000 
200411f6 l       .text	00000000 
00001343 l       .debug_loc	00000000 
0000136d l       .debug_loc	00000000 
0000138c l       .debug_loc	00000000 
0000139f l       .debug_loc	00000000 
000013bf l       .debug_loc	00000000 
000013d2 l       .debug_loc	00000000 
00001edf l       .debug_line	00000000 .Lline_table_start0
000003b0 l       .debug_frame	00000000 
200411f6 l       .text	00000000 
00000000 l    df *ABS*	00000000 fgetc.cc
200411f8 l       .text	00000000 
200411f8 l       .text	00000000 
200411f8 l       .text	00000000 
200411fa l       .text	00000000 
200411fa l       .text	00000000 
200411fc l       .text	00000000 
20041200 l       .text	00000000 
20041200 l       .text	00000000 
20041204 l       .text	00000000 
20041208 l       .text	00000000 
2004120e l       .text	00000000 
20041212 l       .text	00000000 
20041212 l       .text	00000000 
20041218 l       .text	00000000 
20041218 l       .text	00000000 
000013f1 l       .debug_loc	00000000 
00001404 l       .debug_loc	00000000 
00002004 l       .debug_line	00000000 .Lline_table_start0
000003e0 l       .debug_frame	00000000 
20041218 l       .text	00000000 
00000000 l    df *ABS*	00000000 strlen.cc
20041218 l       .text	00000000 
20041218 l       .text	00000000 
20041218 l       .text	00000000 
2004121a l       .text	00000000 
2004121a l       .text	00000000 .LBB0_1
2004121a l       .text	00000000 
20041228 l       .text	00000000 .LBB0_3
2004121e l       .text	00000000 
20041220 l       .text	00000000 
20041224 l       .text	00000000 
20041224 l       .text	00000000 
20041226 l       .text	00000000 
20041228 l       .text	00000000 
20041228 l       .text	00000000 
2004122a l       .text	00000000 
2004122c l       .text	00000000 
2004122c l       .text	00000000 
00001418 l       .debug_loc	00000000 
00001450 l       .debug_loc	00000000 
000020f6 l       .debug_line	00000000 .Lline_table_start0
0000040c l       .debug_frame	00000000 
2004122c l       .text	00000000 
00000000 l    df *ABS*	00000000 strcmp.cc
2004122c l       .text	00000000 
2004122c l       .text	00000000 
2004122c l       .text	00000000 .LBB0_1
2004122c l       .text	00000000 
2004122c l       .text	00000000 
20041230 l       .text	00000000 
20041244 l       .text	00000000 .LBB0_4
20041234 l       .text	00000000 
2004124e l       .text	00000000 .LBB0_7
20041238 l       .text	00000000 
2004123a l       .text	00000000 
2004123e l       .text	00000000 
20041242 l       .text	00000000 
20041246 l       .text	00000000 
2004124c l       .text	00000000 .LBB0_6
20041246 l       .text	00000000 
2004124a l       .text	00000000 
2004124c l       .text	00000000 
2004124e l       .text	00000000 
2004124e l       .text	00000000 
20041250 l       .text	00000000 
20041250 l       .text	00000000 
20041252 l       .text	00000000 
20041252 l       .text	00000000 
0000146f l       .debug_loc	00000000 
000021cc l       .debug_line	00000000 .Lline_table_start0
00000430 l       .debug_frame	00000000 
20041252 l       .text	00000000 
00000000 l    df *ABS*	00000000 memset_rand.cc
20041254 l       .text	00000000 
20041254 l       .text	00000000 
20041254 l       .text	00000000 
20041256 l       .text	00000000 
20041256 l       .text	00000000 
2004125c l       .text	00000000 
2004125c l       .text	00000000 
2004125e l       .text	00000000 
20041262 l       .text	00000000 
20041264 l       .text	00000000 
2004127a l       .text	00000000 .LBB0_2
20041264 l       .text	00000000 
20041266 l       .text	00000000 .LBB0_1
20041266 l       .text	00000000 
20041268 l       .text	00000000 
20041268 l       .text	00000000 
2004126c l       .text	00000000 
2004126c l       .text	00000000 
20041270 l       .text	00000000 
20041270 l       .text	00000000 
20041278 l       .text	00000000 
20041278 l       .text	00000000 
2004127a l       .text	00000000 
2004127e l       .text	00000000 
20041280 l       .text	00000000 
20041286 l       .text	00000000 
20041286 l       .text	00000000 
0000148d l       .debug_loc	00000000 
000014b7 l       .debug_loc	00000000 
000014fa l       .debug_loc	00000000 
000022d3 l       .debug_line	00000000 .Lline_table_start0
00000454 l       .debug_frame	00000000 
20041286 l       .text	00000000 
00000000 l    df *ABS*	00000000 memcmp.cc
20041288 l       .text	00000000 
20041288 l       .text	00000000 
20041288 l       .text	00000000 
20041288 l       .text	00000000 
2004128c l       .text	00000000 
2004128c l       .text	00000000 .LBB0_1
2004128c l       .text	00000000 
200412a6 l       .text	00000000 .LBB0_3
2004128e l       .text	00000000 
20041290 l       .text	00000000 
20041294 l       .text	00000000 
20041298 l       .text	00000000 
2004129c l       .text	00000000 
200412a0 l       .text	00000000 
200412a2 l       .text	00000000 
200412a2 l       .text	00000000 
200412a8 l       .text	00000000 .LBB0_4
200412a6 l       .text	00000000 
200412a6 l       .text	00000000 
200412a8 l       .text	00000000 
200412a8 l       .text	00000000 
200412aa l       .text	00000000 
200412ac l       .text	00000000 
200412ac l       .text	00000000 
0000152e l       .debug_loc	00000000 
00001541 l       .debug_loc	00000000 
00001554 l       .debug_loc	00000000 
00001567 l       .debug_loc	00000000 
0000157a l       .debug_loc	00000000 
000023e6 l       .debug_line	00000000 .Lline_table_start0
00000484 l       .debug_frame	00000000 
200412ac l       .text	00000000 
00000000 l    df *ABS*	00000000 strcpy.cc
200412ac l       .text	00000000 
200412ac l       .text	00000000 
200412ac l       .text	00000000 
200412b0 l       .text	00000000 
200412b0 l       .text	00000000 .LBB0_1
200412b0 l       .text	00000000 
200412b4 l       .text	00000000 
200412b8 l       .text	00000000 
200412bc l       .text	00000000 
200412bc l       .text	00000000 
200412c4 l       .text	00000000 
200412c4 l       .text	00000000 
200412c6 l       .text	00000000 
200412c8 l       .text	00000000 
200412c8 l       .text	00000000 
000015b2 l       .debug_loc	00000000 
000024ba l       .debug_line	00000000 .Lline_table_start0
000004a8 l       .debug_frame	00000000 
200412c8 l       .text	00000000 
00000000 l    df *ABS*	00000000 memcpy.cc
200412c8 l       .text	00000000 
200412c8 l       .text	00000000 
200412c8 l       .text	00000000 
200412cc l       .text	00000000 
200412e2 l       .text	00000000 .LBB0_2
200412cc l       .text	00000000 
200412ce l       .text	00000000 
200412ce l       .text	00000000 .LBB0_1
200412ce l       .text	00000000 
200412d2 l       .text	00000000 
200412d6 l       .text	00000000 
200412da l       .text	00000000 
200412de l       .text	00000000 
200412e0 l       .text	00000000 
200412e2 l       .text	00000000 
200412e4 l       .text	00000000 
200412e4 l       .text	00000000 
000015e6 l       .debug_loc	00000000 
000015f9 l       .debug_loc	00000000 
00001619 l       .debug_loc	00000000 
00002568 l       .debug_line	00000000 .Lline_table_start0
000004cc l       .debug_frame	00000000 
200412e4 l       .text	00000000 
00000000 l    df *ABS*	00000000 wordcmp.cc
200412e4 l       .text	00000000 
200412e4 l       .text	00000000 
200412e4 l       .text	00000000 
200412e4 l       .text	00000000 
200412e8 l       .text	00000000 
200412e8 l       .text	00000000 .LBB0_1
200412e8 l       .text	00000000 
20041300 l       .text	00000000 .LBB0_3
200412ea l       .text	00000000 
200412ee l       .text	00000000 
200412f0 l       .text	00000000 
200412f2 l       .text	00000000 
200412f6 l       .text	00000000 
200412fa l       .text	00000000 
200412fc l       .text	00000000 
200412fc l       .text	00000000 
20041302 l       .text	00000000 .LBB0_4
20041300 l       .text	00000000 
20041300 l       .text	00000000 
20041302 l       .text	00000000 
20041302 l       .text	00000000 
20041304 l       .text	00000000 
20041306 l       .text	00000000 
20041306 l       .text	00000000 
00001637 l       .debug_loc	00000000 
0000164a l       .debug_loc	00000000 
0000165d l       .debug_loc	00000000 
00001670 l       .debug_loc	00000000 
000016a8 l       .debug_loc	00000000 
000016bb l       .debug_loc	00000000 
00002628 l       .debug_line	00000000 .Lline_table_start0
000004f0 l       .debug_frame	00000000 
20041306 l       .text	00000000 
00000000 l    df *ABS*	00000000 wordcpy.cc
20041308 l       .text	00000000 
20041308 l       .text	00000000 
20041308 l       .text	00000000 
2004130c l       .text	00000000 
20041322 l       .text	00000000 .LBB0_2
2004130c l       .text	00000000 
20041310 l       .text	00000000 
20041310 l       .text	00000000 .LBB0_1
20041310 l       .text	00000000 
20041312 l       .text	00000000 
20041316 l       .text	00000000 
20041318 l       .text	00000000 
2004131c l       .text	00000000 
2004131e l       .text	00000000 
20041322 l       .text	00000000 
20041324 l       .text	00000000 
20041324 l       .text	00000000 
000016ce l       .debug_loc	00000000 
000016e1 l       .debug_loc	00000000 
00001701 l       .debug_loc	00000000 
0000171f l       .debug_loc	00000000 
00002727 l       .debug_line	00000000 .Lline_table_start0
00000514 l       .debug_frame	00000000 
20041324 l       .text	00000000 
00000000 l    df *ABS*	00000000 strncpy.cc
20041324 l       .text	00000000 
20041324 l       .text	00000000 
20041324 l       .text	00000000 
20041326 l       .text	00000000 
20041342 l       .text	00000000 .LBB0_3
20041326 l       .text	00000000 
2004132a l       .text	00000000 .LBB0_1
2004132a l       .text	00000000 
20041344 l       .text	00000000 .LBB0_4
20041332 l       .text	00000000 
20041334 l       .text	00000000 
20041338 l       .text	00000000 
2004133c l       .text	00000000 
2004133e l       .text	00000000 
20041342 l       .text	00000000 
20041344 l       .text	00000000 
20041346 l       .text	00000000 
20041358 l       .text	00000000 .LBB0_7
2004134e l       .text	00000000 
2004134e l       .text	00000000 .LBB0_6
2004134e l       .text	00000000 
20041352 l       .text	00000000 
20041356 l       .text	00000000 
20041358 l       .text	00000000 
2004135c l       .text	00000000 
2004135e l       .text	00000000 
2004135e l       .text	00000000 
00001732 l       .debug_loc	00000000 
00001745 l       .debug_loc	00000000 
00001758 l       .debug_loc	00000000 
00002812 l       .debug_line	00000000 .Lline_table_start0
00000538 l       .debug_frame	00000000 
2004135e l       .text	00000000 
00000000 l    df *ABS*	00000000 memset.cc
20041360 l       .text	00000000 
20041360 l       .text	00000000 
20041360 l       .text	00000000 
20041364 l       .text	00000000 
20041372 l       .text	00000000 .LBB0_2
20041364 l       .text	00000000 
20041366 l       .text	00000000 .LBB0_1
20041366 l       .text	00000000 
2004136a l       .text	00000000 
2004136e l       .text	00000000 
20041370 l       .text	00000000 
20041372 l       .text	00000000 
20041374 l       .text	00000000 
20041374 l       .text	00000000 
00001782 l       .debug_loc	00000000 
000017a2 l       .debug_loc	00000000 
00002927 l       .debug_line	00000000 .Lline_table_start0
0000055c l       .debug_frame	00000000 
20041374 l       .text	00000000 
00000000 l    df *ABS*	00000000 wordset.cc
20041374 l       .text	00000000 
20041374 l       .text	00000000 
20041374 l       .text	00000000 
20041378 l       .text	00000000 
20041384 l       .text	00000000 .LBB0_2
20041378 l       .text	00000000 
2004137a l       .text	00000000 .LBB0_1
2004137a l       .text	00000000 
2004137c l       .text	00000000 
20041380 l       .text	00000000 
20041382 l       .text	00000000 
20041384 l       .text	00000000 
20041386 l       .text	00000000 
20041386 l       .text	00000000 
000017c0 l       .debug_loc	00000000 
000017e0 l       .debug_loc	00000000 
000029ff l       .debug_line	00000000 .Lline_table_start0
00000580 l       .debug_frame	00000000 
20041386 l       .text	00000000 
00000000 l    df *ABS*	00000000 memset_unique.cc
20041388 l       .text	00000000 
20041388 l       .text	00000000 
20041388 l       .text	00000000 
2004138e l       .text	00000000 
200413a8 l       .text	00000000 .LBB0_2
2004138e l       .text	00000000 
20041392 l       .text	00000000 .LBB0_1
20041392 l       .text	00000000 
20041396 l       .text	00000000 
20041396 l       .text	00000000 
2004139a l       .text	00000000 
2004139a l       .text	00000000 
200413a2 l       .text	00000000 
200413a2 l       .text	00000000 
200413a4 l       .text	00000000 
200413a4 l       .text	00000000 
200413a8 l       .text	00000000 
200413aa l       .text	00000000 
200413aa l       .text	00000000 
000017fe l       .debug_loc	00000000 
00001811 l       .debug_loc	00000000 
00001845 l       .debug_loc	00000000 
00002b02 l       .debug_line	00000000 .Lline_table_start0
000005a4 l       .debug_frame	00000000 
200413aa l       .text	00000000 
00000000 l    df *ABS*	00000000 irq.cc
200413ac l       .text	00000000 
200413ac l       .text	00000000 
200413ac l       .text	00000000 
200413ac l       .text	00000000 
200413be l       .text	00000000 
200413be l       .text	00000000 
200413c0 l       .text	00000000 
200413c0 l       .text	00000000 
200413cc l       .text	00000000 
200413cc l       .text	00000000 
200413ce l       .text	00000000 
200413d2 l       .text	00000000 
200413d8 l       .text	00000000 
200413d8 l       .text	00000000 
200413d8 l       .text	00000000 
200413d8 l       .text	00000000 
200413d8 l       .text	00000000 
200413d8 l       .text	00000000 
200413ea l       .text	00000000 
200413ea l       .text	00000000 
200413ee l       .text	00000000 
200413fa l       .text	00000000 
200413fa l       .text	00000000 
200413fe l       .text	00000000 
20041404 l       .text	00000000 
20041404 l       .text	00000000 
20041404 l       .text	00000000 
20041404 l       .text	00000000 
20041404 l       .text	00000000 
20041406 l       .text	00000000 
20041406 l       .text	00000000 
20041408 l       .text	00000000 
20041420 l       .text	00000000 
2004143a l       .text	00000000 .LBB2_2
20041424 l       .text	00000000 
20041426 l       .text	00000000 
20041436 l       .text	00000000 
20041436 l       .text	00000000 
20041454 l       .text	00000000 .LBB2_3
2004143a l       .text	00000000 .LBB2_4
2004143a l       .text	00000000 
2004144e l       .text	00000000 
2004144e l       .text	00000000 
20041452 l       .text	00000000 
20041454 l       .text	00000000 
2004145a l       .text	00000000 
2004145a l       .text	00000000 
0000187b l       .debug_loc	00000000 
0000188e l       .debug_loc	00000000 
000018a1 l       .debug_loc	00000000 
000018b4 l       .debug_loc	00000000 
000018c7 l       .debug_loc	00000000 
000018da l       .debug_loc	00000000 
00002be5 l       .debug_line	00000000 .Lline_table_start0
000005c8 l       .debug_frame	00000000 
2004145a l       .text	00000000 
00000000 l    df *ABS*	00000000 edc.cc
2004145c l       .text	00000000 
2004145c l       .text	00000000 
2004145c l       .text	00000000 
2004145e l       .text	00000000 
20041464 l       .text	00000000 
2004146c l       .text	00000000 
20041474 l       .text	00000000 
20041482 l       .text	00000000 
20041486 l       .text	00000000 
20041684 l     F .text	0000004c ComputeParity(unsigned long long)
2004148a l       .text	00000000 
2004148c l       .text	00000000 
2004148e l       .text	00000000 
2004148e l       .text	00000000 
20041496 l       .text	00000000 
200414a8 l       .text	00000000 
200414aa l       .text	00000000 
200414aa l       .text	00000000 
200414ac l       .text	00000000 
200414ac l       .text	00000000 
200414ae l       .text	00000000 
200414b0 l       .text	00000000 
200414b2 l       .text	00000000 
200414b2 l       .text	00000000 
200414ba l       .text	00000000 
200414be l       .text	00000000 
200414be l       .text	00000000 
200414c8 l       .text	00000000 
200414ca l       .text	00000000 
200414cc l       .text	00000000 
200414ce l       .text	00000000 
200414d0 l       .text	00000000 
200414d2 l       .text	00000000 
200414d4 l       .text	00000000 
200414d4 l       .text	00000000 
200414dc l       .text	00000000 
200414de l       .text	00000000 
200414e0 l       .text	00000000 
200414e0 l       .text	00000000 
200414e8 l       .text	00000000 
200414ea l       .text	00000000 
200414ec l       .text	00000000 
200414ee l       .text	00000000 
200414f0 l       .text	00000000 
200414f2 l       .text	00000000 
200414f4 l       .text	00000000 
200414f4 l       .text	00000000 
200414fc l       .text	00000000 
200414fe l       .text	00000000 
20041500 l       .text	00000000 
20041500 l       .text	00000000 
20041508 l       .text	00000000 
2004150a l       .text	00000000 
2004150c l       .text	00000000 
2004150e l       .text	00000000 
20041510 l       .text	00000000 
20041510 l       .text	00000000 
20041512 l       .text	00000000 
20041514 l       .text	00000000 
20041514 l       .text	00000000 
2004151c l       .text	00000000 
2004151c l       .text	00000000 
20041526 l       .text	00000000 
20041526 l       .text	00000000 
20041528 l       .text	00000000 
2004152a l       .text	00000000 
2004152c l       .text	00000000 
2004152e l       .text	00000000 
20041530 l       .text	00000000 
20041530 l       .text	00000000 
20041534 l       .text	00000000 
20041536 l       .text	00000000 
200415f6 l       .text	00000000 .LBB0_2
20041536 l       .text	00000000 
20041538 l       .text	00000000 
2004153e l       .text	00000000 
20041540 l       .text	00000000 
20041546 l       .text	00000000 
20041546 l       .text	00000000 
2004154a l       .text	00000000 
2004154c l       .text	00000000 
2004154c l       .text	00000000 
20041550 l       .text	00000000 
20041556 l       .text	00000000 
2004155c l       .text	00000000 
20041560 l       .text	00000000 
20041564 l       .text	00000000 
20041566 l       .text	00000000 
20041568 l       .text	00000000 
20041568 l       .text	00000000 
20041572 l       .text	00000000 
2004157c l       .text	00000000 
20041586 l       .text	00000000 
20041592 l       .text	00000000 
20041596 l       .text	00000000 
20041598 l       .text	00000000 
2004159a l       .text	00000000 
2004159c l       .text	00000000 
2004159e l       .text	00000000 
200415a6 l       .text	00000000 
200415a8 l       .text	00000000 
200415ac l       .text	00000000 
200415ae l       .text	00000000 
200415b2 l       .text	00000000 
200415ba l       .text	00000000 
200415bc l       .text	00000000 
200415c0 l       .text	00000000 
200415c2 l       .text	00000000 
200415c6 l       .text	00000000 
200415c8 l       .text	00000000 
200415cc l       .text	00000000 
200415ce l       .text	00000000 
200415d2 l       .text	00000000 
200415d4 l       .text	00000000 
200415d8 l       .text	00000000 
200415da l       .text	00000000 
200415de l       .text	00000000 
200415e2 l       .text	00000000 
200415e6 l       .text	00000000 
200415e8 l       .text	00000000 
200415ec l       .text	00000000 
200415ee l       .text	00000000 
200415f0 l       .text	00000000 
200415f2 l       .text	00000000 
200415f2 l       .text	00000000 
200415f4 l       .text	00000000 
2004167a l       .text	00000000 .LBB0_3
200415f4 l       .text	00000000 
200415f6 l       .text	00000000 
200415f8 l       .text	00000000 
200415f8 l       .text	00000000 
20041602 l       .text	00000000 
2004160c l       .text	00000000 
20041616 l       .text	00000000 
20041622 l       .text	00000000 
20041626 l       .text	00000000 
20041628 l       .text	00000000 
2004162a l       .text	00000000 
2004162c l       .text	00000000 
20041630 l       .text	00000000 
20041634 l       .text	00000000 
2004163c l       .text	00000000 
20041640 l       .text	00000000 
20041642 l       .text	00000000 
20041646 l       .text	00000000 
20041648 l       .text	00000000 
2004164c l       .text	00000000 
20041650 l       .text	00000000 
20041652 l       .text	00000000 
20041656 l       .text	00000000 
2004165a l       .text	00000000 
2004165e l       .text	00000000 
20041660 l       .text	00000000 
20041664 l       .text	00000000 
20041668 l       .text	00000000 
2004166c l       .text	00000000 
2004166e l       .text	00000000 
20041672 l       .text	00000000 
20041674 l       .text	00000000 
20041678 l       .text	00000000 
2004167a l       .text	00000000 
2004167a l       .text	00000000 
20041684 l       .text	00000000 
20041684 l       .text	00000000 
20041684 l       .text	00000000 
20041684 l       .text	00000000 
20041684 l       .text	00000000 
20041684 l       .text	00000000 
20041686 l       .text	00000000 
20041694 l       .text	00000000 
20041698 l       .text	00000000 
200416a6 l       .text	00000000 
200416aa l       .text	00000000 
200416b8 l       .text	00000000 
200416bc l       .text	00000000 
200416c2 l       .text	00000000 
200416c4 l       .text	00000000 
200416c6 l       .text	00000000 
200416ca l       .text	00000000 
200416cc l       .text	00000000 
200416ce l       .text	00000000 
200416ce l       .text	00000000 
200416d0 l       .text	00000000 
200416d0 l       .text	00000000 
200416d0 l       .text	00000000 
200416d0 l       .text	00000000 
200416d0 l       .text	00000000 
200416d2 l       .text	00000000 
200416d2 l       .text	00000000 
200416d6 l       .text	00000000 
200416da l       .text	00000000 
200416dc l       .text	00000000 
200416e4 l       .text	00000000 
200416e4 l       .text	00000000 
200416e6 l       .text	00000000 
200416ea l       .text	00000000 
200416f2 l       .text	00000000 .LBB2_2
200416ea l       .text	00000000 
200416ec l       .text	00000000 
200416f6 l       .text	00000000 .LBB2_3
200416fe l       .text	00000000 
20041702 l       .text	00000000 
20041702 l       .text	00000000 
2004170c l       .text	00000000 .LBB2_5
20041706 l       .text	00000000 
2004170a l       .text	00000000 
2004170c l       .text	00000000 
20041710 l       .text	00000000 
20041712 l       .text	00000000 
20041722 l       .text	00000000 .LBB2_7
20041712 l       .text	00000000 
20041716 l       .text	00000000 
20041716 l       .text	00000000 .LBB2_6
20041716 l       .text	00000000 
2004171a l       .text	00000000 
2004171c l       .text	00000000 
2004171e l       .text	00000000 
20041722 l       .text	00000000 
20041722 l       .text	00000000 
20041724 l       .text	00000000 
20041726 l       .text	00000000 
20041726 l       .text	00000000 
20041726 l       .text	00000000 
20041726 l       .text	00000000 
20041726 l       .text	00000000 
20041728 l       .text	00000000 
2004172e l       .text	00000000 
20041730 l       .text	00000000 
20041732 l       .text	00000000 
20041732 l       .text	00000000 
20041734 l       .text	00000000 
20041734 l       .text	00000000 
2004173a l       .text	00000000 
2004173c l       .text	00000000 
20041742 l       .text	00000000 
20041742 l       .text	00000000 
20041742 l       .text	00000000 
000018ed l       .debug_loc	00000000 
00001a2a l       .debug_loc	00000000 
00001a9e l       .debug_loc	00000000 
00001abc l       .debug_loc	00000000 
00001ada l       .debug_loc	00000000 
00001af8 l       .debug_loc	00000000 
00001b16 l       .debug_loc	00000000 
00001b34 l       .debug_loc	00000000 
00001b49 l       .debug_loc	00000000 
00001b8d l       .debug_loc	00000000 
00001bb5 l       .debug_loc	00000000 
00001bda l       .debug_loc	00000000 
00001bf8 l       .debug_loc	00000000 
00001c16 l       .debug_loc	00000000 
00001c29 l       .debug_loc	00000000 
00001c4e l       .debug_loc	00000000 
00001c61 l       .debug_loc	00000000 
00001c74 l       .debug_loc	00000000 
00001c87 l       .debug_loc	00000000 
00001c9a l       .debug_loc	00000000 
00001cb2 l       .debug_loc	00000000 
00001cc5 l       .debug_loc	00000000 
00001cd8 l       .debug_loc	00000000 
00001ceb l       .debug_loc	00000000 
00002da6 l       .debug_line	00000000 .Lline_table_start0
00000614 l       .debug_frame	00000000 
20041742 l       .text	00000000 
00000000 l    df *ABS*	00000000 __cxa_pure_virtual.cc
20041744 l       .text	00000000 
20041744 l       .text	00000000 
00003326 l       .debug_line	00000000 .Lline_table_start0
00000680 l       .debug_frame	00000000 
00000000 l    df *ABS*	00000000 crt0_cheri.cc
20041744 l       .text	00000000 
20041744 l       .text	00000000 
20041744 l       .text	00000000 
20041746 l       .text	00000000 
20041746 l       .text	00000000 
20041748 l       .text	00000000 
2004174c l       .text	00000000 
2004174c l       .text	00000000 
20041750 l       .text	00000000 
20041750 l       .text	00000000 
20041756 l       .text	00000000 
20041756 l       .text	00000000 
20041756 l       .text	00000000 
20041756 l       .text	00000000 
20041756 l       .text	00000000 
20041756 l       .text	00000000 
20041756 l       .text	00000000 
20041760 l       .text	00000000 
20041764 l       .text	00000000 
20041764 l       .text	00000000 
20041766 l       .text	00000000 
20041766 l       .text	00000000 
20041766 l       .text	00000000 
20041766 l       .text	00000000 
20041766 l       .text	00000000 
20041766 l       .text	00000000 
2004176a l       .text	00000000 
2004176a l       .text	00000000 
2004176e l       .text	00000000 
20041772 l       .text	00000000 
20041774 l       .text	00000000 
20041774 l       .text	00000000 
20041774 l       .text	00000000 
20041774 l       .text	00000000 
20041774 l       .text	00000000 
20041776 l       .text	00000000 
20041776 l       .text	00000000 
20041776 l       .text	00000000 
2004177c l       .text	00000000 
2004177c l       .text	00000000 
20041790 l       .text	00000000 
200417ee l       .text	00000000 .LBB3_5
20041790 l       .text	00000000 
20041794 l       .text	00000000 
20041794 l       .text	00000000 .LBB3_1
20041794 l       .text	00000000 
20041798 l       .text	00000000 
200417a2 l       .text	00000000 
200417a2 l       .text	00000000 
200417a6 l       .text	00000000 
200417b0 l       .text	00000000 .LBB3_3
200417a6 l       .text	00000000 
200417aa l       .text	00000000 
200417aa l       .text	00000000 
200417ae l       .text	00000000 
200417b4 l       .text	00000000 .LBB3_4
200417ae l       .text	00000000 
200417b0 l       .text	00000000 
200417b0 l       .text	00000000 
200417b4 l       .text	00000000 
200417b4 l       .text	00000000 
200417ba l       .text	00000000 
200417c4 l       .text	00000000 
200417ce l       .text	00000000 
200417d6 l       .text	00000000 
200417da l       .text	00000000 
200417da l       .text	00000000 
200417de l       .text	00000000 
200417de l       .text	00000000 
200417e2 l       .text	00000000 
200417e2 l       .text	00000000 
200417e6 l       .text	00000000 
200417e8 l       .text	00000000 
200417e8 l       .text	00000000 
200417ea l       .text	00000000 
200417ee l       .text	00000000 
200417ee l       .text	00000000 
200417f8 l       .text	00000000 
200417f8 l       .text	00000000 
200417f8 l       .text	00000000 
200417f8 l       .text	00000000 
200417f8 l       .text	00000000 
200417fa l       .text	00000000 
20041800 l       .text	00000000 
20041802 l       .text	00000000 
20041804 l       .text	00000000 
20041806 l       .text	00000000 
20041808 l       .text	00000000 
2004180c l       .text	00000000 
2004180c l       .text	00000000 
20041814 l       .text	00000000 
20041814 l       .text	00000000 
2004181c l       .text	00000000 
2004181c l       .text	00000000 
20041824 l       .text	00000000 
20041824 l       .text	00000000 
2004182c l       .text	00000000 
2004182c l       .text	00000000 
2004182e l       .text	00000000 
2004182e l       .text	00000000 
20041836 l       .text	00000000 
20041836 l       .text	00000000 
2004183e l       .text	00000000 
2004183e l       .text	00000000 
20041840 l       .text	00000000 
20041840 l       .text	00000000 
20041844 l       .text	00000000 
20041844 l       .text	00000000 
20041848 l       .text	00000000 
20041848 l       .text	00000000 
2004184e l       .text	00000000 
2004184e l       .text	00000000 
20041852 l       .text	00000000 
20041852 l       .text	00000000 
20041856 l       .text	00000000 
20041856 l       .text	00000000 
2004185a l       .text	00000000 
2004185a l       .text	00000000 
2004185e l       .text	00000000 
2004185e l       .text	00000000 
20041862 l       .text	00000000 
20041862 l       .text	00000000 
20041864 l       .text	00000000 
20041864 l       .text	00000000 
2004186e l       .text	00000000 
2004186e l       .text	00000000 
20041878 l       .text	00000000 
2004187a l       .text	00000000 
2004187a l       .text	00000000 
20041884 l       .text	00000000 
20041886 l       .text	00000000 
20041888 l       .text	00000000 
2004188a l       .text	00000000 
2004188c l       .text	00000000 
2004188c l       .text	00000000 
20041892 l       .text	00000000 
20041896 l       .text	00000000 
20041896 l       .text	00000000 
200418a4 l       .text	00000000 
200418a4 l       .text	00000000 
200418a8 l       .text	00000000 
200418a8 l       .text	00000000 
200418b6 l       .text	00000000 
200418b6 l       .text	00000000 
200418ba l       .text	00000000 
200418ba l       .text	00000000 
200418c8 l       .text	00000000 
200418c8 l       .text	00000000 
200418cc l       .text	00000000 
200418cc l       .text	00000000 
200418da l       .text	00000000 
200418da l       .text	00000000 
200418de l       .text	00000000 
200418de l       .text	00000000 
200418ec l       .text	00000000 
200418ec l       .text	00000000 
200418f0 l       .text	00000000 
200418f0 l       .text	00000000 
200418fa l       .text	00000000 
200418fc l       .text	00000000 
200418fe l       .text	00000000 
20041902 l       .text	00000000 
20041902 l       .text	00000000 
20041906 l       .text	00000000 
20041906 l       .text	00000000 
20041908 l       .text	00000000 
2004190c l       .text	00000000 
2004190c l       .text	00000000 
2004190e l       .text	00000000 
20041912 l       .text	00000000 
20041920 l       .text	00000000 
20041920 l       .text	00000000 
20041928 l       .text	00000000 
20041928 l       .text	00000000 
2004192a l       .text	00000000 
2004192a l       .text	00000000 
2004192c l       .text	00000000 
2004192c l       .text	00000000 
2004192c l       .text	00000000 
00001d21 l       .debug_loc	00000000 
00001d34 l       .debug_loc	00000000 
00001d47 l       .debug_loc	00000000 
00001d5a l       .debug_loc	00000000 
00001d6d l       .debug_loc	00000000 
00001d8c l       .debug_loc	00000000 
00001d9f l       .debug_loc	00000000 
00001dd3 l       .debug_loc	00000000 
00001dfd l       .debug_loc	00000000 
00001e27 l       .debug_loc	00000000 
00001e51 l       .debug_loc	00000000 
00001e7b l       .debug_loc	00000000 
00001ea5 l       .debug_loc	00000000 
00001ecf l       .debug_loc	00000000 
00001ee2 l       .debug_loc	00000000 
00001ef5 l       .debug_loc	00000000 
00001f0a l       .debug_loc	00000000 
00001f1d l       .debug_loc	00000000 
00001f30 l       .debug_loc	00000000 
00001f43 l       .debug_loc	00000000 
00001f77 l       .debug_loc	00000000 
00001f96 l       .debug_loc	00000000 
00001fa9 l       .debug_loc	00000000 
00001fc7 l       .debug_loc	00000000 
00001fda l       .debug_loc	00000000 
00002003 l       .debug_loc	00000000 
00002016 l       .debug_loc	00000000 
00002029 l       .debug_loc	00000000 
00002047 l       .debug_loc	00000000 
0000205c l       .debug_loc	00000000 
00002072 l       .debug_loc	00000000 
00002090 l       .debug_loc	00000000 
000033a2 l       .debug_line	00000000 .Lline_table_start0
000006a4 l       .debug_frame	00000000 
2004192c l       .text	00000000 
00000000 l    df *ABS*	00000000 cheri_sanity.cc
2004192c l       .text	00000000 
2004192c l       .text	00000000 
2004192c l       .text	00000000 
2004192e l       .text	00000000 
2004192e l       .text	00000000 
20041930 l       .text	00000000 
20041930 l       .text	00000000 .LBB0_8
20041930 l       .text	00000000 
20041944 l       .text	00000000 
20041944 l       .text	00000000 .LBB0_9
20041944 l       .text	00000000 
20041958 l       .text	00000000 
20041958 l       .text	00000000 
2004195e l       .text	00000000 
2004195e l       .text	00000000 .LBB0_10
2004195e l       .text	00000000 
20041972 l       .text	00000000 
20041972 l       .text	00000000 
20041978 l       .text	00000000 
200419ea l       .text	00000000 .LBB0_5
20041978 l       .text	00000000 
2004197a l       .text	00000000 
2004197a l       .text	00000000 .LBB0_11
2004197a l       .text	00000000 
2004198e l       .text	00000000 
2004198e l       .text	00000000 
20041994 l       .text	00000000 
20041994 l       .text	00000000 
20041996 l       .text	00000000 
20041996 l       .text	00000000 .LBB0_12
20041996 l       .text	00000000 
200419aa l       .text	00000000 
200419aa l       .text	00000000 
200419b0 l       .text	00000000 
200419b0 l       .text	00000000 
200419b2 l       .text	00000000 
200419b2 l       .text	00000000 .LBB0_13
200419b2 l       .text	00000000 
200419c6 l       .text	00000000 
200419c6 l       .text	00000000 
200419cc l       .text	00000000 
200419cc l       .text	00000000 
200419ce l       .text	00000000 
200419ce l       .text	00000000 .LBB0_14
200419ce l       .text	00000000 
200419e2 l       .text	00000000 
200419e2 l       .text	00000000 
200419e8 l       .text	00000000 
20041a0a l       .text	00000000 .LBB0_7
200419e8 l       .text	00000000 
200419ea l       .text	00000000 
200419ec l       .text	00000000 
200419ec l       .text	00000000 .LBB0_15
20041a02 l       .text	00000000 
20041a04 l       .text	00000000 .LBB0_6
20041a04 l       .text	00000000 
20041a0a l       .text	00000000 .LBB0_16
20041a0a l       .text	00000000 
20041a1e l       .text	00000000 
20041a1e l       .text	00000000 
20041a22 l       .text	00000000 
20041a22 l       .text	00000000 
000020a3 l       .debug_loc	00000000 
00003772 l       .debug_line	00000000 .Lline_table_start0
00000728 l       .debug_frame	00000000 
20041a22 l       .text	00000000 
00000000 l    df *ABS*	00000000 UART_MSFT_16550.cc
20041a24 l       .text	00000000 
20041a24 l       .text	00000000 
20041a24 l       .text	00000000 
20041a24 l       .text	00000000 
20041a26 l       .text	00000000 
20041a26 l       .text	00000000 
20041a26 l       .text	00000000 
20041a26 l       .text	00000000 
20041a26 l       .text	00000000 
20041a26 l       .text	00000000 
20041a28 l       .text	00000000 
20041a28 l       .text	00000000 
20041a28 l       .text	00000000 
20041a28 l       .text	00000000 
200f02b0 l     O .data	00000008 UartBasePtr
20041a28 l       .text	00000000 
20041a28 l       .text	00000000 
20041a32 l       .text	00000000 .LBB2_1
20041a32 l       .text	00000000 
20041a34 l       .text	00000000 
20041a38 l       .text	00000000 
20041a3a l       .text	00000000 
20041a3c l       .text	00000000 
20041a40 l       .text	00000000 
20041a42 l       .text	00000000 
20041a44 l       .text	00000000 
20041a44 l       .text	00000000 
20041a44 l       .text	00000000 
20041a44 l       .text	00000000 
20041a44 l       .text	00000000 
20041a46 l       .text	00000000 
20041a4e l       .text	00000000 
20041a54 l       .text	00000000 .LBB3_2
20041a4e l       .text	00000000 
20041a52 l       .text	00000000 
20041a58 l       .text	00000000 
20041a74 l       .text	00000000 .LBB3_5
20041a58 l       .text	00000000 
20041a5c l       .text	00000000 .LBB3_3
20041a5c l       .text	00000000 
20041a5e l       .text	00000000 
20041a62 l       .text	00000000 
20041a64 l       .text	00000000 
20041a6c l       .text	00000000 
20041a6e l       .text	00000000 
20041a70 l       .text	00000000 
20041a74 l       .text	00000000 
20041a74 l       .text	00000000 
20041a76 l       .text	00000000 
20041a76 l       .text	00000000 
20041a76 l       .text	00000000 
20041a76 l       .text	00000000 
20041a76 l       .text	00000000 
20041a78 l       .text	00000000 
20041a86 l       .text	00000000 .LBB4_2
20041a80 l       .text	00000000 
20041a84 l       .text	00000000 
20041a86 l       .text	00000000 
20041a8a l       .text	00000000 
20041aa4 l       .text	00000000 .LBB4_5
20041a8a l       .text	00000000 
20041a8e l       .text	00000000 .LBB4_3
20041a8e l       .text	00000000 
20041a92 l       .text	00000000 
20041a94 l       .text	00000000 
20041a96 l       .text	00000000 
20041a9a l       .text	00000000 
20041a9e l       .text	00000000 
20041aa0 l       .text	00000000 
20041aa4 l       .text	00000000 
20041aa6 l       .text	00000000 
20041aa6 l       .text	00000000 
20041aa6 l       .text	00000000 
20041aa6 l       .text	00000000 
20041aa6 l       .text	00000000 
20041aa8 l       .text	00000000 
20041aa8 l       .text	00000000 
20041aaa l       .text	00000000 
20041ab6 l       .text	00000000 .LBB5_1
20041ab6 l       .text	00000000 
20041aba l       .text	00000000 
20041abe l       .text	00000000 
20041ac2 l       .text	00000000 
20041ac6 l       .text	00000000 
20041aca l       .text	00000000 
20041ace l       .text	00000000 
20041ad0 l       .text	00000000 
20041ad8 l       .text	00000000 
20041adc l       .text	00000000 
20041aea l       .text	00000000 
20041aee l       .text	00000000 
20041af6 l       .text	00000000 
20041afa l       .text	00000000 
20041b00 l       .text	00000000 
20041b02 l       .text	00000000 
20041b04 l       .text	00000000 
20041b06 l       .text	00000000 
20041b06 l       .text	00000000 
20041b10 l       .text	00000000 
20041b10 l       .text	00000000 
20041b12 l       .text	00000000 
20041b16 l       .text	00000000 
20041b16 l       .text	00000000 
20041b1a l       .text	00000000 
20041b1a l       .text	00000000 
20041b1c l       .text	00000000 
20041b1c l       .text	00000000 
20041b1e l       .text	00000000 
20041b1e l       .text	00000000 
20041b20 l       .text	00000000 
20041b20 l       .text	00000000 
20041b24 l       .text	00000000 
20041b24 l       .text	00000000 
20041b26 l       .text	00000000 
20041b2a l       .text	00000000 
20041b2e l       .text	00000000 
20041b30 l       .text	00000000 
20041b38 l       .text	00000000 
20041b3a l       .text	00000000 
20041b3c l       .text	00000000 
20041b3e l       .text	00000000 
20041b46 l       .text	00000000 
20041b48 l       .text	00000000 
20041b4e l       .text	00000000 
20041b4e l       .text	00000000 
20041b56 l       .text	00000000 
20041b56 l       .text	00000000 
20041b5a l       .text	00000000 
20041b5e l       .text	00000000 
20041b5e l       .text	00000000 
20041b64 l       .text	00000000 
20041b64 l       .text	00000000 
000020e2 l       .debug_loc	00000000 
000020f5 l       .debug_loc	00000000 
00002113 l       .debug_loc	00000000 
00002133 l       .debug_loc	00000000 
00002146 l       .debug_loc	00000000 
00002164 l       .debug_loc	00000000 
00002184 l       .debug_loc	00000000 
00002197 l       .debug_loc	00000000 
000021aa l       .debug_loc	00000000 
000021bd l       .debug_loc	00000000 
000021d0 l       .debug_loc	00000000 
000021e3 l       .debug_loc	00000000 
000021f6 l       .debug_loc	00000000 
00002209 l       .debug_loc	00000000 
00002227 l       .debug_loc	00000000 
0000223a l       .debug_loc	00000000 
0000392f l       .debug_line	00000000 .Lline_table_start0
00000754 l       .debug_frame	00000000 
20041b64 l       .text	00000000 
20040080 g     F .init	00000108 __start
200f7000 g       *ABS*	00000000 _stack_end
200f8000 g       *ABS*	00000000 _stack_start
200f0000 g       .data	00000000 _cgp_start
200f02c0 g       .data	00000000 _cgp_end
20040190 g       .text	00000000 _pcc_start
20041d00 g       .text	00000000 _pcc_end
200417f8 g     F .text	00000134 cstart
200f02c0 g       .data	00000000 _heap_start
200f7000 g       *ABS*	00000000 _heap_end
20040188 g       __cap_relocs	00000000 __cap_relocs
20040188 g       __cap_relocs	00000000 __cap_relocs_end
200401f0 g       .text	00000000 cheri_intr_init
20040254 g       .text	00000000 cheri_sw_intr_test
200402ba g       .text	00000000 cheri_tmr_intr_test
20040332 g       .text	00000000 cheri_tsafe_test
200403b2 g       .text	00000000 cheri_tbre_test
200404a8 g       .text	00000000 cheri_stkclr_test
20040190 g       .text	00000000 read_mcycle
20040588 g     F .text	00000014 isctype(int, int)
200f0000 g     O .data	00000080 ctype_table
2004059c g     F .text	0000004e realloc(void*, unsigned int)
2004074c g     F .text	000000c8 free(void*)
200408b2 g     F .text	000000ac malloc(unsigned int)
200412c8 g     F .text	0000001c memcpy(void*, void const*, unsigned int)
200405ec g     F .text	0000015e strtoul(char const*, char**, int)
200f0090 g     O .data	00000008 HeapCap
20040814 g     F .text	00000024 setMallocDescriptor(malloc_s*, __uintcap_t, __uintcap_t, unsigned int)
20040838 g     F .text	0000001c get_ptr(unsigned long, unsigned int)
200f02a0 g     O .data	00000008 globalRoot
20040854 g     F .text	0000005e malloc_init(void*, unsigned int)
200f0080 g     O .data	00000001 MallocInit
20040960 g     F .text	00000002 operator delete(void*)
20040962 g     F .text	00000002 operator delete(void*, unsigned int)
20040964 g     F .text	00000016 shift_lfsr(unsigned int*, unsigned int)
2004097a g     F .text	0000005e rand()
200f0084 g     O .data	00000004 lfsr32
200f0088 g     O .data	00000004 lfsr31
200409d8 g     F .text	00000018 srand(unsigned int)
200409f0 g     F .text	00000024 random_range(unsigned int, unsigned int)
20040a14 g     F .text	00000030 random_fill(unsigned int*, unsigned int)
20040a44 g     F .text	00000002 operator new(unsigned int)
20040a48 g     F .text	00000030 calloc(unsigned int, unsigned int)
20041360 g     F .text	00000014 memset(void*, int, unsigned int)
20040a78 g     F .text	00000190 strtol(char const*, char**, int)
20040c08 g     F .text	00000378 pvsprintf(char*, char const*, void*)
20041218 g     F .text	00000014 strlen(char const*)
20041008 g     F .text	00000062 cfprintf(unsigned int**, char const*, ...)
20041a44 g     F .text	00000032 _write(int, char const*, int)
2004106a g     F .text	00000048 pfprintf(unsigned int**, char const*, ...)
200410b2 g     F .text	0000001a psprintf(char*, char const*, ...)
200410cc g     F .text	0000003c print_test_header(char const*)
20041108 g     F .text	0000004a print_array(unsigned int*, char const*, unsigned int)
20041154 g     F .text	0000001e fputc(int, unsigned int**)
20041174 g     F .text	00000026 fputs(char const*, unsigned int**)
2004119c g     F .text	0000005a fgets(char*, int, unsigned int**)
20041a76 g     F .text	00000030 _read(int, char*, int)
200411f8 g     F .text	00000020 fgetc(unsigned int**)
2004122c g     F .text	00000026 strcmp(char const*, char const*)
20041254 g     F .text	00000032 memset_rand(void*, unsigned int)
20041288 g     F .text	00000024 memcmp(void const*, void const*, unsigned int)
200412ac g     F .text	0000001c strcpy(char*, char const*)
200412e4 g     F .text	00000022 wordcmp(void const*, void const*, int)
20041308 g     F .text	0000001c wordcpy(void*, void const*, int)
20041324 g     F .text	0000003a strncpy(char*, char const*, unsigned int)
20041374 g     F .text	00000012 wordset(void*, unsigned int, unsigned int)
20041388 g     F .text	00000022 memset_unique(void*, unsigned int)
200413ac g     F .text	0000002c register_handler(unsigned int, void (*)())
200f00c0 g     O .data	00000180 irq_array
200f0240 g     O .data	00000030 irq_vector_exists
200413d8 g     F .text	0000002c unregister_handler(unsigned int)
20041404 g     F .text	00000056 dispatch_irqs(unsigned int)
20041744 g     F .text	00000012 _exit(int)
2004145c g     F .text	00000228 GenerateECC(unsigned long long, ENCRYPTION_TYPE_E)
200416d0 g     F .text	00000056 ConCatAddrData(unsigned int, unsigned int, unsigned int, ENCRYPTION_TYPE_E)
20041726 g     F .text	0000001c ConstructECC(unsigned int, unsigned int, unsigned int, ENCRYPTION_TYPE_E)
20041744 g     F .text	00000000 __cxa_pure_virtual
20041756 g     F .text	00000010 from_root(unsigned int)
20041766 g     F .text	0000000e cap_build(void*, unsigned int, unsigned int, unsigned int)
20041774 g     F .text	00000084 populate_caprelocs(CapReloc*, unsigned int)
200f02a8 g     O .data	00000008 pccRoot
200f0000 g       .data	00000000 _data_start
200f008c g       .data	00000000 _bss_start
200f008c g       .data	00000000 _data_end
200f02b8 g       .data	00000000 _bss_end
200f0280 g     O .data	00000008 simReg
200f0278 g     O .data	00000008 tmrReg
200f0270 g     O .data	00000008 uartReg
200f0288 g     O .data	00000008 rngReg
200f0290 g     O .data	00000008 cfgReg
200f0298 g     O .data	00000008 memRands
20041aa6 g     F .text	000000be uart_init(void*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)
2004192c g     F .text	000000f6 main
20040000 g     O .init	00000080 mtvecArr
20041a24 g     F .text	00000002 getLock(unsigned long*)
20041a26 g     F .text	00000002 releaseLock(unsigned long*)
20041a28 g     F .text	0000001c _flush(int)
00000008 g       *ABS*	00000000 CAPSIZE
00001000 g       *ABS*	00000000 __stack_size
20040190 g       .text	00000000 _code_start
20041b64 g       .text	00000000 _code_end
20041b64 g       .text	00000000 _rodata_start
20041cfb g       .text	00000000 _rodata_end
CAPABILITY RELOCATION RECORDS:


Disassembly of section .init:

20040000 <mtvecArr>:
20040000: 00 00 00 00 00 00 00 00         ........
20040008: 00 00 00 00 00 00 00 00         ........
20040010: 00 00 00 00 00 00 00 00         ........
20040018: 00 00 00 00 00 00 00 00         ........
20040020: 00 00 00 00 00 00 00 00         ........
20040028: 00 00 00 00 00 00 00 00         ........
20040030: 00 00 00 00 00 00 00 00         ........
20040038: 00 00 00 00 00 00 00 00         ........
20040040: 00 00 00 00 00 00 00 00         ........
20040048: 00 00 00 00 00 00 00 00         ........
20040050: 00 00 00 00 00 00 00 00         ........
20040058: 00 00 00 00 00 00 00 00         ........
20040060: 00 00 00 00 00 00 00 00         ........
20040068: 00 00 00 00 00 00 00 00         ........
20040070: 00 00 00 00 00 00 00 00         ........
20040078: 00 00 00 00 00 00 00 00         ........

20040080 <__start>:
; 	ZERO c1
20040080: db 00 a0 fe  	cmove	cra, cnull
; 	ZERO c2
20040084: 5b 01 a0 fe  	cmove	csp, cnull
; 	ZERO c3
20040088: db 01 a0 fe  	cmove	cgp, cnull
; 	ZERO c4
2004008c: 5b 02 a0 fe  	cmove	ctp, cnull
; 	ZERO c5
20040090: db 02 a0 fe  	cmove	ct0, cnull
; 	ZERO c6
20040094: 5b 03 a0 fe  	cmove	ct1, cnull
; 	ZERO c7
20040098: db 03 a0 fe  	cmove	ct2, cnull
; 	ZERO c8
2004009c: 5b 04 a0 fe  	cmove	cs0, cnull
; 	ZERO c9
200400a0: db 04 a0 fe  	cmove	cs1, cnull
; 	ZERO c10
200400a4: 5b 05 a0 fe  	cmove	ca0, cnull
; 	ZERO c11
200400a8: db 05 a0 fe  	cmove	ca1, cnull
; 	ZERO c12
200400ac: 5b 06 a0 fe  	cmove	ca2, cnull
; 	ZERO c13
200400b0: db 06 a0 fe  	cmove	ca3, cnull
; 	ZERO c14
200400b4: 5b 07 a0 fe  	cmove	ca4, cnull
; 	ZERO c15
200400b8: db 07 a0 fe  	cmove	ca5, cnull
; 	cspecialr		cs0, mtdc
200400bc: 5b 04 d0 03  	cspecialr	cs0, mtdc
; 	li				a1, ~CHERI_PERM_GLOBAL
200400c0: f9 55        	addi	a1, zero, -2
; 	candperm		ca0, cs0, a1
200400c2: 5b 05 b4 1a  	candperm	ca0, cs0, a1
; 	LA_ABS			a1, _stack_end
200400c6: b7 75 0f 20  	lui	a1, 131319
200400ca: 93 85 05 00  	mv	a1, a1
; 	LA_ABS			a2, _stack_start
200400ce: 37 86 0f 20  	lui	a2, 131320
200400d2: 13 06 06 00  	mv	a2, a2
; 	sub				a2, a2, a1
200400d6: 0d 8e        	sub	a2, a2, a1
; 	csetaddr		ca0, ca0, a1
200400d8: 5b 05 b5 20  	csetaddr	ca0, ca0, a1
; 	csetbounds		ca0, ca0, a2
200400dc: 5b 05 c5 10  	csetbounds	ca0, ca0, a2
; 	cincoffset		csp, ca0, a2
200400e0: 5b 01 c5 22  	cincoffset	csp, ca0, a2
; 	li				a1, ~0
200400e4: fd 55        	addi	a1, zero, -1
; 	candperm		ca0, cs0, a1
200400e6: 5b 05 b4 1a  	candperm	ca0, cs0, a1
; 	LA_ABS			a1, _cgp_start
200400ea: b7 05 0f 20  	lui	a1, 131312
200400ee: 93 85 05 00  	mv	a1, a1
; 	LA_ABS			a2, _cgp_end
200400f2: 37 06 0f 20  	lui	a2, 131312
200400f6: 13 06 06 2c  	addi	a2, a2, 704
; 	sub				a2, a2, a1
200400fa: 0d 8e        	sub	a2, a2, a1
; 	csetaddr		ca0, ca0, a1
200400fc: 5b 05 b5 20  	csetaddr	ca0, ca0, a1
; 	csetbounds		ca0, ca0, a2
20040100: 5b 05 c5 10  	csetbounds	ca0, ca0, a2
; 	srli			a2, a2, 1
20040104: 05 82        	srli	a2, a2, 1
; 	cincoffset		cgp, ca0, a2
20040106: db 01 c5 22  	cincoffset	cgp, ca0, a2
; 	auipcc			cs1, 0
2004010a: 97 04 00 00  	auipcc	cs1, 0
; 	LA_ABS			a1, _pcc_start
2004010e: b7 05 04 20  	lui	a1, 131136
20040112: 93 85 05 19  	addi	a1, a1, 400
; 	LA_ABS			a2, _pcc_end
20040116: 37 26 04 20  	lui	a2, 131138
2004011a: 13 06 06 d0  	addi	a2, a2, -768
; 	sub				a2, a2, a1
2004011e: 0d 8e        	sub	a2, a2, a1
; 	csetaddr		ca0, cs1, a1
20040120: 5b 85 b4 20  	csetaddr	ca0, cs1, a1
; 	csetbounds		ca0, ca0, a2
20040124: 5b 05 c5 10  	csetbounds	ca0, ca0, a2
; 	LA_ABS			a1, cstart
20040128: b7 15 04 20  	lui	a1, 131137
2004012c: 93 85 85 7f  	addi	a1, a1, 2040
; 	csetaddr		cra, ca0, a1
20040130: db 00 b5 20  	csetaddr	cra, ca0, a1
; 	cmove			ca0, cs1
20040134: 5b 85 a4 fe  	cmove	ca0, cs1
; 	cmove			ca1, cs0
20040138: db 05 a4 fe  	cmove	ca1, cs0
; 	LA_ABS			a3, _heap_start
2004013c: b7 06 0f 20  	lui	a3, 131312
20040140: 93 86 06 2c  	addi	a3, a3, 704
; 	csetaddr		ca2, ca1, a3
20040144: 5b 86 d5 20  	csetaddr	ca2, ca1, a3
; 	LA_ABS			a4, _heap_end
20040148: 37 77 0f 20  	lui	a4, 131319
2004014c: 13 07 07 00  	mv	a4, a4
; 	sub				a3, a4, a3
20040150: b3 06 d7 40  	sub	a3, a4, a3
; 	LA_ABS			a5, __cap_relocs
20040154: b7 07 04 20  	lui	a5, 131136
20040158: 93 87 87 18  	addi	a5, a5, 392
; 	csetaddr		ca4, ca1, a5
2004015c: 5b 87 f5 20  	csetaddr	ca4, ca1, a5
; 	LA_ABS			t0, __cap_relocs_end
20040160: b7 02 04 20  	lui	t0, 131136
20040164: 93 82 82 18  	addi	t0, t0, 392
; 	sub				a5, t0, a5
20040168: b3 87 f2 40  	sub	a5, t0, a5
; 	li				t0, 20
2004016c: d1 42        	addi	t0, zero, 20
; 	divu			a5, a5, t0
2004016e: b3 d7 57 02  	divu	a5, a5, t0
;   li a0,  0x88                        # set mstatus.mie=1, mstatus.mpie=1
20040172: 13 05 80 08  	addi	a0, zero, 136
;   csrs mstatus, a0 
20040176: 73 20 05 30  	csrs	mstatus, a0
;   li a0,  0x1800                      # set mstatus.mpp=00
2004017a: 09 65        	lui	a0, 2
2004017c: 13 05 05 80  	addi	a0, a0, -2048
;   csrc mstatus, a0 
20040180: 73 30 05 30  	csrc	mstatus, a0
; 	cjalr			cra
20040184: 82 90        	cjalr	cra
; 	unimp
20040186: 00 00        	unimp	

Disassembly of section .text:

20040190 <read_mcycle>:
;     csrr a0, mcycle
20040190: 73 25 00 b0  	csrr	a0, mcycle
;     cret
20040194: 82 80        	cret
20040196: 13 00 00 00  	nop
2004019a: 13 00 00 00  	nop
2004019e: 01 00        	nop

200401a0 <cheri_fault_handler>:
;     cincoffset csp, csp, -32    
200401a0: 3d 71        	cincoffset	csp, csp, -32
;     csc cra, 0(csp)
200401a2: 06 e0        	csc	cra, 0(csp)
;     csc ct0, 8(csp)
200401a4: 16 e4        	csc	ct0, 8(csp)
;     csc ct1, 16(csp)
200401a6: 1a e8        	csc	ct1, 16(csp)
;     nop
200401a8: 01 00        	nop
;     csrr t0, mcause
200401aa: f3 22 20 34  	csrr	t0, mcause
;     andi t0, t0, 0xff
200401ae: 93 f2 f2 0f  	andi	t0, t0, 255
;     li   t1, 3 
200401b2: 0d 43        	addi	t1, zero, 3
;     bne  t0, t1, isr_n1
200401b4: 63 96 62 00  	bne	t0, t1, 0x200401c0 <isr_n1>
;     li    t1, 0x8             // clear the sw mie bit
200401b8: 21 43        	addi	t1, zero, 8
;     csrrc t0, mie, t1
200401ba: f3 32 43 30  	csrrc	t0, mie, t1
;     j isr_done
200401be: 15 a0        	j	0x200401e2 <isr_done>

200401c0 <isr_n1>:
;     li   t1, 7
200401c0: 1d 43        	addi	t1, zero, 7
;     bne  t0, t1, isr_n2
200401c2: 63 97 62 00  	bne	t0, t1, 0x200401d0 <isr_n2>
;     li    t1, 0x80            // clear the tmr mie bit
200401c6: 13 03 00 08  	addi	t1, zero, 128
;     csrrc t0, mie, t1
200401ca: f3 32 43 30  	csrrc	t0, mie, t1
;     j isr_done
200401ce: 11 a8        	j	0x200401e2 <isr_done>

200401d0 <isr_n2>:
;     li   t1, 11 
200401d0: 2d 43        	addi	t1, zero, 11
;     bne  t0, t1, isr_done
200401d2: 63 98 62 00  	bne	t0, t1, 0x200401e2 <isr_done>
;     li    t1, 0x800           // clear the tmr mie bit
200401d6: 05 63        	lui	t1, 1
200401d8: 13 03 03 80  	addi	t1, t1, -2048
;     csrrc t0, mie, t1
200401dc: f3 32 43 30  	csrrc	t0, mie, t1
;     j isr_done
200401e0: 09 a0        	j	0x200401e2 <isr_done>

200401e2 <isr_done>:
;     nop
200401e2: 01 00        	nop
;     clc cra, 0(csp)
200401e4: 82 60        	clc	cra, 0(csp)
;     clc ct0, 8(csp)
200401e6: a2 62        	clc	ct0, 8(csp)
;     clc ct1, 16(csp)
200401e8: 42 63        	clc	ct1, 16(csp)
;     cincoffset csp, csp, 32     
200401ea: 05 61        	cincoffset	csp, csp, 32
;     mret
200401ec: 73 00 20 30  	mret	

200401f0 <cheri_intr_init>:
;     cincoffset csp, csp, -32
200401f0: 3d 71        	cincoffset	csp, csp, -32
;     csc ct0, 0(csp)
200401f2: 16 e0        	csc	ct0, 0(csp)
;     csc ct1, 8(csp)
200401f4: 1a e4        	csc	ct1, 8(csp)
;     csc ct2, 16(csp)
200401f6: 1e e8        	csc	ct2, 16(csp)
;     cspecialr ct0, mtcc
200401f8: db 02 c0 03  	cspecialr	ct0, mtcc

200401fc <.Ltmp0>:
; 1:    auipcc  ct1, %cheri_compartment_pccrel_hi(cheri_fault_handler)
200401fc: 17 03 00 00  	auipcc	ct1, 0
;     cincoffset ct1, ct1, %cheri_compartment_pccrel_lo(1b)
20040200: 5b 13 43 fa  	cincoffset	ct1, ct1, -92
;     csetaddr ct0, ct0, t1
20040204: db 82 62 20  	csetaddr	ct0, ct0, t1
;     cspecialw mtcc, ct0                 # bit0 = 1'b0: single ISR mode
20040208: 5b 80 c2 03  	cspecialw	mtcc, ct0
;     cspecialr ct0, mtdc
2004020c: db 02 d0 03  	cspecialr	ct0, mtdc
;     li t1, 0x10000000                  # PLIC PRI registers 
20040210: 37 03 00 10  	lui	t1, 65536
;     csetaddr ct0, ct0, t1
20040214: db 82 62 20  	csetaddr	ct0, ct0, t1
;     li t1, 7 
20040218: 1d 43        	addi	t1, zero, 7
;     csw t1, 4(ct0)                      # source ID 1 (irqs 0, tbre)
2004021a: 23 a2 62 00  	csw	t1, 4(ct0)
;     li t1, 5
2004021e: 15 43        	addi	t1, zero, 5
;     csw t1, 8(ct0)                      # source ID 2 (irqs 1, periph)
20040220: 23 a4 62 00  	csw	t1, 8(ct0)
;     li t1, 0x10200000                  # PLIC intr threshold
20040224: 37 03 20 10  	lui	t1, 66048
;     csetaddr ct0, ct0, t1
20040228: db 82 62 20  	csetaddr	ct0, ct0, t1
;     li t1, 5 
2004022c: 15 43        	addi	t1, zero, 5
;     csw t1, (ct0)                       
2004022e: 23 a0 62 00  	csw	t1, 0(ct0)
;     li t1, 0x10002000                  # PLIC intr enable
20040232: 37 23 00 10  	lui	t1, 65538
;     csetaddr ct0, ct0, t1
20040236: db 82 62 20  	csetaddr	ct0, ct0, t1
;     li t1, 3
2004023a: 0d 43        	addi	t1, zero, 3
;     csw t1, (ct0)                        
2004023c: 23 a0 62 00  	csw	t1, 0(ct0)
;     li t1, 0x800                        # enable machine-mode ext(/tmr/sw) interrupts
20040240: 05 63        	lui	t1, 1
20040242: 13 03 03 80  	addi	t1, t1, -2048
;     csrs mie, t1
20040246: 73 20 43 30  	csrs	mie, t1
;     clc ct0, 0(csp)
2004024a: 82 62        	clc	ct0, 0(csp)
;     clc ct1, 8(csp)
2004024c: 22 63        	clc	ct1, 8(csp)
;     clc ct2, 16(csp)
2004024e: c2 63        	clc	ct2, 16(csp)
;     cincoffset csp, csp, 32 
20040250: 05 61        	cincoffset	csp, csp, 32
;     cret
20040252: 82 80        	cret

20040254 <cheri_sw_intr_test>:
;     cincoffset csp, csp, -88    # SP-16
20040254: 5b 11 81 fa  	cincoffset	csp, csp, -88
;     csc c1, 0(csp)
20040258: 06 e0        	csc	cra, 0(csp)
;     csc c3, 8(csp)
2004025a: 0e e4        	csc	cgp, 8(csp)
;     csc c4, 16(csp)
2004025c: 12 e8        	csc	ctp, 16(csp)
;     csc c5, 24(csp)
2004025e: 16 ec        	csc	ct0, 24(csp)
;     csc c6, 32(csp)
20040260: 1a f0        	csc	ct1, 32(csp)
;     csc c7, 40(csp)
20040262: 1e f4        	csc	ct2, 40(csp)
;     csc c8, 48(csp)
20040264: 22 f8        	csc	cs0, 48(csp)
;     csc c9, 56(csp)
20040266: 26 fc        	csc	cs1, 56(csp)
;     li x9, 0x008                        # enable machine-mode ext/tmr/sw interrupts
20040268: a1 44        	addi	s1, zero, 8
;     csrs mie, x9
2004026a: 73 a0 44 30  	csrs	mie, s1
;     cspecialr c5, mtdc
2004026e: db 02 d0 03  	cspecialr	ct0, mtdc
;     li x11, 0x14001000                  # CLINT reg base
20040272: b7 15 00 14  	lui	a1, 81921
;     csetaddr c5, c5, x11
20040276: db 82 b2 20  	csetaddr	ct0, ct0, a1
;     li x11, 1
2004027a: 85 45        	addi	a1, zero, 1
;     csw x11, (c5)                       # set software interrupt
2004027c: 23 a0 b2 00  	csw	a1, 0(ct0)
;     nop
20040280: 01 00        	nop
;     nop
20040282: 01 00        	nop
;     nop
20040284: 01 00        	nop
;     csrr x9, mcause
20040286: f3 24 20 34  	csrr	s1, mcause
;     andi x9, x9, 0xff
2004028a: 93 f4 f4 0f  	andi	s1, s1, 255
;     li   x8, 0x3
2004028e: 0d 44        	addi	s0, zero, 3
;     bne x8, x9, sw_intr_fail
20040290: 63 14 94 00  	bne	s0, s1, 0x20040298 <sw_intr_fail>
;     li a0, 0
20040294: 01 45        	mv	a0, zero
;     j sw_intr_done
20040296: 21 a0        	j	0x2004029e <sw_intr_done>

20040298 <sw_intr_fail>:
;     li a0, 0xf1
20040298: 13 05 10 0f  	addi	a0, zero, 241
;     j sw_intr_done
2004029c: 09 a0        	j	0x2004029e <sw_intr_done>

2004029e <sw_intr_done>:
;     li x11, 0
2004029e: 81 45        	mv	a1, zero
;     csw x11, (c5)                         # clear software interrupt
200402a0: 23 a0 b2 00  	csw	a1, 0(ct0)
;     clc c1, 0(csp)
200402a4: 82 60        	clc	cra, 0(csp)
;     clc c3, 8(csp)
200402a6: a2 61        	clc	cgp, 8(csp)
;     clc c4, 16(csp)
200402a8: 42 62        	clc	ctp, 16(csp)
;     clc c5, 24(csp)
200402aa: e2 62        	clc	ct0, 24(csp)
;     clc c6, 32(csp)
200402ac: 02 73        	clc	ct1, 32(csp)
;     clc c7, 40(csp)
200402ae: a2 73        	clc	ct2, 40(csp)
;     clc c8, 48(csp)
200402b0: 42 74        	clc	cs0, 48(csp)
;     clc c9, 56(csp)
200402b2: e2 74        	clc	cs1, 56(csp)
;     cincoffset csp, csp, 88 
200402b4: 5b 11 81 05  	cincoffset	csp, csp, 88
;     cret
200402b8: 82 80        	cret

200402ba <cheri_tmr_intr_test>:
;     cincoffset csp, csp, -88    # SP-16
200402ba: 5b 11 81 fa  	cincoffset	csp, csp, -88
;     csc c1, 0(csp)
200402be: 06 e0        	csc	cra, 0(csp)
;     csc c3, 8(csp)
200402c0: 0e e4        	csc	cgp, 8(csp)
;     csc c4, 16(csp)
200402c2: 12 e8        	csc	ctp, 16(csp)
;     csc c5, 24(csp)
200402c4: 16 ec        	csc	ct0, 24(csp)
;     csc c6, 32(csp)
200402c6: 1a f0        	csc	ct1, 32(csp)
;     csc c7, 40(csp)
200402c8: 1e f4        	csc	ct2, 40(csp)
;     csc c8, 48(csp)
200402ca: 22 f8        	csc	cs0, 48(csp)
;     csc c9, 56(csp)
200402cc: 26 fc        	csc	cs1, 56(csp)
;     cspecialr c5, mtdc
200402ce: db 02 d0 03  	cspecialr	ct0, mtdc
;     li x11, 0x14001010                  # CLINT mtimecmp_lo
200402d2: b7 15 00 14  	lui	a1, 81921
200402d6: c1 05        	addi	a1, a1, 16
;     csetaddr c5, c5, x11
200402d8: db 82 b2 20  	csetaddr	ct0, ct0, a1
;     li x11, 0xffffffff                  # set mtimecmp to a large value to clear timer interrupt
200402dc: fd 55        	addi	a1, zero, -1
;     csw x11, 8(c5)                       
200402de: 23 a4 b2 00  	csw	a1, 8(ct0)
;     li x9, 0x080                        # enable machine-mode ext/tmr/sw interrupts
200402e2: 93 04 00 08  	addi	s1, zero, 128
;     csrs mie, x9
200402e6: 73 a0 44 30  	csrs	mie, s1
;     clw x11, (c5)
200402ea: 83 a5 02 00  	clw	a1, 0(ct0)
;     addi x11, x11, 0xff
200402ee: 93 85 f5 0f  	addi	a1, a1, 255
;     csw x11, 8(c5)                      # set mtimecmp = mtime+255
200402f2: 23 a4 b2 00  	csw	a1, 8(ct0)
;     nop
200402f6: 01 00        	nop
;     wfi
200402f8: 73 00 50 10  	wfi	
;     nop
200402fc: 01 00        	nop
;     csrr x9, mcause
200402fe: f3 24 20 34  	csrr	s1, mcause
;     andi x9, x9, 0xff
20040302: 93 f4 f4 0f  	andi	s1, s1, 255
;     li   x8, 0x7
20040306: 1d 44        	addi	s0, zero, 7
;     bne x8, x9, tmr_intr_fail
20040308: 63 14 94 00  	bne	s0, s1, 0x20040310 <tmr_intr_fail>
;     li a0, 0
2004030c: 01 45        	mv	a0, zero
;     j tmr_intr_done
2004030e: 21 a0        	j	0x20040316 <tmr_intr_done>

20040310 <tmr_intr_fail>:
;     li a0, 0xf1
20040310: 13 05 10 0f  	addi	a0, zero, 241
;     j tmr_intr_done
20040314: 09 a0        	j	0x20040316 <tmr_intr_done>

20040316 <tmr_intr_done>:
;     li x11, 0xffffffff                  # set mtimecmp to a large value to clear timer interrupt
20040316: fd 55        	addi	a1, zero, -1
;     csw x11, 8(c5)                       
20040318: 23 a4 b2 00  	csw	a1, 8(ct0)
;     clc c1, 0(csp)
2004031c: 82 60        	clc	cra, 0(csp)
;     clc c3, 8(csp)
2004031e: a2 61        	clc	cgp, 8(csp)
;     clc c4, 16(csp)
20040320: 42 62        	clc	ctp, 16(csp)
;     clc c5, 24(csp)
20040322: e2 62        	clc	ct0, 24(csp)
;     clc c6, 32(csp)
20040324: 02 73        	clc	ct1, 32(csp)
;     clc c7, 40(csp)
20040326: a2 73        	clc	ct2, 40(csp)
;     clc c8, 48(csp)
20040328: 42 74        	clc	cs0, 48(csp)
;     clc c9, 56(csp)
2004032a: e2 74        	clc	cs1, 56(csp)
;     cincoffset csp, csp, 88 
2004032c: 5b 11 81 05  	cincoffset	csp, csp, 88
;     cret
20040330: 82 80        	cret

20040332 <cheri_tsafe_test>:
;     cincoffset csp, csp, -88    # SP-16
20040332: 5b 11 81 fa  	cincoffset	csp, csp, -88
;     csc c1, 0(csp)
20040336: 06 e0        	csc	cra, 0(csp)
;     csc c3, 8(csp)
20040338: 0e e4        	csc	cgp, 8(csp)
;     csc c4, 16(csp)
2004033a: 12 e8        	csc	ctp, 16(csp)
;     csc c5, 24(csp)
2004033c: 16 ec        	csc	ct0, 24(csp)
;     csc c6, 32(csp)
2004033e: 1a f0        	csc	ct1, 32(csp)
;     csc c7, 40(csp)
20040340: 1e f4        	csc	ct2, 40(csp)
;     csc c8, 48(csp)
20040342: 22 f8        	csc	cs0, 48(csp)
;     csc c9, 56(csp)
20040344: 26 fc        	csc	cs1, 56(csp)
;     cspecialrw c6, 29, c0         # read MTDC address 'd29, memory root
20040346: 5b 03 d0 03  	cspecialr	ct1, mtdc
;     lui x11, 0x20048
2004034a: b7 85 04 20  	lui	a1, 131144
;     csetaddr c6, c6, x11          # set address to 0x2004_8000
2004034e: 5b 03 b3 20  	csetaddr	ct1, ct1, a1
;     cmove c8, c6
20040352: 5b 04 a3 fe  	cmove	cs0, ct1
;     li x11, 0x2004daf0
20040356: b7 e5 04 20  	lui	a1, 131150
2004035a: 93 85 05 af  	addi	a1, a1, -1296
;     csetaddr c11, c6, x11
2004035e: db 05 b3 20  	csetaddr	ca1, ct1, a1
;     csetboundsimm c11, c11, 0x800    
20040362: db a5 05 80  	csetbounds	ca1, ca1, 2048
;     csc c11, 32(c8)
20040366: 0c f0        	csc	ca1, 32(cs0)
;     clc c9, 32(c8)
20040368: 04 70        	clc	cs1, 32(cs0)
;     csetequalexact x12, c9, c11
2004036a: 5b 86 b4 42  	cseqx	a2, cs1, ca1
;     beq x12, x0, tsafe_fail1
2004036e: 0d c2        	beqz	a2, 0x20040390 <tsafe_fail1>
;     li x12, 0x200fe36b
20040370: 37 e6 0f 20  	lui	a2, 131326
20040374: 13 06 b6 36  	addi	a2, a2, 875
;     csetaddr c13, c6, x12      # set address to revocation map 
20040378: db 06 c3 20  	csetaddr	ca3, ct1, a2
;     li x12, 0x40
2004037c: 13 06 00 04  	addi	a2, zero, 64
;     csb x12, 0(c13)            # set revocation map bit
20040380: 23 80 c6 00  	csb	a2, 0(ca3)
;     clc c9, 32(c8)
20040384: 04 70        	clc	cs1, 32(cs0)
;     cgettag x12, c9
20040386: 5b 86 44 fe  	cgettag	a2, cs1
;     bne x12, x0, tsafe_fail2   # returned cap.tag should be cleared
2004038a: 11 e6        	bnez	a2, 0x20040396 <tsafe_fail2>
;     addi a0, x0, 0x0
2004038c: 01 45        	mv	a0, zero
;     j tsafe_done
2004038e: 39 a0        	j	0x2004039c <tsafe_done>

20040390 <tsafe_fail1>:
;     addi a0, x0, 0xf1
20040390: 13 05 10 0f  	addi	a0, zero, 241
;     j tsafe_done
20040394: 21 a0        	j	0x2004039c <tsafe_done>

20040396 <tsafe_fail2>:
;     addi a0, x0, 0xf2
20040396: 13 05 20 0f  	addi	a0, zero, 242
;     j tsafe_done
2004039a: 09 a0        	j	0x2004039c <tsafe_done>

2004039c <tsafe_done>:
;     clc c1, 0(csp)
2004039c: 82 60        	clc	cra, 0(csp)
;     clc c3, 8(csp)
2004039e: a2 61        	clc	cgp, 8(csp)
;     clc c4, 16(csp)
200403a0: 42 62        	clc	ctp, 16(csp)
;     clc c5, 24(csp)
200403a2: e2 62        	clc	ct0, 24(csp)
;     clc c6, 32(csp)
200403a4: 02 73        	clc	ct1, 32(csp)
;     clc c7, 40(csp)
200403a6: a2 73        	clc	ct2, 40(csp)
;     clc c8, 48(csp)
200403a8: 42 74        	clc	cs0, 48(csp)
;     clc c9, 56(csp)
200403aa: e2 74        	clc	cs1, 56(csp)
;     cincoffset csp, csp, 88 
200403ac: 5b 11 81 05  	cincoffset	csp, csp, 88
;     cret
200403b0: 82 80        	cret

200403b2 <cheri_tbre_test>:
;     cincoffset csp, csp, -88    # SP-16
200403b2: 5b 11 81 fa  	cincoffset	csp, csp, -88
;     csc c1, 0(csp)
200403b6: 06 e0        	csc	cra, 0(csp)
;     csc c3, 8(csp)
200403b8: 0e e4        	csc	cgp, 8(csp)
;     csc c4, 16(csp)
200403ba: 12 e8        	csc	ctp, 16(csp)
;     csc c5, 24(csp)
200403bc: 16 ec        	csc	ct0, 24(csp)
;     csc c6, 32(csp)
200403be: 1a f0        	csc	ct1, 32(csp)
;     csc c7, 40(csp)
200403c0: 1e f4        	csc	ct2, 40(csp)
;     csc c8, 48(csp)
200403c2: 22 f8        	csc	cs0, 48(csp)
;     csc c9, 56(csp)
200403c4: 26 fc        	csc	cs1, 56(csp)
;     cspecialrw c6, 29, c0    # read MTDC address 'd29, memory root
200403c6: 5b 03 d0 03  	cspecialr	ct1, mtdc
;     lui x11, 0x20048
200403ca: b7 85 04 20  	lui	a1, 131144
;     csetaddr c6, c6, x11          # set address to 0x2008_0000
200403ce: 5b 03 b3 20  	csetaddr	ct1, ct1, a1
;     cmove c8, c6
200403d2: 5b 04 a3 fe  	cmove	cs0, ct1
;     li x11, 0x2004daf0
200403d6: b7 e5 04 20  	lui	a1, 131150
200403da: 93 85 05 af  	addi	a1, a1, -1296
;     csetaddr c11, c6, x11
200403de: db 05 b3 20  	csetaddr	ca1, ct1, a1
;     csetboundsimm c11, c11, 0x800    # set lengths to 0x800, base/address to 0x2001_1000
200403e2: db a5 05 80  	csetbounds	ca1, ca1, 2048
;     li x9, 256 
200403e6: 93 04 00 10  	addi	s1, zero, 256

200403ea <tbre_init>:
;     csc c11, 0(c8)
200403ea: 0c e0        	csc	ca1, 0(cs0)
;     cincoffset c8, c8, 8
200403ec: 5b 14 84 00  	cincoffset	cs0, cs0, 8
;     addi x9, x9, -1
200403f0: fd 14        	addi	s1, s1, -1
;     bne x9, x0, tbre_init
200403f2: e5 fc        	bnez	s1, 0x200403ea <tbre_init>
;     cspecialrw c5, mtdc, c0       # read MTDC address 'd29, memory root
200403f4: db 02 d0 03  	cspecialr	ct0, mtdc
;     li x11, 0x14000000
200403f8: b7 05 00 14  	lui	a1, 81920
;     csetaddr c5, c5, x11          # set address to tbre_regs
200403fc: db 82 b2 20  	csetaddr	ct0, ct0, a1
;     clw x11, 8(c5)
20040400: 83 a5 82 00  	clw	a1, 8(ct0)
;     srli x11, x11, 24
20040404: e1 81        	srli	a1, a1, 24
;     addi x12, x0, 0x55
20040406: 13 06 50 05  	addi	a2, zero, 85
;     bne x11, x12, tbre_fail1      # TBRE not implemented, don't run
2004040a: 63 9b c5 06  	bne	a1, a2, 0x20040480 <tbre_fail1>
;     li x11, 0x20048000
2004040e: b7 85 04 20  	lui	a1, 131144
;     csw x11, (c5)          # TBRE start address
20040412: 23 a0 b2 00  	csw	a1, 0(ct0)
;     li x11, 0x200483fc
20040416: b7 85 04 20  	lui	a1, 131144
2004041a: 93 85 c5 3f  	addi	a1, a1, 1020
;     csw x11, 4(c5)          # TBRE end address
2004041e: 23 a2 b2 00  	csw	a1, 4(ct0)
;     li x11, 0x1
20040422: 85 45        	addi	a1, zero, 1
;     csw x11, 8(c5)          # TBRE kick
20040424: 23 a4 b2 00  	csw	a1, 8(ct0)
;     li x11, 0x1
20040428: 85 45        	addi	a1, zero, 1
;     csw x11, 20(c5)         # TBRE interrupt enable
2004042a: 23 aa b2 00  	csw	a1, 20(ct0)
;     wfi
2004042e: 73 00 50 10  	wfi	
;     csrr x9, mcause
20040432: f3 24 20 34  	csrr	s1, mcause
;     andi x9, x9, 0xff
20040436: 93 f4 f4 0f  	andi	s1, s1, 255
;     li   x8, 11
2004043a: 2d 44        	addi	s0, zero, 11
;     bne x8, x9, tbre_fail2
2004043c: 63 15 94 04  	bne	s0, s1, 0x20040486 <tbre_fail2>
;     cspecialr c4, mtdc
20040440: 5b 02 d0 03  	cspecialr	ctp, mtdc
;     li x11, 0x10200004                  # PLIC claim register
20040444: b7 05 20 10  	lui	a1, 66048
20040448: 91 05        	addi	a1, a1, 4
;     csetaddr c4, c4, x11
2004044a: 5b 02 b2 20  	csetaddr	ctp, ctp, a1
;     clw x11, (c4)
2004044e: 83 25 02 00  	clw	a1, 0(ctp)
;     li x12, 1
20040452: 05 46        	addi	a2, zero, 1
;     bne x11, x12, tbre_fail2            # claim ID must = 1
20040454: 63 99 c5 02  	bne	a1, a2, 0x20040486 <tbre_fail2>
;     csw x11, (c4)                       # send completion to PLIC
20040458: 23 20 b2 00  	csw	a1, 0(ctp)
;     clw x11, 16(c5)         # interrupt status
2004045c: 83 a5 02 01  	clw	a1, 16(ct0)
;     bne x11, x0, tbre_fail2
20040460: 9d e1        	bnez	a1, 0x20040486 <tbre_fail2>
;     clw x11, 12(c5)         # epoch
20040462: 83 a5 c2 00  	clw	a1, 12(ct0)
;     andi x11, x11, 0xff
20040466: 93 f5 f5 0f  	andi	a1, a1, 255
;     li x12, 0x2
2004046a: 09 46        	addi	a2, zero, 2
;     bne x11, x12, tbre_fail3
2004046c: 63 90 c5 02  	bne	a1, a2, 0x2004048c <tbre_fail3>
;     cmove c8, c6
20040470: 5b 04 a3 fe  	cmove	cs0, ct1
;     clc c9, 0(c8)
20040474: 04 60        	clc	cs1, 0(cs0)
;     cgettag x12, c9
20040476: 5b 86 44 fe  	cgettag	a2, cs1
;     bne x12, x0, tbre_fail3   # returned cap.tag should be cleared
2004047a: 09 ea        	bnez	a2, 0x2004048c <tbre_fail3>
;     addi a0, x0, 0
2004047c: 01 45        	mv	a0, zero
;     j tbre_done
2004047e: 11 a8        	j	0x20040492 <tbre_done>

20040480 <tbre_fail1>:
;     addi a0, x0, 0xe1
20040480: 13 05 10 0e  	addi	a0, zero, 225
;     j tbre_done
20040484: 39 a0        	j	0x20040492 <tbre_done>

20040486 <tbre_fail2>:
;     addi a0, x0, 0xe2
20040486: 13 05 20 0e  	addi	a0, zero, 226
;     j tbre_done
2004048a: 21 a0        	j	0x20040492 <tbre_done>

2004048c <tbre_fail3>:
;     addi a0, x0, 0xe3
2004048c: 13 05 30 0e  	addi	a0, zero, 227
;     j tbre_done
20040490: 09 a0        	j	0x20040492 <tbre_done>

20040492 <tbre_done>:
;     clc c1, 0(csp)
20040492: 82 60        	clc	cra, 0(csp)
;     clc c3, 8(csp)
20040494: a2 61        	clc	cgp, 8(csp)
;     clc c4, 16(csp)
20040496: 42 62        	clc	ctp, 16(csp)
;     clc c5, 24(csp)
20040498: e2 62        	clc	ct0, 24(csp)
;     clc c6, 32(csp)
2004049a: 02 73        	clc	ct1, 32(csp)
;     clc c7, 40(csp)
2004049c: a2 73        	clc	ct2, 40(csp)
;     clc c8, 48(csp)
2004049e: 42 74        	clc	cs0, 48(csp)
;     clc c9, 56(csp)
200404a0: e2 74        	clc	cs1, 56(csp)
;     cincoffset csp, csp, 88 
200404a2: 5b 11 81 05  	cincoffset	csp, csp, 88
;     cret
200404a6: 82 80        	cret

200404a8 <cheri_stkclr_test>:
;     cincoffset csp, csp, -88    # SP-16
200404a8: 5b 11 81 fa  	cincoffset	csp, csp, -88
;     csc c1, 0(csp)
200404ac: 06 e0        	csc	cra, 0(csp)
;     csc c3, 8(csp)
200404ae: 0e e4        	csc	cgp, 8(csp)
;     csc c4, 16(csp)
200404b0: 12 e8        	csc	ctp, 16(csp)
;     csc c5, 24(csp)
200404b2: 16 ec        	csc	ct0, 24(csp)
;     csc c6, 32(csp)
200404b4: 1a f0        	csc	ct1, 32(csp)
;     csc c7, 40(csp)
200404b6: 1e f4        	csc	ct2, 40(csp)
;     csc c8, 48(csp)
200404b8: 22 f8        	csc	cs0, 48(csp)
;     csc c9, 56(csp)
200404ba: 26 fc        	csc	cs1, 56(csp)
;     cspecialr c8, mtdc
200404bc: 5b 04 d0 03  	cspecialr	cs0, mtdc
;     li x12, 0x20050020          
200404c0: 37 06 05 20  	lui	a2, 131152
200404c4: 13 06 06 02  	addi	a2, a2, 32
;     li x11, 0x2005007c           
200404c8: b7 05 05 20  	lui	a1, 131152
200404cc: 93 85 c5 07  	addi	a1, a1, 124
;     csetaddr c8, c8, x11
200404d0: 5b 04 b4 20  	csetaddr	cs0, cs0, a1
;     li x11, 0xffffffff
200404d4: fd 55        	addi	a1, zero, -1

200404d6 <fill_stack>:
;     csw x11, (c8)
200404d6: 0c c0        	csw	a1, 0(cs0)
;     cincoffset c8, c8, -4
200404d8: 5b 14 c4 ff  	cincoffset	cs0, cs0, -4
;     bne x8, x12, fill_stack
200404dc: e3 1d c4 fe  	bne	s0, a2, 0x200404d6 <fill_stack>
;     li x11, 0x20050020
200404e0: b7 05 05 20  	lui	a1, 131152
200404e4: 93 85 05 02  	addi	a1, a1, 32
;     csetaddr c8, c8, x11
200404e8: 5b 04 b4 20  	csetaddr	cs0, cs0, a1
;     li x11, 0x20050020
200404ec: b7 05 05 20  	lui	a1, 131152
200404f0: 93 85 05 02  	addi	a1, a1, 32
;     csetaddr c9, c8, x11
200404f4: db 04 b4 20  	csetaddr	cs1, cs0, a1
;     csetboundsimm c9, c9, 0x60    # stack 
200404f8: db a4 04 06  	csetbounds	cs1, cs1, 96
;     li x11, 0x20050080
200404fc: b7 05 05 20  	lui	a1, 131152
20040500: 93 85 05 08  	addi	a1, a1, 128
;     csetaddr c9, c9, x11
20040504: db 84 b4 20  	csetaddr	cs1, cs1, a1
;     cspecialw 27, c9              # kickoff stkclr
20040508: 5b 80 b4 03  	cspecialw	27, cs1
;     li x13, 0xaa5555aa            # this should go through immediately
2004050c: b7 56 55 aa  	lui	a3, 697685
20040510: 93 86 a6 5a  	addi	a3, a3, 1450
;     csw x13, 188(c8)
20040514: 23 2e d4 0a  	csw	a3, 188(cs0)
;     li x14, 0xdeadbeef            # this should stall till aborted then restart
20040518: 37 c7 ad de  	lui	a4, 912092
2004051c: 13 07 f7 ee  	addi	a4, a4, -273
;     csw x14, (c8)               
20040520: 18 c0        	csw	a4, 0(cs0)
;     clw x11, 188(c8)              # check CPU write value
20040522: 83 25 c4 0b  	clw	a1, 188(cs0)
;     clw x12, (c8)
20040526: 10 40        	clw	a2, 0(cs0)
;     bne x13, x11, stkclr_fail
20040528: 63 92 b6 04  	bne	a3, a1, 0x2004056c <stkclr_fail>
;     bne x14, x12, stkclr_fail
2004052c: 63 10 c7 04  	bne	a4, a2, 0x2004056c <stkclr_fail>
;     li x11, 0x20050020            # check stack clearing 
20040530: b7 05 05 20  	lui	a1, 131152
20040534: 93 85 05 02  	addi	a1, a1, 32
;     csetaddr c9, c9, x11
20040538: db 84 b4 20  	csetaddr	cs1, cs1, a1
;     ccleartag c9, c9
2004053c: db 84 b4 fe  	ccleartag	cs1, cs1
;     cspecialr c11, 27             # progress 
20040540: db 05 b0 03  	cspecialr	ca1, 27
;     csetequalexact x11, c11, c9 
20040544: db 85 95 42  	cseqx	a1, ca1, cs1
;     beq x11, x0, stkclr_fail
20040548: 95 c1        	beqz	a1, 0x2004056c <stkclr_fail>
;     li x12, 0x20050024
2004054a: 37 06 05 20  	lui	a2, 131152
2004054e: 13 06 46 02  	addi	a2, a2, 36
;     li x11, 0x2005007c            # check stack clearing 
20040552: b7 05 05 20  	lui	a1, 131152
20040556: 93 85 c5 07  	addi	a1, a1, 124
;     csetaddr c8, c8, x11
2004055a: 5b 04 b4 20  	csetaddr	cs0, cs0, a1

2004055e <chk_clr>:
;     cincoffset c8, c8, -4
2004055e: 5b 14 c4 ff  	cincoffset	cs0, cs0, -4
;     clw x11, (c8)
20040562: 0c 40        	clw	a1, 0(cs0)
;     bne x11, x0, stkclr_fail
20040564: 81 e5        	bnez	a1, 0x2004056c <stkclr_fail>
;     bne x8, x12, chk_clr
20040566: e3 1c c4 fe  	bne	s0, a2, 0x2004055e <chk_clr>
;     j stkclr_done
2004056a: 21 a0        	j	0x20040572 <stkclr_done>

2004056c <stkclr_fail>:
;     addi a0, x0, 0xe1
2004056c: 13 05 10 0e  	addi	a0, zero, 225
;     j stkclr_done
20040570: 09 a0        	j	0x20040572 <stkclr_done>

20040572 <stkclr_done>:
;     clc c1, 0(csp)
20040572: 82 60        	clc	cra, 0(csp)
;     clc c3, 8(csp)
20040574: a2 61        	clc	cgp, 8(csp)
;     clc c4, 16(csp)
20040576: 42 62        	clc	ctp, 16(csp)
;     clc c5, 24(csp)
20040578: e2 62        	clc	ct0, 24(csp)
;     clc c6, 32(csp)
2004057a: 02 73        	clc	ct1, 32(csp)
;     clc c7, 40(csp)
2004057c: a2 73        	clc	ct2, 40(csp)
;     clc c8, 48(csp)
2004057e: 42 74        	clc	cs0, 48(csp)
;     clc c9, 56(csp)
20040580: e2 74        	clc	cs1, 56(csp)
;     cincoffset csp, csp, 88 
20040582: 5b 11 81 05  	cincoffset	csp, csp, 88
;     cret
20040586: 82 80        	cret

20040588 <isctype(int, int)>:
; 	return ctype_table[c] & type;
20040588: 5b 96 01 ea  	cincoffset	ca2, cgp, -352
2004058c: 5b 26 06 08  	csetbounds	ca2, ca2, 128
20040590: 5b 05 a6 22  	cincoffset	ca0, ca2, a0
20040594: 03 45 05 00  	clbu	a0, 0(ca0)
20040598: 6d 8d        	and	a0, a0, a1
2004059a: 82 80        	cret

2004059c <realloc(void*, unsigned int)>:
; {
2004059c: 3d 71        	cincoffset	csp, csp, -32
2004059e: 06 ec        	csc	cra, 24(csp)
200405a0: 22 e8        	csc	cs0, 16(csp)
200405a2: 26 e4        	csc	cs1, 8(csp)
200405a4: ae 84        	mv	s1, a1
200405a6: 5b 04 a5 fe  	cmove	cs0, ca0
; 	if(size == 0) {
200405aa: 81 e5        	bnez	a1, 0x200405b2 <.LBB0_2>
; 		free(ptr);
200405ac: 5b 05 a4 fe  	cmove	ca0, cs0
200405b0: 71 2a        	cjal	0x2004074c <free(void*)>

200405b2 <.LBB0_2>:
; 	newptr = malloc(size);
200405b2: 26 85        	mv	a0, s1
200405b4: fd 2c        	cjal	0x200408b2 <malloc(unsigned int)>
; 	if(newptr == NULL) {
200405b6: 13 36 15 00  	seqz	a2, a0
200405ba: 93 35 14 00  	seqz	a1, s0
200405be: 4d 8e        	or	a2, a2, a1
200405c0: 05 e2        	bnez	a2, 0x200405e0 <.LBB0_6>
; 	if(size < pm->size) {
200405c2: 03 26 c4 ff  	clw	a2, -4(cs0)
200405c6: 63 e3 c4 00  	bltu	s1, a2, 0x200405cc <.LBB0_5>
200405ca: b2 84        	mv	s1, a2

200405cc <.LBB0_5>:
; 	memcpy(newptr, ptr, csize);
200405cc: db 05 a4 fe  	cmove	ca1, cs0
200405d0: 2a e0        	csc	ca0, 0(csp)
200405d2: 26 86        	mv	a2, s1
200405d4: ef 00 50 4f  	cjal	0x200412c8 <memcpy(void*, void const*, unsigned int)>
; 	free(ptr);
200405d8: 5b 05 a4 fe  	cmove	ca0, cs0
200405dc: 85 2a        	cjal	0x2004074c <free(void*)>
200405de: 02 65        	clc	ca0, 0(csp)

200405e0 <.LBB0_6>:
; }
200405e0: a2 64        	clc	cs1, 8(csp)
200405e2: 42 64        	clc	cs0, 16(csp)
200405e4: e2 60        	clc	cra, 24(csp)
200405e6: 05 61        	cincoffset	csp, csp, 32
200405e8: 82 80        	cret
200405ea: 00 00        	unimp	

200405ec <strtoul(char const*, char**, int)>:
; {
200405ec: 5d 71        	cincoffset	csp, csp, -80
200405ee: 86 e4        	csc	cra, 72(csp)
200405f0: a2 e0        	csc	cs0, 64(csp)
200405f2: 26 fc        	csc	cs1, 56(csp)
200405f4: 32 d6        	csw	a2, 44(csp)
200405f6: 2e ec        	csc	ca1, 24(csp)
200405f8: 2a e4        	csc	ca0, 8(csp)
200405fa: 5b 06 a5 fe  	cmove	ca2, ca0

200405fe <.LBB0_1>:
200405fe: db 04 a6 fe  	cmove	cs1, ca2
;                 c = *s++;
20040602: 03 44 06 00  	clbu	s0, 0(ca2)
20040606: 5b 15 16 00  	cincoffset	ca0, ca2, 1
;         } while (isspace(c));
2004060a: 2a f8        	csc	ca0, 48(csp)
2004060c: 85 45        	addi	a1, zero, 1
2004060e: 22 85        	mv	a0, s0
20040610: a5 3f        	cjal	0x20040588 <isctype(int, int)>
20040612: 42 76        	clc	ca2, 48(csp)
;         } while (isspace(c));
20040614: 6d f5        	bnez	a0, 0x200405fe <.LBB0_1>
20040616: 93 05 d0 02  	addi	a1, zero, 45
;         if (c == '-') {
2004061a: 63 0b b4 00  	beq	s0, a1, 0x20040630 <.LBB0_5>
2004061e: 22 85        	mv	a0, s0
20040620: 93 05 b0 02  	addi	a1, zero, 43
20040624: 85 46        	addi	a3, zero, 1
20040626: b2 57        	clw	a5, 44(csp)
;         if (c == '-') {
20040628: 63 1a b4 00  	bne	s0, a1, 0x2004063c <.LBB0_7>
2004062c: 85 46        	addi	a3, zero, 1
2004062e: 19 a0        	j	0x20040634 <.LBB0_6>

20040630 <.LBB0_5>:
20040630: 81 46        	mv	a3, zero
20040632: b2 57        	clw	a5, 44(csp)

20040634 <.LBB0_6>:
20040634: 03 c5 14 00  	clbu	a0, 1(cs1)
20040638: 5b 96 24 00  	cincoffset	ca2, cs1, 2

2004063c <.LBB0_7>:
;         if ((base == 0 || base == 16) &&
2004063c: 13 f7 f7 fe  	andi	a4, a5, -17
20040640: 93 45 05 03  	xori	a1, a0, 48
20040644: d9 8d        	or	a1, a1, a4
20040646: 36 ca        	csw	a3, 20(csp)
20040648: 91 ed        	bnez	a1, 0x20040664 <.LBB0_10>
;             (c == '0') && (*s == 'x' || *s == 'X')) {
2004064a: 03 45 06 00  	clbu	a0, 0(ca2)
2004064e: 13 65 05 02  	ori	a0, a0, 32
20040652: 93 05 80 07  	addi	a1, zero, 120
20040656: 63 12 b5 02  	bne	a0, a1, 0x2004067a <.LBB0_12>
;                 c = s[1];
2004065a: 03 45 16 00  	clbu	a0, 1(ca2)
;                 s += 2;
2004065e: 5b 16 26 00  	cincoffset	ca2, ca2, 2
20040662: c1 47        	addi	a5, zero, 16

20040664 <.LBB0_10>:
20040664: 93 05 00 03  	addi	a1, zero, 48
;         if (base == 0)
20040668: 93 b6 17 00  	seqz	a3, a5
2004066c: 63 09 b5 00  	beq	a0, a1, 0x2004067e <.LBB0_13>
20040670: 32 f8        	csc	ca2, 48(csp)
20040672: a9 45        	addi	a1, zero, 10
20040674: 2e d4        	csw	a1, 40(csp)
;         if (base == 0)
20040676: 91 ca        	beqz	a3, 0x2004068a <.LBB0_14>
20040678: 11 a8        	j	0x2004068c <.LBB0_15>

2004067a <.LBB0_12>:
2004067a: 93 b6 17 00  	seqz	a3, a5

2004067e <.LBB0_13>:
2004067e: 32 f8        	csc	ca2, 48(csp)
20040680: 21 45        	addi	a0, zero, 8
20040682: 2a d4        	csw	a0, 40(csp)
20040684: 13 05 00 03  	addi	a0, zero, 48
;         if (base == 0)
20040688: 91 e2        	bnez	a3, 0x2004068c <.LBB0_15>

2004068a <.LBB0_14>:
2004068a: 3e d4        	csw	a5, 40(csp)

2004068c <.LBB0_15>:
2004068c: 02 d6        	csw	zero, 44(csp)
2004068e: 01 44        	mv	s0, zero
20040690: fd 55        	addi	a1, zero, -1
20040692: 22 56        	clw	a2, 40(csp)
;         cutoff = (uint32_t)ULONG_MAX / base;
20040694: b3 d5 c5 02  	divu	a1, a1, a2
20040698: 2e d2        	csw	a1, 36(csp)
2004069a: b3 85 c5 02  	mul	a1, a1, a2
2004069e: 93 c5 f5 ff  	not	a1, a1
200406a2: 2e d0        	csw	a1, 32(csp)

200406a4 <.LBB0_16>:
;                 if (isdigit(c))
200406a4: a1 45        	addi	a1, zero, 8
200406a6: aa 84        	mv	s1, a0
200406a8: c5 35        	cjal	0x20040588 <isctype(int, int)>
200406aa: 01 c5        	beqz	a0, 0x200406b2 <.LBB0_18>
;                         c -= '0';
200406ac: 13 85 04 fd  	addi	a0, s1, -48
200406b0: 05 a0        	j	0x200406d0 <.LBB0_22>

200406b2 <.LBB0_18>:
;                 else if (isalpha(c))
200406b2: 93 05 00 04  	addi	a1, zero, 64
200406b6: 26 85        	mv	a0, s1
200406b8: c1 3d        	cjal	0x20040588 <isctype(int, int)>
200406ba: 2d c1        	beqz	a0, 0x2004071c <.LBB0_28>
;                         c -= isupper(c) ? 'A' - 10 : 'a' - 10;
200406bc: 91 45        	addi	a1, zero, 4
200406be: 26 85        	mv	a0, s1
200406c0: e1 35        	cjal	0x20040588 <isctype(int, int)>
200406c2: 93 05 90 fa  	addi	a1, zero, -87
;                         c -= isupper(c) ? 'A' - 10 : 'a' - 10;
200406c6: 19 c1        	beqz	a0, 0x200406cc <.LBB0_21>
200406c8: 93 05 90 fc  	addi	a1, zero, -55

200406cc <.LBB0_21>:
;                         c -= isupper(c) ? 'A' - 10 : 'a' - 10;
200406cc: 33 85 95 00  	add	a0, a1, s1

200406d0 <.LBB0_22>:
;                 if (c >= base)
200406d0: a2 55        	clw	a1, 40(csp)
200406d2: 63 55 b5 04  	bge	a0, a1, 0x2004071c <.LBB0_28>
;                 if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
200406d6: 93 25 04 00  	slti	a1, s0, 0
200406da: 32 54        	clw	s0, 44(csp)
200406dc: 12 57        	clw	a4, 36(csp)
200406de: 33 36 87 00  	sltu	a2, a4, s0
;                 if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
200406e2: d1 8d        	or	a1, a1, a2
200406e4: fd 56        	addi	a3, zero, -1
200406e6: 99 c1        	beqz	a1, 0x200406ec <.LBB0_25>
200406e8: a2 85        	mv	a1, s0
200406ea: 05 a0        	j	0x2004070a <.LBB0_27>

200406ec <.LBB0_25>:
;                 if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
200406ec: b3 45 e4 00  	xor	a1, s0, a4
200406f0: 93 b5 15 00  	seqz	a1, a1
200406f4: 02 56        	clw	a2, 32(csp)
200406f6: 33 26 a6 00  	slt	a2, a2, a0
200406fa: 6d 8e        	and	a2, a2, a1
200406fc: ba 85        	mv	a1, a4
200406fe: 11 e6        	bnez	a2, 0x2004070a <.LBB0_27>
;                         acc = acc * base;
20040700: a2 55        	clw	a1, 40(csp)
20040702: b3 05 b4 02  	mul	a1, s0, a1
;                         acc += c;
20040706: aa 95        	add	a1, a1, a0
20040708: 85 46        	addi	a3, zero, 1

2004070a <.LBB0_27>:
2004070a: 36 84        	mv	s0, a3
2004070c: c2 74        	clc	cs1, 48(csp)
;         for (acc = 0, any = 0;; c = *s++) {
2004070e: 03 c5 04 00  	clbu	a0, 0(cs1)
20040712: 5b 96 14 00  	cincoffset	ca2, cs1, 1
20040716: 2e d6        	csw	a1, 44(csp)
20040718: 32 f8        	csc	ca2, 48(csp)
2004071a: 69 b7        	j	0x200406a4 <.LBB0_16>

2004071c <.LBB0_28>:
2004071c: e2 65        	clc	ca1, 24(csp)
2004071e: 22 86        	mv	a2, s0
;         if (endptr != 0)
20040720: 99 c5        	beqz	a1, 0x2004072e <.LBB0_32>
20040722: 22 65        	clc	ca0, 8(csp)
;                 *endptr = (char *)(any ? s - 1 : nptr);
20040724: 01 c6        	beqz	a2, 0x2004072c <.LBB0_31>
20040726: 42 75        	clc	ca0, 48(csp)
20040728: 5b 15 f5 ff  	cincoffset	ca0, ca0, -1

2004072c <.LBB0_31>:
;                 *endptr = (char *)(any ? s - 1 : nptr);
2004072c: 88 e1        	csc	ca0, 0(ca1)

2004072e <.LBB0_32>:
;         if (any < 0) {
2004072e: 52 45        	clw	a0, 20(csp)
20040730: 32 54        	clw	s0, 44(csp)
20040732: 19 e1        	bnez	a0, 0x20040738 <.LBB0_34>
20040734: 33 04 80 40  	neg	s0, s0

20040738 <.LBB0_34>:
;         if (any < 0) {
20040738: 63 53 06 00  	bgez	a2, 0x2004073e <.LBB0_36>
2004073c: 7d 54        	addi	s0, zero, -1

2004073e <.LBB0_36>:
;         return (acc);
2004073e: 22 85        	mv	a0, s0
20040740: e2 74        	clc	cs1, 56(csp)
20040742: 06 64        	clc	cs0, 64(csp)
20040744: a6 60        	clc	cra, 72(csp)
20040746: 61 61        	cincoffset	csp, csp, 80
20040748: 82 80        	cret
2004074a: 00 00        	unimp	

2004074c <free(void*)>:
; {
2004074c: 79 71        	cincoffset	csp, csp, -48
2004074e: 06 f4        	csc	cra, 40(csp)
20040750: 22 f0        	csc	cs0, 32(csp)
20040752: 26 ec        	csc	cs1, 24(csp)
20040754: 5b 04 a5 fe  	cmove	cs0, ca0
; 	if(pm->magic_number == MALLOC_MAGIC_NUM && pm_nxt->magic_number == MALLOC_MAGIC_NUM && 
20040758: 03 55 a5 ff  	clhu	a0, -6(ca0)
2004075c: a9 65        	lui	a1, 10
2004075e: 93 86 c5 53  	addi	a3, a1, 1340
20040762: 63 14 d5 0a  	bne	a0, a3, 0x2004080a <.LBB0_9>
20040766: db 94 01 f3  	cincoffset	cs1, cgp, -208
2004076a: db a4 84 00  	csetbounds	cs1, cs1, 8
2004076e: 90 60        	clc	ca2, 0(cs1)
20040770: 03 25 44 ff  	clw	a0, -12(cs0)
20040774: db 05 a6 20  	csetaddr	ca1, ca2, a0
; 	if(pm->magic_number == MALLOC_MAGIC_NUM && pm_nxt->magic_number == MALLOC_MAGIC_NUM && 
20040778: 03 d7 a5 00  	clhu	a4, 10(ca1)
2004077c: 63 17 d7 08  	bne	a4, a3, 0x2004080a <.LBB0_9>
20040780: 03 27 04 ff  	clw	a4, -16(cs0)
20040784: fd 56        	addi	a3, zero, -1
20040786: db 07 e6 20  	csetaddr	ca5, ca2, a4
; 	   (pm->prev_addr == 0xffffffff || pm_prev->magic_number == MALLOC_MAGIC_NUM)) {
2004078a: 63 09 d7 00  	beq	a4, a3, 0x2004079c <.LBB0_4>
2004078e: 03 d6 a7 00  	clhu	a2, 10(ca5)
20040792: a9 66        	lui	a3, 10
20040794: 93 86 c6 53  	addi	a3, a3, 1340
; 	if(pm->magic_number == MALLOC_MAGIC_NUM && pm_nxt->magic_number == MALLOC_MAGIC_NUM && 
20040798: 63 19 d6 06  	bne	a2, a3, 0x2004080a <.LBB0_9>

2004079c <.LBB0_4>:
; 		pm->status = HSP_FREE;
2004079c: 23 1c 04 fe  	csh	zero, -8(cs0)
; 		if(pm_nxt->status == HSP_FREE) {
200407a0: 83 d6 85 00  	clhu	a3, 8(ca1)
200407a4: 3a 86        	mv	a2, a4
200407a6: 9d ea        	bnez	a3, 0x200407dc <.LBB0_6>
200407a8: 5b 05 f4 fe  	cgetaddr	a0, cs0
; 			setMallocDescriptor(pm,pm->prev_addr, pm_nxt->next_addr, HSP_FREE);
200407ac: d0 41        	clw	a2, 4(ca1)
200407ae: 41 15        	addi	a0, a0, -16
200407b0: 2a c2        	csw	a0, 4(csp)
200407b2: 5b 15 04 ff  	cincoffset	ca0, cs0, -16
200407b6: db 05 e0 22  	cincoffset	ca1, cnull, a4
200407ba: 5b 06 c0 22  	cincoffset	ca2, cnull, a2
200407be: 81 46        	mv	a3, zero
200407c0: 3a ca        	csw	a4, 20(csp)
200407c2: 3e e4        	csc	ca5, 8(csp)
200407c4: 81 28        	cjal	0x20040814 <setMallocDescriptor(malloc_s*, __uintcap_t, __uintcap_t, unsigned int)>
200407c6: a2 67        	clc	ca5, 8(csp)
200407c8: 52 47        	clw	a4, 20(csp)
; 			pm_nxt = (pmalloc_t)malloc_fromaddr(pm->next_addr);
200407ca: 03 25 44 ff  	clw	a0, -12(cs0)
; 	return cheri_address_set(HeapCap, addr);
200407ce: 8c 60        	clc	ca1, 0(cs1)
200407d0: db 85 a5 20  	csetaddr	ca1, ca1, a0
; 			pm_nxt->prev_addr = (uintptr_t)pm;
200407d4: 12 46        	clw	a2, 4(csp)
200407d6: 90 c1        	csw	a2, 0(ca1)
; 		if(pm->prev_addr != 0xffffffff && pm_prev->status == HSP_FREE) {
200407d8: 03 26 04 ff  	clw	a2, -16(cs0)

200407dc <.LBB0_6>:
200407dc: fd 55        	addi	a1, zero, -1
; 		if(pm->prev_addr != 0xffffffff && pm_prev->status == HSP_FREE) {
200407de: 63 06 b6 02  	beq	a2, a1, 0x2004080a <.LBB0_9>
200407e2: 83 d5 87 00  	clhu	a1, 8(ca5)
200407e6: 95 e1        	bnez	a1, 0x2004080a <.LBB0_9>
; 			setMallocDescriptor(pm_prev,pm_prev->prev_addr, pm->next_addr, HSP_FREE);
200407e8: 8c 43        	clw	a1, 0(ca5)
200407ea: db 05 b0 22  	cincoffset	ca1, cnull, a1
200407ee: 5b 06 a0 22  	cincoffset	ca2, cnull, a0
200407f2: 5b 85 a7 fe  	cmove	ca0, ca5
200407f6: 81 46        	mv	a3, zero
200407f8: 3a ca        	csw	a4, 20(csp)
200407fa: 29 28        	cjal	0x20040814 <setMallocDescriptor(malloc_s*, __uintcap_t, __uintcap_t, unsigned int)>
; 			pm_nxt = (pmalloc_t)malloc_fromaddr(pm->next_addr);
200407fc: 03 25 44 ff  	clw	a0, -12(cs0)
; 	return cheri_address_set(HeapCap, addr);
20040800: 8c 60        	clc	ca1, 0(cs1)
20040802: 5b 85 a5 20  	csetaddr	ca0, ca1, a0
; 			pm_nxt->prev_addr = (uintptr_t)pm_prev;
20040806: d2 45        	clw	a1, 20(csp)
20040808: 0c c1        	csw	a1, 0(ca0)

2004080a <.LBB0_9>:
; }
2004080a: e2 64        	clc	cs1, 24(csp)
2004080c: 02 74        	clc	cs0, 32(csp)
2004080e: a2 70        	clc	cra, 40(csp)
20040810: 45 61        	cincoffset	csp, csp, 48
20040812: 82 80        	cret

20040814 <setMallocDescriptor(malloc_s*, __uintcap_t, __uintcap_t, unsigned int)>:
; 	ptr->prev_addr = prev;
20040814: db 85 f5 fe  	cgetaddr	a1, ca1
20040818: 0c c1        	csw	a1, 0(ca0)
; 	ptr->next_addr = next;
2004081a: db 05 f6 fe  	cgetaddr	a1, ca2
2004081e: 4c c1        	csw	a1, 4(ca0)
; 	ptr->status = status;
20040820: 23 14 d5 00  	csh	a3, 8(ca0)
20040824: a9 65        	lui	a1, 10
20040826: 93 85 c5 53  	addi	a1, a1, 1340
; 	ptr->magic_number = MALLOC_MAGIC_NUM;
2004082a: 23 15 b5 00  	csh	a1, 10(ca0)
; 	ptr->size = ((uintptr_t)next - (uintptr_t)ptr) - sizeof(struct malloc_s);
2004082e: db 05 a6 28  	csub	a1, ca2, ca0
20040832: c1 15        	addi	a1, a1, -16
20040834: 4c c5        	csw	a1, 12(ca0)
; }
20040836: 82 80        	cret

20040838 <get_ptr(unsigned long, unsigned int)>:
; 	void* ret = globalRoot;
20040838: 5b 96 01 14  	cincoffset	ca2, cgp, 320
2004083c: 5b 26 86 00  	csetbounds	ca2, ca2, 8
20040840: 10 62        	clc	ca2, 0(ca2)
20040842: 93 06 40 06  	addi	a3, zero, 100
; 	ret = cheri_perms_and(ret, CHERI_PERMS);
20040846: 5b 06 d6 1a  	candperm	ca2, ca2, a3
; 	ret = cheri_address_set(ret, start);
2004084a: 5b 05 a6 20  	csetaddr	ca0, ca2, a0
; 	ret = cheri_bounds_set(ret, len);
2004084e: 5b 05 b5 10  	csetbounds	ca0, ca0, a1
; 	return ret;
20040852: 82 80        	cret

20040854 <malloc_init(void*, unsigned int)>:
; {
20040854: 3d 71        	cincoffset	csp, csp, -32
; 	if(MallocInit == 1) {
20040856: 06 ec        	csc	cra, 24(csp)
20040858: 22 e8        	csc	cs0, 16(csp)
2004085a: 26 e4        	csc	cs1, 8(csp)
2004085c: db 94 01 f2  	cincoffset	cs1, cgp, -224
20040860: db a4 14 00  	csetbounds	cs1, cs1, 1
20040864: 03 c6 04 00  	clbu	a2, 0(cs1)
20040868: 85 46        	addi	a3, zero, 1
2004086a: 63 1f d6 02  	bne	a2, a3, 0x200408a8 <.LBB0_2>
; 		HeapCap = heap;
2004086e: 5b 96 01 f3  	cincoffset	ca2, cgp, -208
20040872: 5b 26 86 00  	csetbounds	ca2, ca2, 8
20040876: 08 e2        	csc	ca0, 0(ca2)
; 		pm_nxt = (pmalloc_t)((uintptr_t)heap + len - sizeof(struct malloc_s));
20040878: 5b 04 f5 fe  	cgetaddr	s0, ca0
2004087c: 5b 06 b5 22  	cincoffset	ca2, ca0, a1
20040880: a2 95        	add	a1, a1, s0
20040882: c1 15        	addi	a1, a1, -16
20040884: 5b 06 b6 20  	csetaddr	ca2, ca2, a1
; 		setMallocDescriptor(pm, 0xffffffff, (uint32_t)pm_nxt, HSP_FREE);
20040888: 32 e0        	csc	ca2, 0(csp)
2004088a: 5b 06 b0 22  	cincoffset	ca2, cnull, a1
2004088e: db 15 f0 ff  	cincoffset	ca1, cnull, -1
20040892: 81 46        	mv	a3, zero
20040894: 41 37        	cjal	0x20040814 <setMallocDescriptor(malloc_s*, __uintcap_t, __uintcap_t, unsigned int)>
; 		setMallocDescriptor(pm_nxt, (uint32_t)pm, 0, HSP_END);
20040896: db 05 80 22  	cincoffset	ca1, cnull, s0
2004089a: 89 46        	addi	a3, zero, 2
2004089c: 02 65        	clc	ca0, 0(csp)
2004089e: 5b 06 a0 fe  	cmove	ca2, cnull
200408a2: 8d 3f        	cjal	0x20040814 <setMallocDescriptor(malloc_s*, __uintcap_t, __uintcap_t, unsigned int)>
; 		MallocInit = 0;
200408a4: 23 80 04 00  	csb	zero, 0(cs1)

200408a8 <.LBB0_2>:
; }
200408a8: a2 64        	clc	cs1, 8(csp)
200408aa: 42 64        	clc	cs0, 16(csp)
200408ac: e2 60        	clc	cra, 24(csp)
200408ae: 05 61        	cincoffset	csp, csp, 32
200408b0: 82 80        	cret

200408b2 <malloc(unsigned int)>:
; {
200408b2: 79 71        	cincoffset	csp, csp, -48
; 	if(size == 0) {
200408b4: 06 f4        	csc	cra, 40(csp)
200408b6: 22 f0        	csc	cs0, 32(csp)
200408b8: 26 ec        	csc	cs1, 24(csp)
200408ba: 15 c9        	beqz	a0, 0x200408ee <.LBB1_5>
; 	pm = (pmalloc_t)HeapCap;
200408bc: db 95 01 f3  	cincoffset	ca1, cgp, -208
200408c0: db a5 85 00  	csetbounds	ca1, ca1, 8
200408c4: 90 61        	clc	ca2, 0(ca1)
; 	size += (((size^0x7)+1)&0x7);
200408c6: b3 06 a0 40  	neg	a3, a0
200408ca: 9d 8a        	andi	a3, a3, 7
200408cc: 36 95        	add	a0, a0, a3
200408ce: 89 46        	addi	a3, zero, 2
200408d0: 5b 04 a6 fe  	cmove	cs0, ca2

200408d4 <.LBB1_2>:
; 		if(pm->status == HSP_FREE && size <= pm->size) {
200408d4: 03 57 84 00  	clhu	a4, 8(cs0)
200408d8: 01 e7        	bnez	a4, 0x200408e0 <.LBB1_4>
200408da: 58 44        	clw	a4, 12(cs0)
200408dc: 63 70 a7 02  	bgeu	a4, a0, 0x200408fc <.LBB1_7>

200408e0 <.LBB1_4>:
; 		pm = (pmalloc_t)malloc_fromaddr(pm->next_addr);
200408e0: 58 40        	clw	a4, 4(cs0)
; 	return cheri_address_set(HeapCap, addr);
200408e2: 5b 04 e6 20  	csetaddr	cs0, ca2, a4
; 	} while (pm->status != HSP_END);
200408e6: 03 57 84 00  	clhu	a4, 8(cs0)
200408ea: e3 15 d7 fe  	bne	a4, a3, 0x200408d4 <.LBB1_2>

200408ee <.LBB1_5>:
; }
200408ee: 5b 05 a0 fe  	cmove	ca0, cnull

200408f2 <.LBB1_6>:
200408f2: e2 64        	clc	cs1, 24(csp)
200408f4: 02 74        	clc	cs0, 32(csp)
200408f6: a2 70        	clc	cra, 40(csp)
200408f8: 45 61        	cincoffset	csp, csp, 48
200408fa: 82 80        	cret

200408fc <.LBB1_7>:
; 			if((pm->size - size) < sizeof(struct malloc_s) + sizeof(void *)) {
200408fc: 33 06 a7 40  	sub	a2, a4, a0
20040900: dd 46        	addi	a3, zero, 23
20040902: 63 e8 c6 00  	bltu	a3, a2, 0x20040912 <.LBB1_9>
20040906: 05 45        	addi	a0, zero, 1
; 				pm->status = HSP_USED;
20040908: 23 14 a4 00  	csh	a0, 8(cs0)
; 			return (void*)((uintptr_t)pm+sizeof(struct malloc_s));
2004090c: 5b 05 f4 fe  	cgetaddr	a0, cs0
20040910: 99 a0        	j	0x20040956 <.LBB1_10>

20040912 <.LBB1_9>:
; 				pm_new = (pmalloc_t) ((uintptr_t)pm+sizeof(struct malloc_s)+size);
20040912: 5b 06 f4 fe  	cgetaddr	a2, cs0
20040916: 32 c8        	csw	a2, 16(csp)
20040918: 32 95        	add	a0, a0, a2
; 				pm_nxt = (pmalloc_t) malloc_fromaddr(pm->next_addr);
2004091a: 58 40        	clw	a4, 4(cs0)
; 	return cheri_address_set(HeapCap, addr);
2004091c: 8c 61        	clc	ca1, 0(ca1)
; 				setMallocDescriptor(pm, (uintptr_t)malloc_fromaddr(pm->prev_addr), (uintptr_t)pm_new, HSP_USED);
2004091e: 14 40        	clw	a3, 0(cs0)
; 				pm_new = (pmalloc_t) ((uintptr_t)pm+sizeof(struct malloc_s)+size);
20040920: 41 05        	addi	a0, a0, 16
20040922: 2a ca        	csw	a0, 20(csp)
20040924: db 04 a4 20  	csetaddr	cs1, cs0, a0
; 	return cheri_address_set(HeapCap, addr);
20040928: 5b 85 e5 20  	csetaddr	ca0, ca1, a4
2004092c: 2a e4        	csc	ca0, 8(csp)
2004092e: db 85 d5 20  	csetaddr	ca1, ca1, a3
; 				setMallocDescriptor(pm, (uintptr_t)malloc_fromaddr(pm->prev_addr), (uintptr_t)pm_new, HSP_USED);
20040932: 85 46        	addi	a3, zero, 1
20040934: 5b 05 a4 fe  	cmove	ca0, cs0
20040938: 5b 86 a4 fe  	cmove	ca2, cs1
2004093c: e1 3d        	cjal	0x20040814 <setMallocDescriptor(malloc_s*, __uintcap_t, __uintcap_t, unsigned int)>
; 				setMallocDescriptor(pm_new, (uintptr_t)pm, (uintptr_t)pm_nxt,HSP_FREE);
2004093e: 5b 85 a4 fe  	cmove	ca0, cs1
20040942: db 05 a4 fe  	cmove	ca1, cs0
20040946: a2 64        	clc	cs1, 8(csp)
20040948: 5b 86 a4 fe  	cmove	ca2, cs1
2004094c: 81 46        	mv	a3, zero
2004094e: d9 35        	cjal	0x20040814 <setMallocDescriptor(malloc_s*, __uintcap_t, __uintcap_t, unsigned int)>
; 				pm_nxt->prev_addr = (uintptr_t) pm_new;
20040950: 52 45        	clw	a0, 20(csp)
20040952: 88 c0        	csw	a0, 0(cs1)
20040954: 42 45        	clw	a0, 16(csp)

20040956 <.LBB1_10>:
; 			return (void*)((uintptr_t)pm+sizeof(struct malloc_s));
20040956: 41 05        	addi	a0, a0, 16
20040958: 5b 05 a4 20  	csetaddr	ca0, cs0, a0
2004095c: 59 bf        	j	0x200408f2 <.LBB1_6>
2004095e: 00 00        	unimp	

20040960 <operator delete(void*)>:
;   free(ptr);
20040960: f5 b3        	j	0x2004074c <free(void*)>

20040962 <operator delete(void*, unsigned int)>:
;   free(ptr);
20040962: ed b3        	j	0x2004074c <free(void*)>

20040964 <shift_lfsr(unsigned int*, unsigned int)>:
;   feedback = *lfsr&1;
20040964: 10 41        	clw	a2, 0(ca0)
20040966: 93 76 16 00  	andi	a3, a2, 1
2004096a: b3 06 d0 40  	neg	a3, a3
;   *lfsr >>=1;
2004096e: 05 82        	srli	a2, a2, 1
;   if(feedback ==1) {
20040970: f5 8d        	and	a1, a1, a3
20040972: b1 8d        	xor	a1, a1, a2
20040974: 0c c1        	csw	a1, 0(ca0)
;   return *lfsr;
20040976: 2e 85        	mv	a0, a1
20040978: 82 80        	cret

2004097a <rand()>:
;   feedback = *lfsr&1;
2004097a: 5b 95 41 f2  	cincoffset	ca0, cgp, -220
2004097e: 5b 25 45 00  	csetbounds	ca0, ca0, 4
20040982: 0c 41        	clw	a1, 0(ca0)
20040984: 13 f6 15 00  	andi	a2, a1, 1
20040988: 33 06 c0 40  	neg	a2, a2
;   *lfsr >>=1;
2004098c: 93 d6 25 00  	srli	a3, a1, 2
20040990: 37 77 5e 5a  	lui	a4, 370151
20040994: 13 07 e7 9a  	addi	a4, a4, -1618
;   if(feedback ==1) {
20040998: 79 8e        	and	a2, a2, a4
2004099a: 35 8e        	xor	a2, a2, a3
2004099c: fa 05        	slli	a1, a1, 30
2004099e: fd 85        	srai	a1, a1, 31
200409a0: b7 d6 bc b4  	lui	a3, 740301
200409a4: 93 86 c6 35  	addi	a3, a3, 860
;   feedback = *lfsr&1;
200409a8: 5b 97 81 f2  	cincoffset	ca4, cgp, -216
200409ac: 5b 27 47 00  	csetbounds	ca4, ca4, 4
200409b0: 1c 43        	clw	a5, 0(ca4)
;   if(feedback ==1) {
200409b2: f5 8d        	and	a1, a1, a3
200409b4: b1 8d        	xor	a1, a1, a2
200409b6: 0c c1        	csw	a1, 0(ca0)
;   feedback = *lfsr&1;
200409b8: 13 f5 17 00  	andi	a0, a5, 1
200409bc: 33 05 a0 40  	neg	a0, a0
;   *lfsr >>=1;
200409c0: 13 d6 17 00  	srli	a2, a5, 1
200409c4: b7 c6 5b 7a  	lui	a3, 501180
200409c8: 93 86 36 2e  	addi	a3, a3, 739
;   if(feedback ==1) {
200409cc: 75 8d        	and	a0, a0, a3
200409ce: 29 8e        	xor	a2, a2, a0
;   return (shift_lfsr(&lfsr32, POLY_MASK_32) ^ shift_lfsr(&lfsr31, POLY_MASK_31));
200409d0: 33 45 b6 00  	xor	a0, a2, a1
200409d4: 10 c3        	csw	a2, 0(ca4)
;   return (shift_lfsr(&lfsr32, POLY_MASK_32) ^ shift_lfsr(&lfsr31, POLY_MASK_31));
200409d6: 82 80        	cret

200409d8 <srand(unsigned int)>:
; 	lfsr32 = seed;
200409d8: db 95 41 f2  	cincoffset	ca1, cgp, -220
200409dc: db a5 45 00  	csetbounds	ca1, ca1, 4
200409e0: 88 c1        	csw	a0, 0(ca1)
; 	lfsr31 = seed/2;
200409e2: 05 81        	srli	a0, a0, 1
200409e4: db 95 81 f2  	cincoffset	ca1, cgp, -216
200409e8: db a5 45 00  	csetbounds	ca1, ca1, 4
200409ec: 88 c1        	csw	a0, 0(ca1)
; }
200409ee: 82 80        	cret

200409f0 <random_range(unsigned int, unsigned int)>:
; {
200409f0: 3d 71        	cincoffset	csp, csp, -32
200409f2: 06 ec        	csc	cra, 24(csp)
200409f4: 22 e8        	csc	cs0, 16(csp)
200409f6: 26 e4        	csc	cs1, 8(csp)
200409f8: 2e 84        	mv	s0, a1
200409fa: aa 84        	mv	s1, a0
;     random_val = (rand() % (max+1-min))+min;
200409fc: bd 3f        	cjal	0x2004097a <rand()>
200409fe: b3 05 94 40  	sub	a1, s0, s1
20040a02: 85 05        	addi	a1, a1, 1
20040a04: 33 75 b5 02  	remu	a0, a0, a1
20040a08: 26 95        	add	a0, a0, s1
;     return random_val;
20040a0a: a2 64        	clc	cs1, 8(csp)
20040a0c: 42 64        	clc	cs0, 16(csp)
20040a0e: e2 60        	clc	cra, 24(csp)
20040a10: 05 61        	cincoffset	csp, csp, 32
20040a12: 82 80        	cret

20040a14 <random_fill(unsigned int*, unsigned int)>:
; void random_fill(uint32_t * arr, uint32_t num) {
20040a14: 79 71        	cincoffset	csp, csp, -48
20040a16: 06 f4        	csc	cra, 40(csp)
20040a18: 22 f0        	csc	cs0, 32(csp)
20040a1a: 26 ec        	csc	cs1, 24(csp)
20040a1c: 2e ca        	csw	a1, 20(csp)
20040a1e: 2a e4        	csc	ca0, 8(csp)
20040a20: 81 44        	mv	s1, zero

20040a22 <.LBB4_1>:
; 	for(i=0;i<num;i++) 
20040a22: 52 45        	clw	a0, 20(csp)
20040a24: 63 0b 95 00  	beq	a0, s1, 0x20040a3a <.LBB4_3>
; 		hw_write32(arr+i,rand());
20040a28: 13 95 24 00  	slli	a0, s1, 2
20040a2c: a2 65        	clc	ca1, 8(csp)
20040a2e: 5b 84 a5 22  	cincoffset	cs0, ca1, a0
20040a32: a1 37        	cjal	0x2004097a <rand()>
; inline void hw_write32(volatile uint32_t* addr, uint32_t data) { *addr = data; }
20040a34: 08 c0        	csw	a0, 0(cs0)
; 	for(i=0;i<num;i++) 
20040a36: 85 04        	addi	s1, s1, 1
20040a38: ed b7        	j	0x20040a22 <.LBB4_1>

20040a3a <.LBB4_3>:
; }
20040a3a: e2 64        	clc	cs1, 24(csp)
20040a3c: 02 74        	clc	cs0, 32(csp)
20040a3e: a2 70        	clc	cra, 40(csp)
20040a40: 45 61        	cincoffset	csp, csp, 48
20040a42: 82 80        	cret

20040a44 <operator new(unsigned int)>:
;   ptr = (void*) malloc(size);
20040a44: bd b5        	j	0x200408b2 <malloc(unsigned int)>
20040a46: 00 00        	unimp	

20040a48 <calloc(unsigned int, unsigned int)>:
; {
20040a48: 3d 71        	cincoffset	csp, csp, -32
;   int bytes = num*size;
20040a4a: 06 ec        	csc	cra, 24(csp)
20040a4c: 22 e8        	csc	cs0, 16(csp)
20040a4e: 26 e4        	csc	cs1, 8(csp)
20040a50: 33 84 a5 02  	mul	s0, a1, a0
;   void *ptr = malloc(bytes);
20040a54: 22 85        	mv	a0, s0
20040a56: b1 3d        	cjal	0x200408b2 <malloc(unsigned int)>
20040a58: db 04 a5 fe  	cmove	cs1, ca0
;   if(ptr != NULL) {
20040a5c: 99 c4        	beqz	s1, 0x20040a6a <.LBB0_2>
;     memset(ptr, 0, bytes);
20040a5e: 5b 85 a4 fe  	cmove	ca0, cs1
20040a62: 81 45        	mv	a1, zero
20040a64: 22 86        	mv	a2, s0
20040a66: ef 00 b0 0f  	cjal	0x20041360 <memset(void*, int, unsigned int)>

20040a6a <.LBB0_2>:
; 	return ptr;
20040a6a: 5b 85 a4 fe  	cmove	ca0, cs1
20040a6e: a2 64        	clc	cs1, 8(csp)
20040a70: 42 64        	clc	cs0, 16(csp)
20040a72: e2 60        	clc	cra, 24(csp)
20040a74: 05 61        	cincoffset	csp, csp, 32
20040a76: 82 80        	cret

20040a78 <strtol(char const*, char**, int)>:
; {
20040a78: 5d 71        	cincoffset	csp, csp, -80
20040a7a: 86 e4        	csc	cra, 72(csp)
20040a7c: a2 e0        	csc	cs0, 64(csp)
20040a7e: 26 fc        	csc	cs1, 56(csp)
20040a80: 32 d4        	csw	a2, 40(csp)
20040a82: 2e e8        	csc	ca1, 16(csp)
20040a84: 5b 04 a5 fe  	cmove	cs0, ca0
20040a88: 2a e0        	csc	ca0, 0(csp)

20040a8a <.LBB0_1>:
20040a8a: db 04 a4 fe  	cmove	cs1, cs0
; 		c = *s++;
20040a8e: 03 45 04 00  	clbu	a0, 0(cs0)
20040a92: 5b 14 14 00  	cincoffset	cs0, cs0, 1
; 	} while (isspace(c));
20040a96: 85 45        	addi	a1, zero, 1
20040a98: 2a da        	csw	a0, 52(csp)
20040a9a: fd 34        	cjal	0x20040588 <isctype(int, int)>
20040a9c: 7d f5        	bnez	a0, 0x20040a8a <.LBB0_1>
20040a9e: db 85 a4 fe  	cmove	ca1, cs1
20040aa2: 13 05 d0 02  	addi	a0, zero, 45
20040aa6: d2 57        	clw	a5, 52(csp)
; 	if (c == '-') {
20040aa8: 63 8c a7 00  	beq	a5, a0, 0x20040ac0 <.LBB0_5>
20040aac: db 04 a4 fe  	cmove	cs1, cs0
20040ab0: 13 05 b0 02  	addi	a0, zero, 43
20040ab4: 05 47        	addi	a4, zero, 1
20040ab6: 22 54        	clw	s0, 40(csp)
; 	if (c == '-') {
20040ab8: 63 9a a7 00  	bne	a5, a0, 0x20040acc <.LBB0_7>
20040abc: 05 47        	addi	a4, zero, 1
20040abe: 19 a0        	j	0x20040ac4 <.LBB0_6>

20040ac0 <.LBB0_5>:
20040ac0: 01 47        	mv	a4, zero
20040ac2: 22 54        	clw	s0, 40(csp)

20040ac4 <.LBB0_6>:
20040ac4: 83 c7 15 00  	clbu	a5, 1(ca1)
20040ac8: db 94 25 00  	cincoffset	cs1, ca1, 2

20040acc <.LBB0_7>:
; 	if ((base == 0 || base == 16) &&
20040acc: 13 75 f4 fe  	andi	a0, s0, -17
20040ad0: 93 35 15 00  	seqz	a1, a0
20040ad4: 13 85 07 fd  	addi	a0, a5, -48
20040ad8: 13 35 15 00  	seqz	a0, a0
20040adc: e9 8d        	and	a1, a1, a0
20040ade: 91 c9        	beqz	a1, 0x20040af2 <.LBB0_9>
; 	    c == '0' && (*s == 'x' || *s == 'X')) {
20040ae0: 83 c5 04 00  	clbu	a1, 0(cs1)
20040ae4: 13 e6 05 02  	ori	a2, a1, 32
20040ae8: 93 06 80 07  	addi	a3, zero, 120
20040aec: c1 45        	addi	a1, zero, 16
20040aee: 63 01 d6 02  	beq	a2, a3, 0x20040b10 <.LBB0_11>

20040af2 <.LBB0_9>:
; 	} else if ((base == 0 || base == 2) &&
20040af2: 93 75 d4 ff  	andi	a1, s0, -3
20040af6: 93 b5 15 00  	seqz	a1, a1
20040afa: 6d 8d        	and	a0, a0, a1
20040afc: 19 cd        	beqz	a0, 0x20040b1a <.LBB0_12>
; 	    c == '0' && (*s == 'b' || *s == 'B')) {
20040afe: 03 c5 04 00  	clbu	a0, 0(cs1)
20040b02: 13 65 05 02  	ori	a0, a0, 32
20040b06: 13 06 20 06  	addi	a2, zero, 98
20040b0a: 89 45        	addi	a1, zero, 2
20040b0c: 63 10 c5 02  	bne	a0, a2, 0x20040b2c <.LBB0_14>

20040b10 <.LBB0_11>:
20040b10: 83 c7 14 00  	clbu	a5, 1(cs1)
20040b14: db 94 24 00  	cincoffset	cs1, cs1, 2
20040b18: 2e 84        	mv	s0, a1

20040b1a <.LBB0_12>:
20040b1a: 93 05 00 03  	addi	a1, zero, 48
; 	if (base == 0)
20040b1e: 13 35 14 00  	seqz	a0, s0
20040b22: 63 87 b7 00  	beq	a5, a1, 0x20040b30 <.LBB0_15>
20040b26: a9 45        	addi	a1, zero, 10
20040b28: 2e d2        	csw	a1, 36(csp)
20040b2a: 39 a0        	j	0x20040b38 <.LBB0_16>

20040b2c <.LBB0_14>:
; 	if (base == 0)
20040b2c: 13 35 14 00  	seqz	a0, s0

20040b30 <.LBB0_15>:
20040b30: a1 45        	addi	a1, zero, 8
20040b32: 2e d2        	csw	a1, 36(csp)
20040b34: 93 07 00 03  	addi	a5, zero, 48

20040b38 <.LBB0_16>:
20040b38: 26 f4        	csc	cs1, 40(csp)
; 	if (base == 0)
20040b3a: 11 e1        	bnez	a0, 0x20040b3e <.LBB0_18>
20040b3c: 22 d2        	csw	s0, 36(csp)

20040b3e <.LBB0_18>:
20040b3e: 81 44        	mv	s1, zero
20040b40: 02 da        	csw	zero, 52(csp)
20040b42: 37 05 00 80  	lui	a0, 524288
20040b46: 3a c6        	csw	a4, 12(csp)
; 	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
20040b48: b3 05 e5 40  	sub	a1, a0, a4
20040b4c: 12 55        	clw	a0, 36(csp)
; 	cutoff /= (unsigned long)base;
20040b4e: 33 d6 a5 02  	divu	a2, a1, a0
20040b52: 32 d0        	csw	a2, 32(csp)
20040b54: 33 05 a6 02  	mul	a0, a2, a0
20040b58: 2e c4        	csw	a1, 8(csp)
20040b5a: 33 85 a5 40  	sub	a0, a1, a0
20040b5e: 2a ce        	csw	a0, 28(csp)

20040b60 <.LBB0_19>:
; 		if (isdigit(c))
20040b60: a1 45        	addi	a1, zero, 8
20040b62: 3e 85        	mv	a0, a5
20040b64: 3e 84        	mv	s0, a5
20040b66: 0d 34        	cjal	0x20040588 <isctype(int, int)>
20040b68: 01 c5        	beqz	a0, 0x20040b70 <.LBB0_21>
; 			c -= '0';
20040b6a: 13 05 04 fd  	addi	a0, s0, -48
20040b6e: 05 a0        	j	0x20040b8e <.LBB0_25>

20040b70 <.LBB0_21>:
; 		else if (isalpha(c))
20040b70: 93 05 00 04  	addi	a1, zero, 64
20040b74: 22 85        	mv	a0, s0
20040b76: 09 3c        	cjal	0x20040588 <isctype(int, int)>
20040b78: 2d c1        	beqz	a0, 0x20040bda <.LBB0_31>
; 			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
20040b7a: 91 45        	addi	a1, zero, 4
20040b7c: 22 85        	mv	a0, s0
20040b7e: 29 34        	cjal	0x20040588 <isctype(int, int)>
20040b80: 93 05 90 fa  	addi	a1, zero, -87
; 			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
20040b84: 19 c1        	beqz	a0, 0x20040b8a <.LBB0_24>
20040b86: 93 05 90 fc  	addi	a1, zero, -55

20040b8a <.LBB0_24>:
; 			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
20040b8a: 33 85 85 00  	add	a0, a1, s0

20040b8e <.LBB0_25>:
; 		if (c >= base)
20040b8e: 92 55        	clw	a1, 36(csp)
20040b90: 63 55 b5 04  	bge	a0, a1, 0x20040bda <.LBB0_31>
; 		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
20040b94: d2 55        	clw	a1, 52(csp)
20040b96: 93 a5 05 00  	slti	a1, a1, 0
20040b9a: 02 57        	clw	a4, 32(csp)
20040b9c: 33 36 97 00  	sltu	a2, a4, s1
20040ba0: d1 8d        	or	a1, a1, a2
20040ba2: fd 56        	addi	a3, zero, -1
20040ba4: 99 c1        	beqz	a1, 0x20040baa <.LBB0_28>
20040ba6: a6 85        	mv	a1, s1
20040ba8: 05 a0        	j	0x20040bc8 <.LBB0_30>

20040baa <.LBB0_28>:
; 		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
20040baa: b3 c5 e4 00  	xor	a1, s1, a4
20040bae: 93 b5 15 00  	seqz	a1, a1
20040bb2: 72 46        	clw	a2, 28(csp)
20040bb4: 33 26 a6 00  	slt	a2, a2, a0
20040bb8: 6d 8e        	and	a2, a2, a1
20040bba: ba 85        	mv	a1, a4
20040bbc: 11 e6        	bnez	a2, 0x20040bc8 <.LBB0_30>
; 			acc *= base;
20040bbe: 92 55        	clw	a1, 36(csp)
20040bc0: b3 85 b4 02  	mul	a1, s1, a1
; 			acc += c;
20040bc4: aa 95        	add	a1, a1, a0
20040bc6: 85 46        	addi	a3, zero, 1

20040bc8 <.LBB0_30>:
20040bc8: 36 da        	csw	a3, 52(csp)
20040bca: 22 75        	clc	ca0, 40(csp)
; 	for (acc = 0, any = 0;; c = *s++) {
20040bcc: 83 47 05 00  	clbu	a5, 0(ca0)
20040bd0: 5b 15 15 00  	cincoffset	ca0, ca0, 1
20040bd4: 2a f4        	csc	ca0, 40(csp)
20040bd6: ae 84        	mv	s1, a1
20040bd8: 61 b7        	j	0x20040b60 <.LBB0_19>

20040bda <.LBB0_31>:
20040bda: 42 65        	clc	ca0, 16(csp)
20040bdc: 32 44        	clw	s0, 12(csp)
; 	if (endptr != 0)
20040bde: 01 c9        	beqz	a0, 0x20040bee <.LBB0_35>
20040be0: 82 65        	clc	ca1, 0(csp)
; 		*endptr = (char *)(any ? s - 1 : nptr);
20040be2: 52 56        	clw	a2, 52(csp)
20040be4: 01 c6        	beqz	a2, 0x20040bec <.LBB0_34>
20040be6: a2 75        	clc	ca1, 40(csp)
20040be8: db 95 f5 ff  	cincoffset	ca1, ca1, -1

20040bec <.LBB0_34>:
; 		*endptr = (char *)(any ? s - 1 : nptr);
20040bec: 0c e1        	csc	ca1, 0(ca0)

20040bee <.LBB0_35>:
; 	if (any < 0) {
20040bee: 19 e0        	bnez	s0, 0x20040bf4 <.LBB0_37>
20040bf0: b3 04 90 40  	neg	s1, s1

20040bf4 <.LBB0_37>:
20040bf4: 22 45        	clw	a0, 8(csp)
20040bf6: d2 55        	clw	a1, 52(csp)
; 	if (any < 0) {
20040bf8: 63 c3 05 00  	bltz	a1, 0x20040bfe <.LBB0_39>
20040bfc: 26 85        	mv	a0, s1

20040bfe <.LBB0_39>:
; 	return (acc);
20040bfe: e2 74        	clc	cs1, 56(csp)
20040c00: 06 64        	clc	cs0, 64(csp)
20040c02: a6 60        	clc	cra, 72(csp)
20040c04: 61 61        	cincoffset	csp, csp, 80
20040c06: 82 80        	cret

20040c08 <pvsprintf(char*, char const*, void*)>:
; {
20040c08: 59 71        	cincoffset	csp, csp, -112
20040c0a: 86 f4        	csc	cra, 104(csp)
20040c0c: a2 f0        	csc	cs0, 96(csp)
20040c0e: a6 ec        	csc	cs1, 88(csp)
20040c10: b2 e4        	csc	ca2, 72(csp)
20040c12: db 02 a5 fe  	cmove	ct0, ca0
20040c16: 01 46        	mv	a2, zero
20040c18: 81 40        	mv	ra, zero
20040c1a: 81 44        	mv	s1, zero
20040c1c: 81 46        	mv	a3, zero
20040c1e: 02 d6        	csw	zero, 44(csp)
20040c20: 0d 43        	addi	t1, zero, 3
20040c22: 5b 97 81 f3  	cincoffset	ca4, cgp, -200
20040c26: 5b 27 17 01  	csetbounds	ca4, ca4, 17
20040c2a: 3a f0        	csc	ca4, 32(csp)
20040c2c: 5b 17 f7 00  	cincoffset	ca4, ca4, 15
20040c30: 3a e4        	csc	ca4, 8(csp)

20040c32 <.LBB0_58>:
20040c32: 17 27 00 00  	auipcc	ca4, 2
20040c36: 5b 17 97 0a  	cincoffset	ca4, ca4, 169
20040c3a: 5b 27 07 02  	csetbounds	ca4, ca4, 32
20040c3e: 3a ec        	csc	ca4, 24(csp)
20040c40: 2a e0        	csc	ca0, 0(csp)
20040c42: 5b 87 a5 fe  	cmove	ca4, ca1

20040c46 <.LBB0_1>:
; 	while((cval=*format++)) {
20040c46: 03 45 07 00  	clbu	a0, 0(ca4)
20040c4a: 63 03 05 30  	beqz	a0, 0x20040f50 <.LBB0_53>
20040c4e: db 13 17 00  	cincoffset	ct2, ca4, 1
; 		switch(state) {
20040c52: 25 c6        	beqz	a2, 0x20040cba <.LBB0_13>
20040c54: 63 01 66 06  	beq	a2, t1, 0x20040cb6 <.LBB0_12>
20040c58: 89 47        	addi	a5, zero, 2
20040c5a: 63 00 f6 08  	beq	a2, a5, 0x20040cda <.LBB0_15>
;                 for(x=0;x<fmt_cnt;x++) { *lptr++ = *pfmt++; }
20040c5e: 63 43 90 00  	bgtz	s1, 0x20040c64 <.LBB0_7>
20040c62: 81 44        	mv	s1, zero

20040c64 <.LBB0_7>:
20040c64: db 87 a5 fe  	cmove	ca5, ca1
;                 for(x=0;x<fmt_cnt;x++) { *lptr++ = *pfmt++; }
20040c68: 99 c8        	beqz	s1, 0x20040c7e <.LBB0_9>

20040c6a <.LBB0_8>:
20040c6a: 83 85 07 00  	clb	a1, 0(ca5)
20040c6e: db 97 17 00  	cincoffset	ca5, ca5, 1
20040c72: 23 80 b2 00  	csb	a1, 0(ct0)
20040c76: db 92 12 00  	cincoffset	ct0, ct0, 1
20040c7a: fd 14        	addi	s1, s1, -1
20040c7c: fd f4        	bnez	s1, 0x20040c6a <.LBB0_8>

20040c7e <.LBB0_9>:
20040c7e: 01 46        	mv	a2, zero
20040c80: 85 44        	addi	s1, zero, 1
20040c82: db 05 a7 fe  	cmove	ca1, ca4
20040c86: 81 40        	mv	ra, zero
20040c88: 81 46        	mv	a3, zero
20040c8a: 02 d6        	csw	zero, 44(csp)
20040c8c: 5b 87 a3 fe  	cmove	ca4, ct2
; 				if(cval == '%') {
20040c90: 13 04 50 02  	addi	s0, zero, 37
20040c94: e3 09 85 fa  	beq	a0, s0, 0x20040c46 <.LBB0_1>
20040c98: 93 05 30 02  	addi	a1, zero, 35
20040c9c: 63 19 b5 02  	bne	a0, a1, 0x20040cce <.LBB0_14>
20040ca0: 81 40        	mv	ra, zero
20040ca2: 81 44        	mv	s1, zero
20040ca4: 81 46        	mv	a3, zero
20040ca6: 05 45        	addi	a0, zero, 1
20040ca8: 2a d6        	csw	a0, 44(csp)
20040caa: 09 46        	addi	a2, zero, 2
20040cac: db 85 a7 fe  	cmove	ca1, ca5
20040cb0: 5b 87 a3 fe  	cmove	ca4, ct2
20040cb4: 49 bf        	j	0x20040c46 <.LBB0_1>

20040cb6 <.LBB0_12>:
20040cb6: 36 84        	mv	s0, a3
20040cb8: 15 a8        	j	0x20040cec <.LBB0_16>

20040cba <.LBB0_13>:
; 				if(cval == '%') {
20040cba: 13 05 b5 fd  	addi	a0, a0, -37
20040cbe: 13 36 15 00  	seqz	a2, a0
20040cc2: 33 35 a0 00  	snez	a0, a0
20040cc6: aa 94        	add	s1, s1, a0
20040cc8: 5b 87 a3 fe  	cmove	ca4, ct2
20040ccc: ad bf        	j	0x20040c46 <.LBB0_1>

20040cce <.LBB0_14>:
20040cce: db 85 a7 fe  	cmove	ca1, ca5
20040cd2: b2 80        	mv	ra, a2
20040cd4: b2 84        	mv	s1, a2
20040cd6: b2 86        	mv	a3, a2
20040cd8: 32 d6        	csw	a2, 44(csp)

20040cda <.LBB0_15>:
20040cda: 36 84        	mv	s0, a3
20040cdc: 85 46        	addi	a3, zero, 1
20040cde: 0d 46        	addi	a2, zero, 3
20040ce0: 5b 87 a3 fe  	cmove	ca4, ct2
; 				if(cval == '0') {
20040ce4: 93 07 00 03  	addi	a5, zero, 48
20040ce8: e3 0f f5 f4  	beq	a0, a5, 0x20040c46 <.LBB0_1>

20040cec <.LBB0_16>:
; 				switch(cval) {
20040cec: 13 06 80 05  	addi	a2, zero, 88
20040cf0: a6 66        	clc	ca3, 72(csp)
20040cf2: 63 07 c5 04  	beq	a0, a2, 0x20040d40 <.LBB0_25>
20040cf6: 13 06 30 06  	addi	a2, zero, 99
20040cfa: 63 00 c5 18  	beq	a0, a2, 0x20040e7a <.LBB0_43>
20040cfe: 13 06 40 06  	addi	a2, zero, 100
20040d02: 63 02 c5 02  	beq	a0, a2, 0x20040d26 <.LBB0_23>
20040d06: 13 06 90 06  	addi	a2, zero, 105
20040d0a: 63 0e c5 00  	beq	a0, a2, 0x20040d26 <.LBB0_23>
20040d0e: 13 06 30 07  	addi	a2, zero, 115
20040d12: 63 08 c5 1a  	beq	a0, a2, 0x20040ec2 <.LBB0_44>
20040d16: 13 06 80 07  	addi	a2, zero, 120
20040d1a: 63 03 c5 02  	beq	a0, a2, 0x20040d40 <.LBB0_25>
20040d1e: 13 06 50 07  	addi	a2, zero, 117
20040d22: 63 16 c5 20  	bne	a0, a2, 0x20040f2e <.LBB0_50>

20040d26 <.LBB0_23>:
; 						d = va_arg(ap, int);
20040d26: 90 42        	clw	a2, 0(ca3)
; 	if(sign != 0 && value < 0) {
20040d28: 13 05 b5 f8  	addi	a0, a0, -117
20040d2c: 33 35 a0 00  	snez	a0, a0
20040d30: 93 25 06 00  	slti	a1, a2, 0
20040d34: 6d 8d        	and	a0, a0, a1
20040d36: a6 c2        	csw	s1, 68(csp)
20040d38: a2 ca        	csw	s0, 84(csp)
20040d3a: 51 e9        	bnez	a0, 0x20040dce <.LBB0_32>
20040d3c: b2 85        	mv	a1, a2
20040d3e: 51 a8        	j	0x20040dd2 <.LBB0_33>

20040d40 <.LBB0_25>:
20040d40: a2 ca        	csw	s0, 84(csp)
20040d42: a6 c2        	csw	s1, 68(csp)
; 						u = va_arg(ap, uint32_t);
20040d44: db 95 46 00  	cincoffset	ca1, ca3, 4
20040d48: 2e e8        	csc	ca1, 16(csp)
20040d4a: 8c 42        	clw	a1, 0(ca3)
; 						s = int2ascihex(u, (cval=='X'?16:0),&count);
20040d4c: 13 05 85 fa  	addi	a0, a0, -88
20040d50: 13 35 15 00  	seqz	a0, a0
20040d54: 12 05        	slli	a0, a0, 4
; 	*ptr-- = '\0';
20040d56: 02 76        	clc	ca2, 32(csp)
20040d58: 23 08 06 00  	csb	zero, 16(ca2)
20040d5c: 05 44        	addi	s0, zero, 1
20040d5e: a2 64        	clc	cs1, 8(csp)
20040d60: e2 66        	clc	ca3, 24(csp)
20040d62: 41 47        	addi	a4, zero, 16
20040d64: 1e f8        	csc	ct2, 48(csp)

20040d66 <.LBB0_26>:
; 		*ptr = HexTable[(value&0xf)+ulcase];
20040d66: 13 f6 f5 00  	andi	a2, a1, 15
20040d6a: 49 8e        	or	a2, a2, a0
20040d6c: 5b 86 c6 22  	cincoffset	ca2, ca3, a2
20040d70: 03 06 06 00  	clb	a2, 0(ca2)
20040d74: 23 80 c4 00  	csb	a2, 0(cs1)
; 		if(value == 0) break;
20040d78: 63 e9 e5 00  	bltu	a1, a4, 0x20040d8a <.LBB0_29>
; 		value =(value>>4) &0x0fffffff;	
20040d7c: 91 81        	srli	a1, a1, 4
; 	} while(ptr > str);
20040d7e: 05 04        	addi	s0, s0, 1
; 		ptr--;
20040d80: db 94 f4 ff  	cincoffset	cs1, cs1, -1
; 	} while(ptr > str);
20040d84: e3 11 e4 fe  	bne	s0, a4, 0x20040d66 <.LBB0_26>
20040d88: 3d 44        	addi	s0, zero, 15

20040d8a <.LBB0_29>:
; 						lptr += write_char_cnt(lptr, size, count, hex_str, lead_zero);
20040d8a: 5b 85 a2 fe  	cmove	ca0, ct0
20040d8e: 86 c0        	csw	ra, 64(csp)
20040d90: 86 85        	mv	a1, ra
20040d92: 22 86        	mv	a2, s0
20040d94: b2 56        	clw	a3, 44(csp)
20040d96: 56 47        	clw	a4, 84(csp)
20040d98: 16 fc        	csc	ct0, 56(csp)
20040d9a: dd 22        	cjal	0x20040f80 <write_char_cnt(char*, int, int, int, int)>
20040d9c: e2 72        	clc	ct0, 56(csp)
; 						lptr += write_char_cnt(lptr, size, count, hex_str, lead_zero);
20040d9e: db 82 a2 22  	cincoffset	ct0, ct0, a0
20040da2: 0d 43        	addi	t1, zero, 3
20040da4: 42 77        	clc	ca4, 48(csp)
;                         for(x=0;x<count;x++) { *lptr++ = *s++; }
20040da6: 19 c8        	beqz	s0, 0x20040dbc <.LBB0_31>

20040da8 <.LBB0_30>:
20040da8: 03 85 04 00  	clb	a0, 0(cs1)
20040dac: db 94 14 00  	cincoffset	cs1, cs1, 1
20040db0: 23 80 a2 00  	csb	a0, 0(ct0)
20040db4: db 92 12 00  	cincoffset	ct0, ct0, 1
20040db8: 7d 14        	addi	s0, s0, -1
20040dba: 7d f4        	bnez	s0, 0x20040da8 <.LBB0_30>

20040dbc <.LBB0_31>:
20040dbc: 01 46        	mv	a2, zero
20040dbe: db 05 a7 fe  	cmove	ca1, ca4
20040dc2: 42 65        	clc	ca0, 16(csp)
20040dc4: aa e4        	csc	ca0, 72(csp)
20040dc6: d6 46        	clw	a3, 84(csp)
20040dc8: 96 44        	clw	s1, 68(csp)
20040dca: 86 40        	clw	ra, 64(csp)
20040dcc: ad bd        	j	0x20040c46 <.LBB0_1>

20040dce <.LBB0_32>:
20040dce: b3 05 c0 40  	neg	a1, a2

20040dd2 <.LBB0_33>:
20040dd2: 62 67        	clc	ca4, 24(csp)
20040dd4: 41 43        	addi	t1, zero, 16
20040dd6: 29 44        	addi	s0, zero, 10
20040dd8: cd 47        	addi	a5, zero, 19
20040dda: db 96 46 00  	cincoffset	ca3, ca3, 4
20040dde: b6 e4        	csc	ca3, 72(csp)
20040de0: 13 55 f6 01  	srli	a0, a2, 31
20040de4: 02 76        	clc	ca2, 32(csp)
; 	*ptr-- = '\0';
20040de6: 23 08 06 00  	csb	zero, 16(ca2)
20040dea: db 14 f6 00  	cincoffset	cs1, ca2, 15

20040dee <.LBB0_34>:
20040dee: 2e 86        	mv	a2, a1
; 		lvalue = lvalue/10;	
20040df0: b3 c5 85 02  	div	a1, a1, s0
20040df4: b3 86 85 02  	mul	a3, a1, s0
20040df8: b3 06 d6 40  	sub	a3, a2, a3
; 		*ptr = HexTable[lvalue%10];
20040dfc: db 06 d7 22  	cincoffset	ca3, ca4, a3
20040e00: 83 86 06 00  	clb	a3, 0(ca3)
; 		if(lvalue == 0) break;
20040e04: 25 06        	addi	a2, a2, 9
; 		*ptr = HexTable[lvalue%10];
20040e06: 23 80 d4 00  	csb	a3, 0(cs1)
; 		if(lvalue == 0) break;
20040e0a: 63 6a f6 00  	bltu	a2, a5, 0x20040e1e <.LBB0_36>
; 		ptr--;
20040e0e: db 94 f4 ff  	cincoffset	cs1, cs1, -1
; 	} while(ptr >  str);
20040e12: 5b 96 81 f3  	cincoffset	ca2, cgp, -200
20040e16: 5b 26 16 01  	csetbounds	ca2, ca2, 17
20040e1a: e3 6a 96 fc  	bltu	a2, s1, 0x20040dee <.LBB0_34>

20040e1e <.LBB0_36>:
; 	if(value < 0) {
20040e1e: 1e f8        	csc	ct2, 48(csp)
20040e20: 09 c9        	beqz	a0, 0x20040e32 <.LBB0_38>
; 		ptr--;
20040e22: 5b 95 f4 ff  	cincoffset	ca0, cs1, -1
; 		*ptr = '-';
20040e26: 93 05 d0 02  	addi	a1, zero, 45
20040e2a: a3 8f b4 fe  	csb	a1, -1(cs1)
20040e2e: db 04 a5 fe  	cmove	cs1, ca0

20040e32 <.LBB0_38>:
; 	*count = 16-(ptr-str);
20040e32: 02 75        	clc	ca0, 32(csp)
20040e34: 5b 85 a4 28  	csub	a0, cs1, ca0
20040e38: 33 04 a3 40  	sub	s0, t1, a0
; 						lptr += write_char_cnt(lptr, size, count, 0, lead_zero);
20040e3c: 5b 85 a2 fe  	cmove	ca0, ct0
20040e40: 86 c0        	csw	ra, 64(csp)
20040e42: 86 85        	mv	a1, ra
20040e44: 22 86        	mv	a2, s0
20040e46: 81 46        	mv	a3, zero
20040e48: 56 47        	clw	a4, 84(csp)
20040e4a: 16 fc        	csc	ct0, 56(csp)
20040e4c: 15 2a        	cjal	0x20040f80 <write_char_cnt(char*, int, int, int, int)>
;                         for(x=0;x<count;x++) { *lptr++ = *s++; }
20040e4e: 63 43 80 00  	bgtz	s0, 0x20040e54 <.LBB0_40>
20040e52: 01 44        	mv	s0, zero

20040e54 <.LBB0_40>:
20040e54: e2 72        	clc	ct0, 56(csp)
20040e56: db 82 a2 22  	cincoffset	ct0, ct0, a0
20040e5a: 0d 43        	addi	t1, zero, 3
20040e5c: 42 77        	clc	ca4, 48(csp)
20040e5e: 86 40        	clw	ra, 64(csp)
;                         for(x=0;x<count;x++) { *lptr++ = *s++; }
20040e60: 19 c8        	beqz	s0, 0x20040e76 <.LBB0_42>

20040e62 <.LBB0_41>:
20040e62: 03 85 04 00  	clb	a0, 0(cs1)
20040e66: db 94 14 00  	cincoffset	cs1, cs1, 1
20040e6a: 23 80 a2 00  	csb	a0, 0(ct0)
20040e6e: db 92 12 00  	cincoffset	ct0, ct0, 1
20040e72: 7d 14        	addi	s0, s0, -1
20040e74: 7d f4        	bnez	s0, 0x20040e62 <.LBB0_41>

20040e76 <.LBB0_42>:
20040e76: 01 46        	mv	a2, zero
20040e78: 75 a0        	j	0x20040f24 <.LBB0_49>

20040e7a <.LBB0_43>:
; 						c = (char) va_arg(ap, int);
20040e7a: 88 42        	clw	a0, 0(ca3)
20040e7c: aa c0        	csw	a0, 64(csp)
20040e7e: a6 c2        	csw	s1, 68(csp)
; 						c = (char) va_arg(ap, int);
20040e80: 5b 95 46 00  	cincoffset	ca0, ca3, 4
; 						lptr += write_char_cnt(lptr, size, 1, 0, 0);
20040e84: aa e4        	csc	ca0, 72(csp)
20040e86: 05 46        	addi	a2, zero, 1
20040e88: 5b 85 a2 fe  	cmove	ca0, ct0
20040e8c: 86 85        	mv	a1, ra
20040e8e: 81 46        	mv	a3, zero
20040e90: 01 47        	mv	a4, zero
20040e92: 16 fc        	csc	ct0, 56(csp)
20040e94: a2 ca        	csw	s0, 84(csp)
20040e96: 5b 84 a3 fe  	cmove	cs0, ct2
20040e9a: 86 84        	mv	s1, ra
; 						lptr += write_char_cnt(lptr, size, 1, 0, 0);
20040e9c: d5 20        	cjal	0x20040f80 <write_char_cnt(char*, int, int, int, int)>
20040e9e: a6 80        	mv	ra, s1
20040ea0: 0d 43        	addi	t1, zero, 3
20040ea2: 01 46        	mv	a2, zero
; 						lptr += write_char_cnt(lptr, size, 1, 0, 0);
20040ea4: e2 75        	clc	ca1, 56(csp)
20040ea6: 5b 85 a5 22  	cincoffset	ca0, ca1, a0
;                         *lptr++ = c;
20040eaa: 86 45        	clw	a1, 64(csp)
20040eac: 23 00 b5 00  	csb	a1, 0(ca0)
20040eb0: db 12 15 00  	cincoffset	ct0, ca0, 1
20040eb4: db 05 a4 fe  	cmove	ca1, cs0
20040eb8: 96 44        	clw	s1, 68(csp)
20040eba: d6 46        	clw	a3, 84(csp)
20040ebc: 5b 07 a4 fe  	cmove	ca4, cs0
20040ec0: 59 b3        	j	0x20040c46 <.LBB0_1>

20040ec2 <.LBB0_44>:
20040ec2: a2 ca        	csw	s0, 84(csp)
20040ec4: 1e f8        	csc	ct2, 48(csp)
20040ec6: a6 c2        	csw	s1, 68(csp)
; 						s = va_arg(ap, char *);
20040ec8: 5b 85 f6 fe  	cgetaddr	a0, ca3
20040ecc: 1d 05        	addi	a0, a0, 7
20040ece: 61 99        	andi	a0, a0, -8
20040ed0: 5b 85 a6 20  	csetaddr	ca0, ca3, a0
20040ed4: aa e4        	csc	ca0, 72(csp)
20040ed6: 08 61        	clc	ca0, 0(ca0)
20040ed8: 2a fc        	csc	ca0, 56(csp)
20040eda: db 84 a2 fe  	cmove	cs1, ct0
20040ede: 86 c0        	csw	ra, 64(csp)
; 						count = (int)strlen(s);
20040ee0: 25 2e        	cjal	0x20041218 <strlen(char const*)>
20040ee2: 2a 84        	mv	s0, a0
; 						lptr += write_char_cnt(lptr, size, count, 0, 0);
20040ee4: 5b 85 a4 fe  	cmove	ca0, cs1
20040ee8: 86 45        	clw	a1, 64(csp)
20040eea: 22 86        	mv	a2, s0
20040eec: 81 46        	mv	a3, zero
20040eee: 01 47        	mv	a4, zero
20040ef0: 41 28        	cjal	0x20040f80 <write_char_cnt(char*, int, int, int, int)>
;                         for(x=0;x<count;x++) { *lptr++ = *s++; }
20040ef2: 63 43 80 00  	bgtz	s0, 0x20040ef8 <.LBB0_46>
20040ef6: 01 44        	mv	s0, zero

20040ef8 <.LBB0_46>:
20040ef8: db 82 a4 22  	cincoffset	ct0, cs1, a0
20040efc: 0d 43        	addi	t1, zero, 3
20040efe: 42 77        	clc	ca4, 48(csp)
20040f00: 86 40        	clw	ra, 64(csp)
20040f02: e2 75        	clc	ca1, 56(csp)
;                         for(x=0;x<count;x++) { *lptr++ = *s++; }
20040f04: 19 c8        	beqz	s0, 0x20040f1a <.LBB0_48>

20040f06 <.LBB0_47>:
20040f06: 03 85 05 00  	clb	a0, 0(ca1)
20040f0a: db 95 15 00  	cincoffset	ca1, ca1, 1
20040f0e: 23 80 a2 00  	csb	a0, 0(ct0)
20040f12: db 92 12 00  	cincoffset	ct0, ct0, 1
20040f16: 7d 14        	addi	s0, s0, -1
20040f18: 7d f4        	bnez	s0, 0x20040f06 <.LBB0_47>

20040f1a <.LBB0_48>:
20040f1a: 01 46        	mv	a2, zero
; 						s = va_arg(ap, char *);
20040f1c: 26 65        	clc	ca0, 72(csp)
20040f1e: 5b 15 85 00  	cincoffset	ca0, ca0, 8
20040f22: aa e4        	csc	ca0, 72(csp)

20040f24 <.LBB0_49>:
20040f24: db 05 a7 fe  	cmove	ca1, ca4
20040f28: d6 46        	clw	a3, 84(csp)
20040f2a: 96 44        	clw	s1, 68(csp)
20040f2c: 29 bb        	j	0x20040c46 <.LBB0_1>

20040f2e <.LBB0_50>:
; 						if(cval >= 0x30 && cval < 0x3a) {
20040f2e: 13 06 05 fd  	addi	a2, a0, -48
20040f32: 13 76 f6 0f  	andi	a2, a2, 255
20040f36: a9 46        	addi	a3, zero, 10
20040f38: 63 77 d6 00  	bgeu	a2, a3, 0x20040f46 <.LBB0_52>
20040f3c: 33 86 d0 02  	mul	a2, ra, a3
20040f40: 32 95        	add	a0, a0, a2
20040f42: 93 00 05 fd  	addi	ra, a0, -48

20040f46 <.LBB0_52>:
20040f46: 0d 46        	addi	a2, zero, 3
20040f48: a2 86        	mv	a3, s0
20040f4a: 5b 87 a3 fe  	cmove	ca4, ct2
20040f4e: e5 b9        	j	0x20040c46 <.LBB0_1>

20040f50 <.LBB0_53>:
;     for(x=0;x<fmt_cnt;x++) { *lptr++ = *pfmt++; }
20040f50: 63 4d 90 00  	bgtz	s1, 0x20040f6a <.LBB0_56>
20040f54: 81 44        	mv	s1, zero
20040f56: 11 a8        	j	0x20040f6a <.LBB0_56>

20040f58 <.LBB0_55>:
;     for(x=0;x<fmt_cnt;x++) { *lptr++ = *pfmt++; }
20040f58: 03 85 05 00  	clb	a0, 0(ca1)
20040f5c: db 95 15 00  	cincoffset	ca1, ca1, 1
20040f60: 23 80 a2 00  	csb	a0, 0(ct0)
20040f64: db 92 12 00  	cincoffset	ct0, ct0, 1
20040f68: fd 14        	addi	s1, s1, -1

20040f6a <.LBB0_56>:
20040f6a: fd f4        	bnez	s1, 0x20040f58 <.LBB0_55>
;     return( (int)(lptr-line));
20040f6c: 02 65        	clc	ca0, 0(csp)
20040f6e: 5b 85 a2 28  	csub	a0, ct0, ca0
;     *lptr = '\0';
20040f72: 23 80 02 00  	csb	zero, 0(ct0)
;     return( (int)(lptr-line));
20040f76: e6 64        	clc	cs1, 88(csp)
20040f78: 06 74        	clc	cs0, 96(csp)
20040f7a: a6 70        	clc	cra, 104(csp)
20040f7c: 65 61        	cincoffset	csp, csp, 112
20040f7e: 82 80        	cret

20040f80 <write_char_cnt(char*, int, int, int, int)>:
; {
20040f80: 7d 71        	cincoffset	csp, csp, -16
20040f82: 22 e4        	csc	cs0, 8(csp)
; 	char c = (lead_zero != 0) ? '0' : ' ';
20040f84: 33 33 e0 00  	snez	t1, a4
20040f88: 93 07 00 03  	addi	a5, zero, 48
20040f8c: 19 e3        	bnez	a4, 0x20040f92 <.LBB1_2>
20040f8e: 93 07 00 02  	addi	a5, zero, 32

20040f92 <.LBB1_2>:
; 	if(hex_str != 0 && lead_zero != 0) {
20040f92: b3 32 d0 00  	snez	t0, a3
20040f96: b3 f6 62 00  	and	a3, t0, t1
20040f9a: 99 ce        	beqz	a3, 0x20040fb8 <.LBB1_4>
20040f9c: 93 06 00 03  	addi	a3, zero, 48
;         *str++ = '0';
20040fa0: 23 00 d5 00  	csb	a3, 0(ca0)
20040fa4: 93 06 80 07  	addi	a3, zero, 120
;         *str++ = 'x';
20040fa8: a3 00 d5 00  	csb	a3, 1(ca0)
20040fac: 5b 15 25 00  	cincoffset	ca0, ca0, 2
20040fb0: 09 43        	addi	t1, zero, 2
; 	if(leading > used) {
20040fb2: 63 46 b6 00  	blt	a2, a1, 0x20040fbe <.LBB1_5>
20040fb6: 3d a0        	j	0x20040fe4 <.LBB1_9>

20040fb8 <.LBB1_4>:
20040fb8: 01 43        	mv	t1, zero
; 	if(leading > used) {
20040fba: 63 55 b6 02  	bge	a2, a1, 0x20040fe4 <.LBB1_9>

20040fbe <.LBB1_5>:
20040fbe: 81 46        	mv	a3, zero
; 		fill = leading-used;
20040fc0: 91 8d        	sub	a1, a1, a2
20040fc2: 93 03 d0 07  	addi	t2, zero, 125

20040fc6 <.LBB1_6>:
; 		for(i=0;(i<fill)&&(i<126);i++) {
20040fc6: 33 a6 b6 00  	slt	a2, a3, a1
20040fca: 13 46 16 00  	xori	a2, a2, 1
20040fce: 33 b4 d3 00  	sltu	s0, t2, a3
20040fd2: 41 8e        	or	a2, a2, s0
20040fd4: 19 e6        	bnez	a2, 0x20040fe2 <.LBB1_8>
; 			*str++ = c;
20040fd6: 23 00 f5 00  	csb	a5, 0(ca0)
20040fda: 5b 15 15 00  	cincoffset	ca0, ca0, 1
; 		for(i=0;(i<fill)&&(i<126);i++) {
20040fde: 85 06        	addi	a3, a3, 1
20040fe0: dd b7        	j	0x20040fc6 <.LBB1_6>

20040fe2 <.LBB1_8>:
20040fe2: 36 93        	add	t1, t1, a3

20040fe4 <.LBB1_9>:
20040fe4: 93 35 17 00  	seqz	a1, a4
; 	if(hex_str != 0 && lead_zero == 0) {
20040fe8: b3 f5 b2 00  	and	a1, t0, a1
20040fec: 91 c9        	beqz	a1, 0x20041000 <.LBB1_11>
20040fee: 93 05 00 03  	addi	a1, zero, 48
;         *str++ = '0';
20040ff2: 23 00 b5 00  	csb	a1, 0(ca0)
20040ff6: 93 05 80 07  	addi	a1, zero, 120
;         *str++ = 'x';
20040ffa: a3 00 b5 00  	csb	a1, 1(ca0)
;         cnt+=2;
20040ffe: 09 03        	addi	t1, t1, 2

20041000 <.LBB1_11>:
; 	return cnt;
20041000: 1a 85        	mv	a0, t1
20041002: 22 64        	clc	cs0, 8(csp)
20041004: 41 61        	cincoffset	csp, csp, 16
20041006: 82 80        	cret

20041008 <cfprintf(unsigned int**, char const*, ...)>:
; {
20041008: 5b 11 01 b0  	cincoffset	csp, csp, -1280
2004100c: 23 3c 11 4e  	csc	cra, 1272(csp)
20041010: 23 38 81 4e  	csc	cs0, 1264(csp)
20041014: 23 34 91 4e  	csc	cs1, 1256(csp)
20041018: 5b 14 01 50  	cincoffset	cs0, csp, 1280
2004101c: 5b 06 f1 fe  	cgetaddr	a2, csp
20041020: 13 76 06 f8  	andi	a2, a2, -128
20041024: 5b 01 c1 20  	csetaddr	csp, csp, a2
20041028: b0 18        	cincoffset	ca2, csp, 120
2004102a: 5b 26 86 00  	csetbounds	ca2, ca2, 8
2004102e: db 16 04 00  	cincoffset	ca3, cs0, 0
; 		va_start(ap, format);
20041032: 14 e2        	csc	ca3, 0(ca2)
; 		int c_cnt = pvsprintf(ptr, format, ap);
20041034: 66 76        	clc	ca2, 120(csp)
20041036: aa f4        	csc	ca0, 104(csp)
20041038: 08 01        	cincoffset	ca0, csp, 128
2004103a: 5b 25 05 40  	csetbounds	ca0, ca0, 1024
; 		int c_cnt = pvsprintf(ptr, format, ap);
2004103e: aa f8        	csc	ca0, 112(csp)
20041040: e1 36        	cjal	0x20040c08 <pvsprintf(char*, char const*, void*)>
20041042: aa 84        	mv	s1, a0
; 		write((int)stream, line, c_cnt);
20041044: 26 75        	clc	ca0, 104(csp)
20041046: 5b 05 f5 fe  	cgetaddr	a0, ca0
2004104a: c6 75        	clc	ca1, 112(csp)
2004104c: 26 86        	mv	a2, s1
2004104e: ef 00 70 1f  	cjal	0x20041a44 <_write(int, char const*, int)>
; 		return c_cnt;
20041052: 26 85        	mv	a0, s1
20041054: 5b 11 04 b0  	cincoffset	csp, cs0, -1280
20041058: 83 34 81 4e  	clc	cs1, 1256(csp)
2004105c: 03 34 01 4f  	clc	cs0, 1264(csp)
20041060: 83 30 81 4f  	clc	cra, 1272(csp)
20041064: 5b 11 01 50  	cincoffset	csp, csp, 1280
20041068: 82 80        	cret

2004106a <pfprintf(unsigned int**, char const*, ...)>:
; {
2004106a: 09 71        	cincoffset	csp, csp, -384
2004106c: 86 fe        	csc	cra, 376(csp)
2004106e: a2 fa        	csc	cs0, 368(csp)
20041070: 00 03        	cincoffset	cs0, csp, 384
20041072: 5b 05 f1 fe  	cgetaddr	a0, csp
20041076: 01 99        	andi	a0, a0, -32
20041078: 5b 01 a1 20  	csetaddr	csp, csp, a0
2004107c: 13 05 00 05  	addi	a0, zero, 80
; 		*ptr++ = 'P';
20041080: 23 00 a1 02  	csb	a0, 32(csp)
20041084: 08 10        	cincoffset	ca0, csp, 32
20041086: 5b 25 05 14  	csetbounds	ca0, ca0, 320
2004108a: 30 08        	cincoffset	ca2, csp, 24
2004108c: 5b 26 86 00  	csetbounds	ca2, ca2, 8
20041090: db 16 04 00  	cincoffset	ca3, cs0, 0
; 		va_start(ap, format);
20041094: 14 e2        	csc	ca3, 0(ca2)
; 		int c_cnt = pvsprintf(ptr, format, ap);
20041096: 62 66        	clc	ca2, 24(csp)
; 		*ptr++ = '0';  //hardcode to 0 for git psi_libc, cpu id is/was for print server
20041098: 5b 15 25 00  	cincoffset	ca0, ca0, 2
2004109c: 93 06 00 03  	addi	a3, zero, 48
; 		*ptr++ = '0';  //hardcode to 0 for git psi_libc, cpu id is/was for print server
200410a0: a3 00 d1 02  	csb	a3, 33(csp)
; 		int c_cnt = pvsprintf(ptr, format, ap);
200410a4: 95 36        	cjal	0x20040c08 <pvsprintf(char*, char const*, void*)>
; 		return c_cnt;
200410a6: 5b 11 04 e8  	cincoffset	csp, cs0, -384
200410aa: 56 74        	clc	cs0, 368(csp)
200410ac: f6 70        	clc	cra, 376(csp)
200410ae: 19 61        	cincoffset	csp, csp, 384
200410b0: 82 80        	cret

200410b2 <psprintf(char*, char const*, ...)>:
; {
200410b2: 7d 71        	cincoffset	csp, csp, -16
200410b4: 06 e4        	csc	cra, 8(csp)
200410b6: 5b 16 01 00  	cincoffset	ca2, csp, 0
200410ba: 5b 26 86 00  	csetbounds	ca2, ca2, 8
200410be: 14 08        	cincoffset	ca3, csp, 16
;     va_start(ap, format);
200410c0: 14 e2        	csc	ca3, 0(ca2)
;     int c_cnt = pvsprintf(line, format, ap);
200410c2: 02 66        	clc	ca2, 0(csp)
200410c4: 91 36        	cjal	0x20040c08 <pvsprintf(char*, char const*, void*)>
;     return c_cnt;
200410c6: a2 60        	clc	cra, 8(csp)
200410c8: 41 61        	cincoffset	csp, csp, 16
200410ca: 82 80        	cret

200410cc <print_test_header(char const*)>:
; {
200410cc: 3d 71        	cincoffset	csp, csp, -32
200410ce: 06 ec        	csc	cra, 24(csp)
200410d0: 22 e8        	csc	cs0, 16(csp)
200410d2: 26 e4        	csc	cs1, 8(csp)
200410d4: 5b 04 a5 fe  	cmove	cs0, ca0

200410d8 <.LBB5_1>:
; 	pprintf("===================================================\n");
200410d8: 97 14 00 00  	auipcc	cs1, 1
200410dc: db 94 84 32  	cincoffset	cs1, cs1, 808
200410e0: db a4 54 03  	csetbounds	cs1, cs1, 53
200410e4: db 85 a4 fe  	cmove	ca1, cs1
200410e8: 49 37        	cjal	0x2004106a <pfprintf(unsigned int**, char const*, ...)>

200410ea <.LBB5_2>:
; 	pprintf(" Starting Test %s\n", test);
200410ea: 97 15 00 00  	auipcc	ca1, 1
200410ee: db 95 f5 3b  	cincoffset	ca1, ca1, 959
200410f2: db a5 35 01  	csetbounds	ca1, ca1, 19
200410f6: 22 e0        	csc	cs0, 0(csp)
200410f8: 8d 3f        	cjal	0x2004106a <pfprintf(unsigned int**, char const*, ...)>
; 	pprintf("===================================================\n");
200410fa: db 85 a4 fe  	cmove	ca1, cs1
200410fe: a2 64        	clc	cs1, 8(csp)
20041100: 42 64        	clc	cs0, 16(csp)
20041102: e2 60        	clc	cra, 24(csp)
20041104: 05 61        	cincoffset	csp, csp, 32
20041106: 95 b7        	j	0x2004106a <pfprintf(unsigned int**, char const*, ...)>

20041108 <print_array(unsigned int*, char const*, unsigned int)>:
; void print_array(uint32_t * arr, const char * str, uint32_t num) {
20041108: 39 71        	cincoffset	csp, csp, -64
2004110a: 06 fc        	csc	cra, 56(csp)
2004110c: 22 f8        	csc	cs0, 48(csp)
2004110e: 26 f4        	csc	cs1, 40(csp)
20041110: 32 d2        	csw	a2, 36(csp)
20041112: 2e ec        	csc	ca1, 24(csp)
20041114: 2a e8        	csc	ca0, 16(csp)
20041116: 81 44        	mv	s1, zero

20041118 <.LBB6_4>:
20041118: 17 14 00 00  	auipcc	cs0, 1
2004111c: 5b 14 d4 31  	cincoffset	cs0, cs0, 797
20041120: 5b 24 64 01  	csetbounds	cs0, cs0, 22

20041124 <.LBB6_1>:
; 	for(i=0;i<num;i++) 
20041124: 12 55        	clw	a0, 36(csp)
20041126: 63 01 95 02  	beq	a0, s1, 0x20041148 <.LBB6_3>
; 		pprintf("%s word %d is 0x%08x\n",str,i,hw_read32(arr+i));
2004112a: 13 95 24 00  	slli	a0, s1, 2
2004112e: c2 65        	clc	ca1, 16(csp)
20041130: 5b 85 a5 22  	cincoffset	ca0, ca1, a0
; inline uint32_t hw_read32(volatile uint32_t* addr) { return *addr; }
20041134: 08 41        	clw	a0, 0(ca0)
; 		pprintf("%s word %d is 0x%08x\n",str,i,hw_read32(arr+i));
20041136: 2a c6        	csw	a0, 12(csp)
20041138: 26 c4        	csw	s1, 8(csp)
2004113a: 62 65        	clc	ca0, 24(csp)
2004113c: 2a e0        	csc	ca0, 0(csp)
2004113e: db 05 a4 fe  	cmove	ca1, cs0
20041142: 25 37        	cjal	0x2004106a <pfprintf(unsigned int**, char const*, ...)>
; 	for(i=0;i<num;i++) 
20041144: 85 04        	addi	s1, s1, 1
20041146: f9 bf        	j	0x20041124 <.LBB6_1>

20041148 <.LBB6_3>:
; }
20041148: a2 74        	clc	cs1, 40(csp)
2004114a: 42 74        	clc	cs0, 48(csp)
2004114c: e2 70        	clc	cra, 56(csp)
2004114e: 21 61        	cincoffset	csp, csp, 64
20041150: 82 80        	cret
20041152: 00 00        	unimp	

20041154 <fputc(int, unsigned int**)>:
; {
20041154: 7d 71        	cincoffset	csp, csp, -16
20041156: 06 e4        	csc	cra, 8(csp)
20041158: 2a c2        	csw	a0, 4(csp)
; 	write((int)stream, (const char*)&c, 1);
2004115a: 5b 85 f5 fe  	cgetaddr	a0, ca1
2004115e: 4c 00        	cincoffset	ca1, csp, 4
20041160: db a5 45 00  	csetbounds	ca1, ca1, 4
; 	write((int)stream, (const char*)&c, 1);
20041164: 05 46        	addi	a2, zero, 1
20041166: ef 00 f0 0d  	cjal	0x20041a44 <_write(int, char const*, int)>
; 	return c;
2004116a: 12 45        	clw	a0, 4(csp)
2004116c: a2 60        	clc	cra, 8(csp)
2004116e: 41 61        	cincoffset	csp, csp, 16
20041170: 82 80        	cret
20041172: 00 00        	unimp	

20041174 <fputs(char const*, unsigned int**)>:
; {
20041174: 3d 71        	cincoffset	csp, csp, -32
20041176: 06 ec        	csc	cra, 24(csp)
20041178: 22 e8        	csc	cs0, 16(csp)
2004117a: 26 e4        	csc	cs1, 8(csp)
2004117c: 5b 04 a5 fe  	cmove	cs0, ca0
; 	return write((int)stream, (char *)s, strlen(s));
20041180: db 84 f5 fe  	cgetaddr	s1, ca1
20041184: 51 28        	cjal	0x20041218 <strlen(char const*)>
20041186: 2a 86        	mv	a2, a0
20041188: 26 85        	mv	a0, s1
2004118a: db 05 a4 fe  	cmove	ca1, cs0
2004118e: a2 64        	clc	cs1, 8(csp)
20041190: 42 64        	clc	cs0, 16(csp)
20041192: e2 60        	clc	cra, 24(csp)
20041194: 05 61        	cincoffset	csp, csp, 32
20041196: 6f 00 f0 0a  	j	0x20041a44 <_write(int, char const*, int)>
2004119a: 00 00        	unimp	

2004119c <fgets(char*, int, unsigned int**)>:
; {
2004119c: 39 71        	cincoffset	csp, csp, -64
2004119e: 06 fc        	csc	cra, 56(csp)
200411a0: 22 f8        	csc	cs0, 48(csp)
200411a2: 26 f4        	csc	cs1, 40(csp)
200411a4: 2e d0        	csw	a1, 32(csp)
200411a6: db 04 a5 fe  	cmove	cs1, ca0
200411aa: 01 44        	mv	s0, zero
200411ac: db 05 f6 fe  	cgetaddr	a1, ca2
200411b0: 2e ce        	csw	a1, 28(csp)
200411b2: db 15 71 02  	cincoffset	ca1, csp, 39
200411b6: db a5 15 00  	csetbounds	ca1, ca1, 1
200411ba: 2e e8        	csc	ca1, 16(csp)
200411bc: 2a e4        	csc	ca0, 8(csp)

200411be <.LBB0_1>:
; 		read((int)stream, &c, 1);
200411be: 05 46        	addi	a2, zero, 1
200411c0: 72 45        	clw	a0, 28(csp)
200411c2: c2 65        	clc	ca1, 16(csp)
200411c4: ef 00 30 0b  	cjal	0x20041a76 <_read(int, char*, int)>
; 		*ptr++ = c;
200411c8: 03 45 71 02  	clbu	a0, 39(csp)
200411cc: 23 80 a4 00  	csb	a0, 0(cs1)
; 	} while(cnt++ < size && c != '\n');
200411d0: 82 55        	clw	a1, 32(csp)
200411d2: b3 25 b4 00  	slt	a1, s0, a1
200411d6: 05 04        	addi	s0, s0, 1
200411d8: 59 15        	addi	a0, a0, -10
200411da: 33 35 a0 00  	snez	a0, a0
200411de: e9 8d        	and	a1, a1, a0
; 		*ptr++ = c;
200411e0: db 94 14 00  	cincoffset	cs1, cs1, 1
; 	} while(cnt++ < size && c != '\n');
200411e4: e9 fd        	bnez	a1, 0x200411be <.LBB0_1>
; 	*ptr = '\0';
200411e6: 23 80 04 00  	csb	zero, 0(cs1)
; 	return s;
200411ea: 22 65        	clc	ca0, 8(csp)
200411ec: a2 74        	clc	cs1, 40(csp)
200411ee: 42 74        	clc	cs0, 48(csp)
200411f0: e2 70        	clc	cra, 56(csp)
200411f2: 21 61        	cincoffset	csp, csp, 64
200411f4: 82 80        	cret
200411f6: 00 00        	unimp	

200411f8 <fgetc(unsigned int**)>:
; {
200411f8: 7d 71        	cincoffset	csp, csp, -16
; 	read((int)stream, &buf, 1);
200411fa: 06 e4        	csc	cra, 8(csp)
200411fc: 5b 05 f5 fe  	cgetaddr	a0, ca0
20041200: db 15 71 00  	cincoffset	ca1, csp, 7
20041204: db a5 15 00  	csetbounds	ca1, ca1, 1
; 	read((int)stream, &buf, 1);
20041208: 05 46        	addi	a2, zero, 1
2004120a: ef 00 d0 06  	cjal	0x20041a76 <_read(int, char*, int)>
; 	return (int) buf;
2004120e: 03 45 71 00  	clbu	a0, 7(csp)
20041212: a2 60        	clc	cra, 8(csp)
20041214: 41 61        	cincoffset	csp, csp, 16
20041216: 82 80        	cret

20041218 <strlen(char const*)>:
; {
20041218: 81 45        	mv	a1, zero

2004121a <.LBB0_1>:
; 	while(*s++ != 0)i++;
2004121a: 03 46 05 00  	clbu	a2, 0(ca0)
2004121e: 09 c6        	beqz	a2, 0x20041228 <.LBB0_3>
20041220: 5b 15 15 00  	cincoffset	ca0, ca0, 1
20041224: 85 05        	addi	a1, a1, 1
20041226: d5 bf        	j	0x2004121a <.LBB0_1>

20041228 <.LBB0_3>:
; 	return i;
20041228: 2e 85        	mv	a0, a1
2004122a: 82 80        	cret

2004122c <strcmp(char const*, char const*)>:
; 	for(;*s1 == *s2;++s1, ++s2) {
2004122c: 03 46 05 00  	clbu	a2, 0(ca0)
20041230: 83 c6 05 00  	clbu	a3, 0(ca1)
20041234: 63 18 d6 00  	bne	a2, a3, 0x20041244 <.LBB0_4>
; 		if(*s1 == 0) return 0;
20041238: 19 ca        	beqz	a2, 0x2004124e <.LBB0_7>
; 	for(;*s1 == *s2;++s1, ++s2) {
2004123a: 5b 15 15 00  	cincoffset	ca0, ca0, 1
2004123e: db 95 15 00  	cincoffset	ca1, ca1, 1
20041242: ed b7        	j	0x2004122c <strcmp(char const*, char const*)>

20041244 <.LBB0_4>:
20041244: 7d 55        	addi	a0, zero, -1
; 	return *(uint8_t *)s1 < *(uint8_t *)s2 ? -1 : 1;	
20041246: 63 63 d6 00  	bltu	a2, a3, 0x2004124c <.LBB0_6>
2004124a: 05 45        	addi	a0, zero, 1

2004124c <.LBB0_6>:
; }
2004124c: 82 80        	cret

2004124e <.LBB0_7>:
2004124e: 01 45        	mv	a0, zero
; }
20041250: 82 80        	cret
20041252: 00 00        	unimp	

20041254 <memset_rand(void*, unsigned int)>:
; {
20041254: 3d 71        	cincoffset	csp, csp, -32
20041256: 06 ec        	csc	cra, 24(csp)
20041258: 22 e8        	csc	cs0, 16(csp)
2004125a: 26 e4        	csc	cs1, 8(csp)
2004125c: ae 84        	mv	s1, a1
2004125e: 5b 04 a5 fe  	cmove	cs0, ca0
20041262: 2a e0        	csc	ca0, 0(csp)
; 	while (len-- > 0) {
20041264: 99 c8        	beqz	s1, 0x2004127a <.LBB0_2>

20041266 <.LBB0_1>:
20041266: fd 14        	addi	s1, s1, -1
; 		*dest++ = rand();
20041268: ef f0 2f f1  	cjal	0x2004097a <rand()>
2004126c: db 15 14 00  	cincoffset	ca1, cs0, 1
20041270: 23 00 a4 00  	csb	a0, 0(cs0)
20041274: 5b 84 a5 fe  	cmove	cs0, ca1
; 	while (len-- > 0) {
20041278: fd f4        	bnez	s1, 0x20041266 <.LBB0_1>

2004127a <.LBB0_2>:
; 	return destaddr;
2004127a: 02 65        	clc	ca0, 0(csp)
2004127c: a2 64        	clc	cs1, 8(csp)
2004127e: 42 64        	clc	cs0, 16(csp)
20041280: e2 60        	clc	cra, 24(csp)
20041282: 05 61        	cincoffset	csp, csp, 32
20041284: 82 80        	cret
20041286: 00 00        	unimp	

20041288 <memcmp(void const*, void const*, unsigned int)>:
;   while (len-- > 0 && (retval=*dest++-*src++) == 0);
20041288: 93 06 16 00  	addi	a3, a2, 1

2004128c <.LBB0_1>:
2004128c: fd 16        	addi	a3, a3, -1
2004128e: 81 ce        	beqz	a3, 0x200412a6 <.LBB0_3>
20041290: 03 46 05 00  	clbu	a2, 0(ca0)
20041294: 03 c7 05 00  	clbu	a4, 0(ca1)
20041298: 5b 15 15 00  	cincoffset	ca0, ca0, 1
2004129c: db 95 15 00  	cincoffset	ca1, ca1, 1
200412a0: 19 8e        	sub	a2, a2, a4
200412a2: 6d d6        	beqz	a2, 0x2004128c <.LBB0_1>
200412a4: 11 a0        	j	0x200412a8 <.LBB0_4>

200412a6 <.LBB0_3>:
200412a6: 01 46        	mv	a2, zero

200412a8 <.LBB0_4>:
;   return retval;
200412a8: 32 85        	mv	a0, a2
200412aa: 82 80        	cret

200412ac <strcpy(char*, char const*)>:
; {
200412ac: 5b 06 a5 fe  	cmove	ca2, ca0

200412b0 <.LBB0_1>:
; 	while((*dst++ = *src++) != '\0');
200412b0: 83 c6 05 00  	clbu	a3, 0(ca1)
200412b4: db 95 15 00  	cincoffset	ca1, ca1, 1
200412b8: 5b 17 16 00  	cincoffset	ca4, ca2, 1
200412bc: 23 00 d6 00  	csb	a3, 0(ca2)
200412c0: 5b 06 a7 fe  	cmove	ca2, ca4
200412c4: f5 f6        	bnez	a3, 0x200412b0 <.LBB0_1>
; 	return dest;
200412c6: 82 80        	cret

200412c8 <memcpy(void*, void const*, unsigned int)>:
; {
200412c8: db 06 a5 fe  	cmove	ca3, ca0
;   while (len-- > 0)
200412cc: 19 ca        	beqz	a2, 0x200412e2 <.LBB0_2>

200412ce <.LBB0_1>:
;     *dest++ = *src++;
200412ce: 03 87 05 00  	clb	a4, 0(ca1)
200412d2: db 95 15 00  	cincoffset	ca1, ca1, 1
200412d6: 23 80 e6 00  	csb	a4, 0(ca3)
200412da: db 96 16 00  	cincoffset	ca3, ca3, 1
;   while (len-- > 0)
200412de: 7d 16        	addi	a2, a2, -1
200412e0: 7d f6        	bnez	a2, 0x200412ce <.LBB0_1>

200412e2 <.LBB0_2>:
;   return destaddr;
200412e2: 82 80        	cret

200412e4 <wordcmp(void const*, void const*, int)>:
;   while (len-- > 0 && (retval=*dest++-*src++) == 0);
200412e4: 93 06 16 00  	addi	a3, a2, 1

200412e8 <.LBB0_1>:
200412e8: fd 16        	addi	a3, a3, -1
200412ea: 63 5b d0 00  	blez	a3, 0x20041300 <.LBB0_3>
200412ee: 10 41        	clw	a2, 0(ca0)
200412f0: 98 41        	clw	a4, 0(ca1)
200412f2: 5b 15 45 00  	cincoffset	ca0, ca0, 4
200412f6: db 95 45 00  	cincoffset	ca1, ca1, 4
200412fa: 19 8e        	sub	a2, a2, a4
200412fc: 75 d6        	beqz	a2, 0x200412e8 <.LBB0_1>
200412fe: 11 a0        	j	0x20041302 <.LBB0_4>

20041300 <.LBB0_3>:
20041300: 01 46        	mv	a2, zero

20041302 <.LBB0_4>:
;   return retval;
20041302: 32 85        	mv	a0, a2
20041304: 82 80        	cret
20041306: 00 00        	unimp	

20041308 <wordcpy(void*, void const*, int)>:
; {
20041308: db 06 a5 fe  	cmove	ca3, ca0
;   while (len-- > 0)
2004130c: 63 5b c0 00  	blez	a2, 0x20041322 <.LBB0_2>

20041310 <.LBB0_1>:
;     *dest++ = *src++;
20041310: 98 41        	clw	a4, 0(ca1)
20041312: db 95 45 00  	cincoffset	ca1, ca1, 4
20041316: 98 c2        	csw	a4, 0(ca3)
20041318: db 96 46 00  	cincoffset	ca3, ca3, 4
;   while (len-- > 0)
2004131c: 7d 16        	addi	a2, a2, -1
2004131e: e3 49 c0 fe  	bgtz	a2, 0x20041310 <.LBB0_1>

20041322 <.LBB0_2>:
;   return destaddr;
20041322: 82 80        	cret

20041324 <strncpy(char*, char const*, unsigned int)>:
; {
20041324: 81 46        	mv	a3, zero
; 	for (i = 0 ; i < n && src[i] != '\0' ; i++)
20041326: 63 0e d6 00  	beq	a2, a3, 0x20041342 <.LBB0_3>

2004132a <.LBB0_1>:
2004132a: 5b 87 d5 22  	cincoffset	ca4, ca1, a3
2004132e: 03 47 07 00  	clbu	a4, 0(ca4)
20041332: 09 cb        	beqz	a4, 0x20041344 <.LBB0_4>
; 		dest[i] = src[i];
20041334: db 07 d5 22  	cincoffset	ca5, ca0, a3
20041338: 23 80 e7 00  	csb	a4, 0(ca5)
; 	for (i = 0 ; i < n && src[i] != '\0' ; i++)
2004133c: 85 06        	addi	a3, a3, 1
2004133e: e3 16 d6 fe  	bne	a2, a3, 0x2004132a <.LBB0_1>

20041342 <.LBB0_3>:
20041342: b2 86        	mv	a3, a2

20041344 <.LBB0_4>:
20041344: b6 85        	mv	a1, a3
20041346: 63 69 d6 00  	bltu	a2, a3, 0x20041358 <.LBB0_7>
2004134a: b2 85        	mv	a1, a2
2004134c: 31 a0        	j	0x20041358 <.LBB0_7>

2004134e <.LBB0_6>:
; 		dest[i] = '\0';
2004134e: 5b 06 d5 22  	cincoffset	ca2, ca0, a3
20041352: 23 00 06 00  	csb	zero, 0(ca2)
; 	for ( ; i < n ; i++)
20041356: 85 06        	addi	a3, a3, 1

20041358 <.LBB0_7>:
20041358: e3 9b d5 fe  	bne	a1, a3, 0x2004134e <.LBB0_6>
; 	return dest;
2004135c: 82 80        	cret
2004135e: 00 00        	unimp	

20041360 <memset(void*, int, unsigned int)>:
; {
20041360: db 06 a5 fe  	cmove	ca3, ca0
; 	while (len-- > 0) {
20041364: 19 c6        	beqz	a2, 0x20041372 <.LBB0_2>

20041366 <.LBB0_1>:
; 		*dest++ = c;
20041366: 23 80 b6 00  	csb	a1, 0(ca3)
2004136a: db 96 16 00  	cincoffset	ca3, ca3, 1
; 	while (len-- > 0) {
2004136e: 7d 16        	addi	a2, a2, -1
20041370: 7d fa        	bnez	a2, 0x20041366 <.LBB0_1>

20041372 <.LBB0_2>:
; 	return destaddr;
20041372: 82 80        	cret

20041374 <wordset(void*, unsigned int, unsigned int)>:
; {
20041374: db 06 a5 fe  	cmove	ca3, ca0
; 	while (len-- > 0) {
20041378: 11 c6        	beqz	a2, 0x20041384 <.LBB0_2>

2004137a <.LBB0_1>:
; 		*dest++ = c;
2004137a: 8c c2        	csw	a1, 0(ca3)
2004137c: db 96 46 00  	cincoffset	ca3, ca3, 4
; 	while (len-- > 0) {
20041380: 7d 16        	addi	a2, a2, -1
20041382: 65 fe        	bnez	a2, 0x2004137a <.LBB0_1>

20041384 <.LBB0_2>:
; 	return destaddr;
20041384: 82 80        	cret
20041386: 00 00        	unimp	

20041388 <memset_unique(void*, unsigned int)>:
; {
20041388: 81 46        	mv	a3, zero
2004138a: 5b 06 a5 fe  	cmove	ca2, ca0
; 	while (len-- > 0) {
2004138e: 63 8d d5 00  	beq	a1, a3, 0x200413a8 <.LBB0_2>

20041392 <.LBB0_1>:
; 		*dest++ = i++;
20041392: 13 87 16 00  	addi	a4, a3, 1
20041396: db 17 16 00  	cincoffset	ca5, ca2, 1
2004139a: 23 00 d6 00  	csb	a3, 0(ca2)
2004139e: 5b 86 a7 fe  	cmove	ca2, ca5
200413a2: ba 86        	mv	a3, a4
; 	while (len-- > 0) {
200413a4: e3 97 d5 fe  	bne	a1, a3, 0x20041392 <.LBB0_1>

200413a8 <.LBB0_2>:
; 	return destaddr;
200413a8: 82 80        	cret
200413aa: 00 00        	unimp	

200413ac <register_handler(unsigned int, void (*)())>:
;     old = irq_array[irq_bit_number];
200413ac: 13 16 35 00  	slli	a2, a0, 3
200413b0: db 96 01 f6  	cincoffset	ca3, cgp, -160
200413b4: db a6 06 18  	csetbounds	ca3, ca3, 384
200413b8: db 86 c6 22  	cincoffset	ca3, ca3, a2
200413bc: 90 62        	clc	ca2, 0(ca3)
;     irq_array[irq_bit_number] = handler;
200413be: 8c e2        	csc	ca1, 0(ca3)
;     irq_vector_exists[irq_bit_number] = 1;
200413c0: db 95 01 0e  	cincoffset	ca1, cgp, 224
200413c4: db a5 05 03  	csetbounds	ca1, ca1, 48
200413c8: 5b 85 a5 22  	cincoffset	ca0, ca1, a0
200413cc: 85 45        	addi	a1, zero, 1
;     irq_vector_exists[irq_bit_number] = 1;
200413ce: 23 00 b5 00  	csb	a1, 0(ca0)
;     return old;
200413d2: 5b 05 a6 fe  	cmove	ca0, ca2
200413d6: 82 80        	cret

200413d8 <unregister_handler(unsigned int)>:
;     old = irq_array[irq_bit_number];
200413d8: 93 15 35 00  	slli	a1, a0, 3
200413dc: 5b 96 01 f6  	cincoffset	ca2, cgp, -160
200413e0: 5b 26 06 18  	csetbounds	ca2, ca2, 384
200413e4: 5b 06 b6 22  	cincoffset	ca2, ca2, a1
200413e8: 0c 62        	clc	ca1, 0(ca2)
;     irq_array[irq_bit_number] = NULL;
200413ea: 23 30 06 00  	csc	cnull, 0(ca2)
;     irq_vector_exists[irq_bit_number] = 0;
200413ee: 5b 96 01 0e  	cincoffset	ca2, cgp, 224
200413f2: 5b 26 06 03  	csetbounds	ca2, ca2, 48
200413f6: 5b 05 a6 22  	cincoffset	ca0, ca2, a0
200413fa: 23 00 05 00  	csb	zero, 0(ca0)
;     return old;
200413fe: 5b 85 a5 fe  	cmove	ca0, ca1
20041402: 82 80        	cret

20041404 <dispatch_irqs(unsigned int)>:
; {
20041404: 7d 71        	cincoffset	csp, csp, -16
;     if(irq_vector_exists[irq_bit_number] && irq_bit_number < _NUM_IRQ ) {
20041406: 06 e4        	csc	cra, 8(csp)
20041408: db 95 01 0e  	cincoffset	ca1, cgp, 224
2004140c: db a5 05 03  	csetbounds	ca1, ca1, 48
20041410: db 85 a5 22  	cincoffset	ca1, ca1, a0
20041414: 83 c5 05 00  	clbu	a1, 0(ca1)
20041418: b3 35 b0 00  	snez	a1, a1
2004141c: 13 36 05 03  	sltiu	a2, a0, 48
20041420: f1 8d        	and	a1, a1, a2
20041422: 81 cd        	beqz	a1, 0x2004143a <.LBB2_4>
;             irq_array[irq_bit_number]();
20041424: 0e 05        	slli	a0, a0, 3
20041426: db 95 01 f6  	cincoffset	ca1, cgp, -160
2004142a: db a5 05 18  	csetbounds	ca1, ca1, 384
2004142e: 5b 85 a5 22  	cincoffset	ca0, ca1, a0
20041432: 08 61        	clc	ca0, 0(ca0)
20041434: 02 95        	cjalr	ca0
20041436: 05 45        	addi	a0, zero, 1
20041438: 31 a8        	j	0x20041454 <.LBB2_3>

2004143a <.LBB2_4>:
;             pprintf("Error...Unhandled Exception(%d). Exiting test\n", irq_bit_number);
2004143a: 97 05 00 00  	auipcc	ca1, 0
2004143e: db 95 a5 72  	cincoffset	ca1, ca1, 1834
20041442: db a5 f5 02  	csetbounds	ca1, ca1, 47
20041446: 2a c0        	csw	a0, 0(csp)
20041448: 5b 05 a0 fe  	cmove	ca0, cnull
2004144c: 39 39        	cjal	0x2004106a <pfprintf(unsigned int**, char const*, ...)>
;             exit(1);
2004144e: 05 45        	addi	a0, zero, 1
20041450: d5 2c        	cjal	0x20041744 <__cxa_pure_virtual>
20041452: 01 45        	mv	a0, zero

20041454 <.LBB2_3>:
; }
20041454: a2 60        	clc	cra, 8(csp)
20041456: 41 61        	cincoffset	csp, csp, 16
20041458: 82 80        	cret
2004145a: 00 00        	unimp	

2004145c <GenerateECC(unsigned long long, ENCRYPTION_TYPE_E)>:
; {
2004145c: 39 71        	cincoffset	csp, csp, -64
2004145e: 06 fc        	csc	cra, 56(csp)
20041460: 22 f8        	csc	cs0, 48(csp)
20041462: 26 f4        	csc	cs1, 40(csp)
20041464: 36 84        	mv	s0, a3
20041466: 32 cc        	csw	a2, 24(csp)
20041468: 2e ce        	csw	a1, 28(csp)
2004146a: aa 87        	mv	a5, a0
2004146c: 37 55 55 00  	lui	a0, 1365
20041470: 13 05 55 55  	addi	a0, a0, 1365
; 	p1  = ComputeParity(data & (PARITY1  | secded_mode));
20041474: 33 e7 a6 00  	or	a4, a3, a0
20041478: 37 b5 aa 56  	lui	a0, 354987
2004147c: 13 05 b5 d5  	addi	a0, a0, -677
20041480: 51 8d        	or	a0, a0, a2
20041482: 7d 8d        	and	a0, a0, a5
20041484: be 84        	mv	s1, a5
20041486: 3e d2        	csw	a5, 36(csp)
20041488: f9 8d        	and	a1, a1, a4
2004148a: ed 2a        	cjal	0x20041684 <ComputeParity(unsigned long long)>
2004148c: 2a c8        	csw	a0, 16(csp)
2004148e: 37 a5 99 00  	lui	a0, 2458
20041492: 13 05 95 99  	addi	a0, a0, -1639
; 	p2  = ComputeParity(data & (PARITY2  | secded_mode));
20041496: 22 d0        	csw	s0, 32(csp)
20041498: b3 65 a4 00  	or	a1, s0, a0
2004149c: 37 35 33 9b  	lui	a0, 635699
200414a0: 13 05 d5 66  	addi	a0, a0, 1645
200414a4: 62 46        	clw	a2, 24(csp)
200414a6: 51 8d        	or	a0, a0, a2
200414a8: 65 8d        	and	a0, a0, s1
200414aa: f2 44        	clw	s1, 28(csp)
; 	p2  = ComputeParity(data & (PARITY2  | secded_mode));
200414ac: e5 8d        	and	a1, a1, s1
200414ae: d9 2a        	cjal	0x20041684 <ComputeParity(unsigned long long)>
200414b0: 2a c6        	csw	a0, 12(csp)
200414b2: 37 e5 e1 00  	lui	a0, 3614
200414b6: 13 05 15 1e  	addi	a0, a0, 481
; 	p4  = ComputeParity(data & (PARITY4  | secded_mode));
200414ba: b3 65 a4 00  	or	a1, s0, a0
200414be: 37 c5 c3 e3  	lui	a0, 932924
200414c2: 13 05 e5 78  	addi	a0, a0, 1934
200414c6: 62 44        	clw	s0, 24(csp)
; 	p4  = ComputeParity(data & (PARITY4  | secded_mode));
200414c8: 41 8d        	or	a0, a0, s0
200414ca: 12 56        	clw	a2, 36(csp)
200414cc: 71 8d        	and	a0, a0, a2
200414ce: e5 8d        	and	a1, a1, s1
200414d0: 55 2a        	cjal	0x20041684 <ComputeParity(unsigned long long)>
200414d2: 2a c4        	csw	a0, 8(csp)
200414d4: 37 05 fe 00  	lui	a0, 4064
200414d8: 13 05 e5 1f  	addi	a0, a0, 510
; 	p8  = ComputeParity(data & (PARITY8  | secded_mode));
200414dc: 82 55        	clw	a1, 32(csp)
200414de: c9 8d        	or	a1, a1, a0
200414e0: 37 05 fc 03  	lui	a0, 16320
200414e4: 13 05 05 7f  	addi	a0, a0, 2032
; 	p8  = ComputeParity(data & (PARITY8  | secded_mode));
200414e8: 41 8d        	or	a0, a0, s0
200414ea: 12 56        	clw	a2, 36(csp)
200414ec: 71 8d        	and	a0, a0, a2
200414ee: e5 8d        	and	a1, a1, s1
200414f0: 51 2a        	cjal	0x20041684 <ComputeParity(unsigned long long)>
200414f2: 2a c2        	csw	a0, 4(csp)
200414f4: 37 05 00 01  	lui	a0, 4096
200414f8: 13 05 05 e0  	addi	a0, a0, -512
; 	p16 = ComputeParity(data & (PARITY16 | secded_mode));
200414fc: 82 55        	clw	a1, 32(csp)
200414fe: c9 8d        	or	a1, a1, a0
20041500: 37 05 00 04  	lui	a0, 16384
20041504: 13 05 05 80  	addi	a0, a0, -2048
; 	p16 = ComputeParity(data & (PARITY16 | secded_mode));
20041508: 41 8d        	or	a0, a0, s0
2004150a: 12 56        	clw	a2, 36(csp)
2004150c: 71 8d        	and	a0, a0, a2
2004150e: e5 8d        	and	a1, a1, s1
20041510: 95 2a        	cjal	0x20041684 <ComputeParity(unsigned long long)>
20041512: 2a ca        	csw	a0, 20(csp)
20041514: 37 05 00 01  	lui	a0, 4096
20041518: 7d 15        	addi	a0, a0, -1
2004151a: 82 54        	clw	s1, 32(csp)
; 	p32 = ComputeParity(data & (PARITY32 | secded_mode));
2004151c: b3 e5 a4 00  	or	a1, s1, a0
20041520: 37 05 00 fc  	lui	a0, 1032192
20041524: 41 8d        	or	a0, a0, s0
20041526: 12 56        	clw	a2, 36(csp)
20041528: 71 8d        	and	a0, a0, a2
2004152a: 72 46        	clw	a2, 28(csp)
2004152c: f1 8d        	and	a1, a1, a2
2004152e: 99 2a        	cjal	0x20041684 <ComputeParity(unsigned long long)>
;   if(secded_mode == 0) {
20041530: b3 65 94 00  	or	a1, s0, s1
; 	p32 = ComputeParity(data & (PARITY32 | secded_mode));
20041534: aa 87        	mv	a5, a0
;   if(secded_mode == 0) {
20041536: e1 c1        	beqz	a1, 0x200415f6 <.LBB0_2>
20041538: 37 05 00 02  	lui	a0, 8192
2004153c: 7d 15        	addi	a0, a0, -1
;   p64 = ComputeParity(data & (PARITY64 | secded_mode)) ^ p1 ^ p2 ^ p4 ^ p8 ^ p16 ^ p32;
2004153e: 45 8d        	or	a0, a0, s1
20041540: f2 45        	clw	a1, 28(csp)
20041542: e9 8d        	and	a1, a1, a0
20041544: 12 54        	clw	s0, 36(csp)
20041546: 22 85        	mv	a0, s0
20041548: be 84        	mv	s1, a5
2004154a: 2d 2a        	cjal	0x20041684 <ComputeParity(unsigned long long)>
2004154c: c2 42        	clw	t0, 16(csp)
2004154e: 32 43        	clw	t1, 12(csp)
;   p64 = ComputeParity(data & (PARITY64 | secded_mode)) ^ p1 ^ p2 ^ p4 ^ p8 ^ p16 ^ p32;
20041550: b3 45 53 00  	xor	a1, t1, t0
20041554: a2 43        	clw	t2, 8(csp)
20041556: b3 c5 75 00  	xor	a1, a1, t2
2004155a: 92 40        	clw	ra, 4(csp)
2004155c: b3 c5 15 00  	xor	a1, a1, ra
20041560: 52 46        	clw	a2, 20(csp)
20041562: b1 8d        	xor	a1, a1, a2
20041564: a5 8d        	xor	a1, a1, s1
20041566: a9 8d        	xor	a1, a1, a0
; 				  ((data&0xf8000000)<<6) | ((data&0x7800000)<<5) | ((data&0x07C0000)<<4)  | ((data&0x03C000)<<3) | 
20041568: 13 15 54 00  	slli	a0, s0, 5
2004156c: 37 06 00 f0  	lui	a2, 983040
20041570: 71 8d        	and	a0, a0, a2
20041572: 13 16 44 00  	slli	a2, s0, 4
20041576: b7 06 c0 07  	lui	a3, 31744
2004157a: 75 8e        	and	a2, a2, a3
2004157c: 93 16 34 00  	slli	a3, s0, 3
20041580: 37 07 1e 00  	lui	a4, 480
20041584: f9 8e        	and	a3, a3, a4
; 				  ((data&0x3E00)<<2)     | ((data&0x1E0)<<1)      |  (data&0x1F);
20041586: 13 17 24 00  	slli	a4, s0, 2
2004158a: c1 67        	lui	a5, 16
2004158c: 93 87 07 80  	addi	a5, a5, -2048
20041590: 7d 8f        	and	a4, a4, a5
20041592: 93 77 f4 01  	andi	a5, s0, 31
; 	  addr_data = (p64<<38) | (p32<<32) | (p16<<27) | (p8<<21) | (p4<<16) | (p2<<10) | (p1<<5) | 
20041596: 5d 8d        	or	a0, a0, a5
20041598: 51 8d        	or	a0, a0, a2
2004159a: 55 8d        	or	a0, a0, a3
2004159c: 59 8d        	or	a0, a0, a4
; 				  ((data&0x3E00)<<2)     | ((data&0x1E0)<<1)      |  (data&0x1F);
2004159e: 13 16 14 00  	slli	a2, s0, 1
200415a2: 13 76 06 3c  	andi	a2, a2, 960
; 	  addr_data = (p64<<38) | (p32<<32) | (p16<<27) | (p8<<21) | (p4<<16) | (p2<<10) | (p1<<5) | 
200415a6: 51 8d        	or	a0, a0, a2
200415a8: 13 96 52 00  	slli	a2, t0, 5
200415ac: 51 8d        	or	a0, a0, a2
200415ae: 13 d6 b2 01  	srli	a2, t0, 27
; 				  ((data&0xf8000000)<<6) | ((data&0x7800000)<<5) | ((data&0x07C0000)<<4)  | ((data&0x03C000)<<3) | 
200415b2: 93 56 a4 01  	srli	a3, s0, 26
200415b6: 93 f6 e6 03  	andi	a3, a3, 62
; 	  addr_data = (p64<<38) | (p32<<32) | (p16<<27) | (p8<<21) | (p4<<16) | (p2<<10) | (p1<<5) | 
200415ba: 55 8e        	or	a2, a2, a3
200415bc: 93 16 a3 00  	slli	a3, t1, 10
; 				  ((data&0xf8000000)<<6) | ((data&0x7800000)<<5) | ((data&0x07C0000)<<4)  | ((data&0x03C000)<<3) | 
200415c0: 55 8d        	or	a0, a0, a3
; 	  addr_data = (p64<<38) | (p32<<32) | (p16<<27) | (p8<<21) | (p4<<16) | (p2<<10) | (p1<<5) | 
200415c2: 93 56 63 01  	srli	a3, t1, 22
; 				  ((data&0xf8000000)<<6) | ((data&0x7800000)<<5) | ((data&0x07C0000)<<4)  | ((data&0x03C000)<<3) | 
200415c6: 55 8e        	or	a2, a2, a3
; 	  addr_data = (p64<<38) | (p32<<32) | (p16<<27) | (p8<<21) | (p4<<16) | (p2<<10) | (p1<<5) | 
200415c8: 93 96 03 01  	slli	a3, t2, 16
; 				  ((data&0xf8000000)<<6) | ((data&0x7800000)<<5) | ((data&0x07C0000)<<4)  | ((data&0x03C000)<<3) | 
200415cc: 55 8d        	or	a0, a0, a3
; 	  addr_data = (p64<<38) | (p32<<32) | (p16<<27) | (p8<<21) | (p4<<16) | (p2<<10) | (p1<<5) | 
200415ce: 93 d6 03 01  	srli	a3, t2, 16
; 				  ((data&0xf8000000)<<6) | ((data&0x7800000)<<5) | ((data&0x07C0000)<<4)  | ((data&0x03C000)<<3) | 
200415d2: 55 8e        	or	a2, a2, a3
; 	  addr_data = (p64<<38) | (p32<<32) | (p16<<27) | (p8<<21) | (p4<<16) | (p2<<10) | (p1<<5) | 
200415d4: 93 96 50 01  	slli	a3, ra, 21
; 				  ((data&0xf8000000)<<6) | ((data&0x7800000)<<5) | ((data&0x07C0000)<<4)  | ((data&0x03C000)<<3) | 
200415d8: 55 8d        	or	a0, a0, a3
; 	  addr_data = (p64<<38) | (p32<<32) | (p16<<27) | (p8<<21) | (p4<<16) | (p2<<10) | (p1<<5) | 
200415da: 93 d6 b0 00  	srli	a3, ra, 11
; 				  ((data&0xf8000000)<<6) | ((data&0x7800000)<<5) | ((data&0x07C0000)<<4)  | ((data&0x03C000)<<3) | 
200415de: 55 8e        	or	a2, a2, a3
200415e0: 52 47        	clw	a4, 20(csp)
; 	  addr_data = (p64<<38) | (p32<<32) | (p16<<27) | (p8<<21) | (p4<<16) | (p2<<10) | (p1<<5) | 
200415e2: 93 16 b7 01  	slli	a3, a4, 27
; 				  ((data&0xf8000000)<<6) | ((data&0x7800000)<<5) | ((data&0x07C0000)<<4)  | ((data&0x03C000)<<3) | 
200415e6: 55 8d        	or	a0, a0, a3
; 	  addr_data = (p64<<38) | (p32<<32) | (p16<<27) | (p8<<21) | (p4<<16) | (p2<<10) | (p1<<5) | 
200415e8: 93 56 57 00  	srli	a3, a4, 5
; 				  ((data&0xf8000000)<<6) | ((data&0x7800000)<<5) | ((data&0x07C0000)<<4)  | ((data&0x03C000)<<3) | 
200415ec: 55 8e        	or	a2, a2, a3
; 				  ((data&0x3E00)<<2)     | ((data&0x1E0)<<1)      |  (data&0x1F);
200415ee: 45 8e        	or	a2, a2, s1
; 	  addr_data = (p64<<38) | (p32<<32) | (p16<<27) | (p8<<21) | (p4<<16) | (p2<<10) | (p1<<5) | 
200415f0: 9a 05        	slli	a1, a1, 6
; 				  ((data&0x3E00)<<2)     | ((data&0x1E0)<<1)      |  (data&0x1F);
200415f2: d1 8d        	or	a1, a1, a2
200415f4: 59 a0        	j	0x2004167a <.LBB0_3>

200415f6 <.LBB0_2>:
200415f6: 92 54        	clw	s1, 36(csp)
; 				  ((data&0xF8000000)<<5) | ((data&0x7E00000)<<4)  | ((data&0x1F0000)<<3) | 
200415f8: 13 95 44 00  	slli	a0, s1, 4
200415fc: b7 05 00 7e  	lui	a1, 516096
20041600: 6d 8d        	and	a0, a0, a1
20041602: 93 95 34 00  	slli	a1, s1, 3
20041606: 37 06 f8 00  	lui	a2, 3968
2004160a: f1 8d        	and	a1, a1, a2
; 				  ((data&0xF800)<<2)     | ((data&0x7E0)<<1)      |  (data&0x1F);
2004160c: 13 96 24 00  	slli	a2, s1, 2
20041610: b7 e6 03 00  	lui	a3, 62
20041614: 75 8e        	and	a2, a2, a3
20041616: 93 96 14 00  	slli	a3, s1, 1
2004161a: 05 67        	lui	a4, 1
2004161c: 13 07 07 fc  	addi	a4, a4, -64
20041620: f9 8e        	and	a3, a3, a4
20041622: 13 f7 f4 01  	andi	a4, s1, 31
; 	  addr_data = (p32<<37) | (p16<<31) | (p8<<24) | (p4<<18) | (p2<<12) | (p1<<5) | 
20041626: 59 8d        	or	a0, a0, a4
20041628: 4d 8d        	or	a0, a0, a1
2004162a: 51 8d        	or	a0, a0, a2
2004162c: 55 8d        	or	a0, a0, a3
2004162e: 42 46        	clw	a2, 16(csp)
20041630: 93 15 56 00  	slli	a1, a2, 5
20041634: 4d 8d        	or	a0, a0, a1
20041636: b3 e5 c4 00  	or	a1, s1, a2
2004163a: b2 46        	clw	a3, 12(csp)
2004163c: 13 96 c6 00  	slli	a2, a3, 12
; 				  ((data&0xF8000000)<<5) | ((data&0x7E00000)<<4)  | ((data&0x1F0000)<<3) | 
20041640: 51 8d        	or	a0, a0, a2
; 	  addr_data = (p32<<37) | (p16<<31) | (p8<<24) | (p4<<18) | (p2<<12) | (p1<<5) | 
20041642: 13 d6 46 01  	srli	a2, a3, 20
20041646: ed 81        	srli	a1, a1, 27
; 				  ((data&0xF8000000)<<5) | ((data&0x7E00000)<<4)  | ((data&0x1F0000)<<3) | 
20041648: d1 8d        	or	a1, a1, a2
2004164a: a2 46        	clw	a3, 8(csp)
; 	  addr_data = (p32<<37) | (p16<<31) | (p8<<24) | (p4<<18) | (p2<<12) | (p1<<5) | 
2004164c: 13 96 26 01  	slli	a2, a3, 18
; 				  ((data&0xF8000000)<<5) | ((data&0x7E00000)<<4)  | ((data&0x1F0000)<<3) | 
20041650: 51 8d        	or	a0, a0, a2
; 	  addr_data = (p32<<37) | (p16<<31) | (p8<<24) | (p4<<18) | (p2<<12) | (p1<<5) | 
20041652: 13 d6 e6 00  	srli	a2, a3, 14
; 				  ((data&0xF8000000)<<5) | ((data&0x7E00000)<<4)  | ((data&0x1F0000)<<3) | 
20041656: d1 8d        	or	a1, a1, a2
20041658: 92 46        	clw	a3, 4(csp)
; 	  addr_data = (p32<<37) | (p16<<31) | (p8<<24) | (p4<<18) | (p2<<12) | (p1<<5) | 
2004165a: 13 96 86 01  	slli	a2, a3, 24
; 				  ((data&0xF8000000)<<5) | ((data&0x7E00000)<<4)  | ((data&0x1F0000)<<3) | 
2004165e: 51 8d        	or	a0, a0, a2
; 	  addr_data = (p32<<37) | (p16<<31) | (p8<<24) | (p4<<18) | (p2<<12) | (p1<<5) | 
20041660: 13 d6 86 00  	srli	a2, a3, 8
; 				  ((data&0xF8000000)<<5) | ((data&0x7E00000)<<4)  | ((data&0x1F0000)<<3) | 
20041664: d1 8d        	or	a1, a1, a2
20041666: d2 46        	clw	a3, 20(csp)
; 	  addr_data = (p32<<37) | (p16<<31) | (p8<<24) | (p4<<18) | (p2<<12) | (p1<<5) | 
20041668: 13 96 f6 01  	slli	a2, a3, 31
; 				  ((data&0xF800)<<2)     | ((data&0x7E0)<<1)      |  (data&0x1F);
2004166c: 51 8d        	or	a0, a0, a2
; 	  addr_data = (p32<<37) | (p16<<31) | (p8<<24) | (p4<<18) | (p2<<12) | (p1<<5) | 
2004166e: 13 d6 16 00  	srli	a2, a3, 1
; 				  ((data&0xF800)<<2)     | ((data&0x7E0)<<1)      |  (data&0x1F);
20041672: d1 8d        	or	a1, a1, a2
; 	  addr_data = (p32<<37) | (p16<<31) | (p8<<24) | (p4<<18) | (p2<<12) | (p1<<5) | 
20041674: 13 96 57 00  	slli	a2, a5, 5
; 				  ((data&0xF800)<<2)     | ((data&0x7E0)<<1)      |  (data&0x1F);
20041678: d1 8d        	or	a1, a1, a2

2004167a <.LBB0_3>:
; 	return addr_data;
2004167a: a2 74        	clc	cs1, 40(csp)
2004167c: 42 74        	clc	cs0, 48(csp)
2004167e: e2 70        	clc	cra, 56(csp)
20041680: 21 61        	cincoffset	csp, csp, 64
20041682: 82 80        	cret

20041684 <ComputeParity(unsigned long long)>:
; 	Parity ^= Parity >>  32;
20041684: 2d 8d        	xor	a0, a0, a1
; 	Parity ^= Parity >>  16;
20041686: 13 56 05 01  	srli	a2, a0, 16
2004168a: 93 96 05 01  	slli	a3, a1, 16
2004168e: 55 8e        	or	a2, a2, a3
20041690: 93 d6 05 01  	srli	a3, a1, 16
20041694: 31 8d        	xor	a0, a0, a2
20041696: b5 8d        	xor	a1, a1, a3
; 	Parity ^= Parity >>  8;
20041698: 13 56 85 00  	srli	a2, a0, 8
2004169c: 93 96 85 01  	slli	a3, a1, 24
200416a0: 55 8e        	or	a2, a2, a3
200416a2: 93 d6 85 00  	srli	a3, a1, 8
200416a6: 31 8d        	xor	a0, a0, a2
200416a8: b5 8d        	xor	a1, a1, a3
; 	Parity ^= Parity >>  4;
200416aa: 13 56 45 00  	srli	a2, a0, 4
200416ae: 93 96 c5 01  	slli	a3, a1, 28
200416b2: 55 8e        	or	a2, a2, a3
200416b4: 93 d6 45 00  	srli	a3, a1, 4
200416b8: 31 8d        	xor	a0, a0, a2
200416ba: b5 8d        	xor	a1, a1, a3
; 	Parity ^= Parity >>  2;
200416bc: 13 56 25 00  	srli	a2, a0, 2
200416c0: fa 05        	slli	a1, a1, 30
200416c2: d1 8d        	or	a1, a1, a2
200416c4: 2d 8d        	xor	a0, a0, a1
; 	Parity ^= Parity >>  1;
200416c6: 93 55 15 00  	srli	a1, a0, 1
200416ca: 2d 8d        	xor	a0, a0, a1
; 	return (uint32_t)(Parity&0x1);
200416cc: 05 89        	andi	a0, a0, 1
200416ce: 82 80        	cret

200416d0 <ConCatAddrData(unsigned int, unsigned int, unsigned int, ENCRYPTION_TYPE_E)>:
; {
200416d0: ae 82        	mv	t0, a1
; 	uint32_t msb = ((Addr>>(Width-1))&0x1)^0x1;
200416d2: 93 05 f6 ff  	addi	a1, a2, -1
200416d6: b3 57 b5 00  	srl	a5, a0, a1
200416da: fd 55        	addi	a1, zero, -1
; 	k = ((1<<Width)-1);
200416dc: b3 95 c5 00  	sll	a1, a1, a2
200416e0: 13 c3 f5 ff  	not	t1, a1
; 	Addr &= (secded_mode == 0) ? 0xFFFFFC : 0x1FFFFFC;
200416e4: 55 8f        	or	a4, a4, a3
200416e6: 93 36 17 00  	seqz	a3, a4
200416ea: 01 c7        	beqz	a4, 0x200416f2 <.LBB2_2>
200416ec: 37 07 00 02  	lui	a4, 8192
200416f0: 19 a0        	j	0x200416f6 <.LBB2_3>

200416f2 <.LBB2_2>:
200416f2: 37 07 00 01  	lui	a4, 4096

200416f6 <.LBB2_3>:
200416f6: 71 17        	addi	a4, a4, -4
200416f8: 93 c7 f7 ff  	not	a5, a5
200416fc: e5 45        	addi	a1, zero, 25
; 	uint32_t max_addr = (secded_mode == 0) ? 24 : 25;
200416fe: b3 86 d5 40  	sub	a3, a1, a3
20041702: b3 75 a3 00  	and	a1, t1, a0
; 	for(j=Width;j<max_addr;j++) {
20041706: 63 63 d6 00  	bltu	a2, a3, 0x2004170c <.LBB2_5>
2004170a: b2 86        	mv	a3, a2

2004170c <.LBB2_5>:
2004170c: 13 f5 17 00  	andi	a0, a5, 1
20041710: f9 8d        	and	a1, a1, a4
; 	for(j=Width;j<max_addr;j++) {
20041712: 63 88 c6 00  	beq	a3, a2, 0x20041722 <.LBB2_7>

20041716 <.LBB2_6>:
; 	  Addr |= msb<<j;
20041716: 33 17 c5 00  	sll	a4, a0, a2
2004171a: d9 8d        	or	a1, a1, a4
; 	for(j=Width;j<max_addr;j++) {
2004171c: 05 06        	addi	a2, a2, 1
2004171e: e3 9c c6 fe  	bne	a3, a2, 0x20041716 <.LBB2_6>

20041722 <.LBB2_7>:
; 	return concat;
20041722: 16 85        	mv	a0, t0
20041724: 82 80        	cret

20041726 <ConstructECC(unsigned int, unsigned int, unsigned int, ENCRYPTION_TYPE_E)>:
; {
20041726: 3d 71        	cincoffset	csp, csp, -32
20041728: 06 ec        	csc	cra, 24(csp)
2004172a: 22 e8        	csc	cs0, 16(csp)
2004172c: 26 e4        	csc	cs1, 8(csp)
2004172e: 3a 84        	mv	s0, a4
20041730: b6 84        	mv	s1, a3
; 	concatresult = ConCatAddrData(Addr, Data, Width, secded_mode);
20041732: 79 3f        	cjal	0x200416d0 <ConCatAddrData(unsigned int, unsigned int, unsigned int, ENCRYPTION_TYPE_E)>
; 	return GenerateECC(concatresult, secded_mode);
20041734: 26 86        	mv	a2, s1
20041736: a2 86        	mv	a3, s0
20041738: a2 64        	clc	cs1, 8(csp)
2004173a: 42 64        	clc	cs0, 16(csp)
2004173c: e2 60        	clc	cra, 24(csp)
2004173e: 05 61        	cincoffset	csp, csp, 32
20041740: 31 bb        	j	0x2004145c <GenerateECC(unsigned long long, ENCRYPTION_TYPE_E)>
20041742: 00 00        	unimp	

20041744 <__cxa_pure_virtual>:
; {
20041744: 7d 71        	cincoffset	csp, csp, -16
;   int retval = (val != 0) ? 0xfe : 0xff;
20041746: 06 e4        	csc	cra, 8(csp)
20041748: 13 35 15 00  	seqz	a0, a0
2004174c: 13 65 e5 0f  	ori	a0, a0, 254
;   putc(retval);
20041750: db 15 10 00  	cincoffset	ca1, cnull, 1
20041754: 01 34        	cjal	0x20041154 <fputc(int, unsigned int**)>

20041756 <from_root(unsigned int)>:
;   return __builtin_cheri_address_set(globalRoot, addr);
20041756: db 95 01 14  	cincoffset	ca1, cgp, 320
2004175a: db a5 85 00  	csetbounds	ca1, ca1, 8
2004175e: 8c 61        	clc	ca1, 0(ca1)
20041760: 5b 85 a5 20  	csetaddr	ca0, ca1, a0
20041764: 82 80        	cret

20041766 <cap_build(void*, unsigned int, unsigned int, unsigned int)>:
; 	ret = cheri_perms_and(ret, perms);
20041766: 5b 05 d5 1a  	candperm	ca0, ca0, a3
; 	ret = cheri_address_set(ret, start);
2004176a: 5b 05 b5 20  	csetaddr	ca0, ca0, a1
; 	ret = cheri_bounds_set(ret, len);
2004176e: 5b 05 c5 10  	csetbounds	ca0, ca0, a2
; 	return ret;
20041772: 82 80        	cret

20041774 <populate_caprelocs(CapReloc*, unsigned int)>:
; {
20041774: 3d 71        	cincoffset	csp, csp, -32
20041776: 06 ec        	csc	cra, 24(csp)
20041778: 22 e8        	csc	cs0, 16(csp)
2004177a: 26 e4        	csc	cs1, 8(csp)
2004177c: 01 46        	mv	a2, zero
2004177e: 51 43        	addi	t1, zero, 20
20041780: db 93 01 14  	cincoffset	ct2, cgp, 320
20041784: db a3 83 00  	csetbounds	ct2, ct2, 8
20041788: db 92 81 14  	cincoffset	ct0, cgp, 328
2004178c: db a2 82 00  	csetbounds	ct0, ct0, 8
;   for (unsigned int i = 0; i < n; ++i) {
20041790: 63 8f c5 04  	beq	a1, a2, 0x200417ee <.LBB3_5>

20041794 <.LBB3_1>:
;     void** capaddr = (void**)from_root(caprelocs[i].addr);
20041794: b3 07 66 02  	mul	a5, a2, t1
;     if (caprelocs[i].flags & 0x80000000U) { // This is a function pointer.
20041798: 93 86 07 01  	addi	a3, a5, 16
2004179c: db 06 d5 22  	cincoffset	ca3, ca0, a3
200417a0: 98 42        	clw	a4, 0(ca3)
;   return __builtin_cheri_address_set(globalRoot, addr);
200417a2: 83 b6 03 00  	clc	ca3, 0(ct2)
;     if (caprelocs[i].flags & 0x80000000U) { // This is a function pointer.
200417a6: 63 45 07 00  	bltz	a4, 0x200417b0 <.LBB3_3>
;   return __builtin_cheri_address_set(globalRoot, addr);
200417aa: db 80 06 20  	csetaddr	cra, ca3, zero
200417ae: 19 a0        	j	0x200417b4 <.LBB3_4>

200417b0 <.LBB3_3>:
;       cap = pccRoot;
200417b0: 83 b0 02 00  	clc	cra, 0(ct0)

200417b4 <.LBB3_4>:
200417b4: 5b 04 f5 22  	cincoffset	cs0, ca0, a5
200417b8: 00 40        	clw	s0, 0(cs0)
;     cap = __builtin_cheri_address_set(cap, caprelocs[i].base);
200417ba: 93 84 47 00  	addi	s1, a5, 4
200417be: db 04 95 22  	cincoffset	cs1, ca0, s1
200417c2: 84 40        	clw	s1, 0(cs1)
;     cap = __builtin_cheri_bounds_set(cap, caprelocs[i].len);
200417c4: 13 87 c7 00  	addi	a4, a5, 12
200417c8: 5b 07 e5 22  	cincoffset	ca4, ca0, a4
200417cc: 18 43        	clw	a4, 0(ca4)
;     cap = __builtin_cheri_offset_increment(cap, caprelocs[i].offset);
200417ce: a1 07        	addi	a5, a5, 8
200417d0: db 07 f5 22  	cincoffset	ca5, ca0, a5
200417d4: 9c 43        	clw	a5, 0(ca5)
200417d6: db 86 86 20  	csetaddr	ca3, ca3, s0
;     cap = __builtin_cheri_address_set(cap, caprelocs[i].base);
200417da: 5b 84 90 20  	csetaddr	cs0, cra, s1
;     cap = __builtin_cheri_bounds_set(cap, caprelocs[i].len);
200417de: 5b 07 e4 10  	csetbounds	ca4, cs0, a4
;     cap = __builtin_cheri_offset_increment(cap, caprelocs[i].offset);
200417e2: 5b 07 f7 22  	cincoffset	ca4, ca4, a5
;     *capaddr = cap;
200417e6: 98 e2        	csc	ca4, 0(ca3)
;   for (unsigned int i = 0; i < n; ++i) {
200417e8: 05 06        	addi	a2, a2, 1
200417ea: e3 95 c5 fa  	bne	a1, a2, 0x20041794 <.LBB3_1>

200417ee <.LBB3_5>:
; }
200417ee: a2 64        	clc	cs1, 8(csp)
200417f0: 42 64        	clc	cs0, 16(csp)
200417f2: e2 60        	clc	cra, 24(csp)
200417f4: 05 61        	cincoffset	csp, csp, 32
200417f6: 82 80        	cret

200417f8 <cstart>:
; extern "C" void cstart(void *pccRootArg, void* memRootArg, void* heapCap, unsigned int heapSize, CapReloc* caprelocs, unsigned int nCaprelocs) {
200417f8: 5d 71        	cincoffset	csp, csp, -80
200417fa: 86 e4        	csc	cra, 72(csp)
200417fc: a2 e0        	csc	cs0, 64(csp)
200417fe: 26 fc        	csc	cs1, 56(csp)
20041800: 3e ce        	csw	a5, 28(csp)
20041802: 3a e8        	csc	ca4, 16(csp)
20041804: 36 da        	csw	a3, 52(csp)
20041806: 32 f4        	csc	ca2, 40(csp)
20041808: 2e e0        	csc	ca1, 0(csp)
2004180a: 2a e4        	csc	ca0, 8(csp)
; 	ptraddr_t dataROMStart = la_abs(_pcc_end);
2004180c: 37 25 04 20  	lui	a0, 131138
20041810: 13 05 05 d0  	addi	a0, a0, -768
; 	ptraddr_t dataRAMStart = la_abs(_data_start);
20041814: b7 06 0f 20  	lui	a3, 131312
20041818: 93 86 06 00  	mv	a3, a3
; 	ptraddr_t bssRAMStart = la_abs(_bss_start);
2004181c: 37 07 0f 20  	lui	a4, 131312
20041820: 13 07 c7 08  	addi	a4, a4, 140
; 	size_t sz = la_abs(_data_end) - dataRAMStart;
20041824: 37 06 0f 20  	lui	a2, 131312
20041828: 13 06 c6 08  	addi	a2, a2, 140
2004182c: 15 8e        	sub	a2, a2, a3
; 	size_t bssSz = la_abs(_bss_end) - la_abs(_bss_start);
2004182e: b7 04 0f 20  	lui	s1, 131312
20041832: 93 84 84 2b  	addi	s1, s1, 696
20041836: b7 07 0f 20  	lui	a5, 131312
2004183a: 93 87 c7 08  	addi	a5, a5, 140
2004183e: 9d 8c        	sub	s1, s1, a5
20041840: 93 07 40 06  	addi	a5, zero, 100
; 	ret = cheri_perms_and(ret, perms);
20041844: db 87 f5 1a  	candperm	ca5, ca1, a5
; 	ret = cheri_address_set(ret, start);
20041848: 3e f0        	csc	ca5, 32(csp)
2004184a: 5b 85 a7 20  	csetaddr	ca0, ca5, a0
; 	ret = cheri_bounds_set(ret, len);
2004184e: db 05 c5 10  	csetbounds	ca1, ca0, a2
; 	ret = cheri_address_set(ret, start);
20041852: 5b 85 d7 20  	csetaddr	ca0, ca5, a3
; 	ret = cheri_bounds_set(ret, len);
20041856: 5b 05 c5 10  	csetbounds	ca0, ca0, a2
; 	ret = cheri_address_set(ret, start);
2004185a: db 86 e7 20  	csetaddr	ca3, ca5, a4
; 	ret = cheri_bounds_set(ret, len);
2004185e: 5b 84 96 10  	csetbounds	cs0, ca3, s1
; 	memcpy(dataRAM, dataROM, sz);
20041862: 9d 34        	cjal	0x200412c8 <memcpy(void*, void const*, unsigned int)>
; 	memset(bssRAM, 0, bssSz);
20041864: 5b 05 a4 fe  	cmove	ca0, cs0
20041868: 81 45        	mv	a1, zero
2004186a: 26 86        	mv	a2, s1
2004186c: d5 3c        	cjal	0x20041360 <memset(void*, int, unsigned int)>
;   pccRoot = pccRootArg;
2004186e: 5b 95 81 14  	cincoffset	ca0, cgp, 328
20041872: 5b 25 85 00  	csetbounds	ca0, ca0, 8
20041876: a2 65        	clc	ca1, 8(csp)
20041878: 0c e1        	csc	ca1, 0(ca0)
;   globalRoot = memRootArg;
2004187a: 5b 94 01 14  	cincoffset	cs0, cgp, 320
2004187e: 5b 24 84 00  	csetbounds	cs0, cs0, 8
20041882: 02 65        	clc	ca0, 0(csp)
20041884: 08 e0        	csc	ca0, 0(cs0)
;   populate_caprelocs(caprelocs, nCaprelocs);
20041886: 42 65        	clc	ca0, 16(csp)
20041888: f2 45        	clw	a1, 28(csp)
2004188a: ed 35        	cjal	0x20041774 <populate_caprelocs(CapReloc*, unsigned int)>
;   return __builtin_cheri_address_set(globalRoot, addr);
2004188c: 08 60        	clc	ca0, 0(cs0)
2004188e: b7 05 00 21  	lui	a1, 135168
20041892: 5b 06 b5 20  	csetaddr	ca2, ca0, a1
;   simReg  = (volatile unsigned int*)from_root(0x21000000U);
20041896: db 96 01 12  	cincoffset	ca3, cgp, 288
2004189a: db a6 86 00  	csetbounds	ca3, ca3, 8
2004189e: 90 e2        	csc	ca2, 0(ca3)
200418a0: 13 86 05 10  	addi	a2, a1, 256
;   return __builtin_cheri_address_set(globalRoot, addr);
200418a4: 5b 06 c5 20  	csetaddr	ca2, ca0, a2
;   tmrReg  = (volatile unsigned int*)from_root(0x21000100U);
200418a8: db 96 81 11  	cincoffset	ca3, cgp, 280
200418ac: db a6 86 00  	csetbounds	ca3, ca3, 8
200418b0: 90 e2        	csc	ca2, 0(ca3)
200418b2: 13 86 05 20  	addi	a2, a1, 512
;   return __builtin_cheri_address_set(globalRoot, addr);
200418b6: 5b 06 c5 20  	csetaddr	ca2, ca0, a2
;   uartReg = (volatile unsigned char*)from_root(0x21000200U);
200418ba: db 96 01 11  	cincoffset	ca3, cgp, 272
200418be: db a6 86 00  	csetbounds	ca3, ca3, 8
200418c2: 90 e2        	csc	ca2, 0(ca3)
200418c4: 13 86 05 30  	addi	a2, a1, 768
;   return __builtin_cheri_address_set(globalRoot, addr);
200418c8: 5b 06 c5 20  	csetaddr	ca2, ca0, a2
;   rngReg  = (volatile unsigned int*)from_root(0x21000300U);
200418cc: db 96 81 12  	cincoffset	ca3, cgp, 296
200418d0: db a6 86 00  	csetbounds	ca3, ca3, 8
200418d4: 90 e2        	csc	ca2, 0(ca3)
200418d6: 93 85 05 40  	addi	a1, a1, 1024
;   return __builtin_cheri_address_set(globalRoot, addr);
200418da: db 05 b5 20  	csetaddr	ca1, ca0, a1
;   cfgReg  = (volatile unsigned int*)from_root(0x21000400U);
200418de: 5b 96 01 13  	cincoffset	ca2, cgp, 304
200418e2: 5b 26 86 00  	csetbounds	ca2, ca2, 8
200418e6: 0c e2        	csc	ca1, 0(ca2)
200418e8: b7 15 01 20  	lui	a1, 131089
;   return __builtin_cheri_address_set(globalRoot, addr);
200418ec: 5b 05 b5 20  	csetaddr	ca0, ca0, a1
;   memRands = (volatile unsigned int*)from_root(0x20011000U);
200418f0: db 95 81 13  	cincoffset	ca1, cgp, 312
200418f4: db a5 85 00  	csetbounds	ca1, ca1, 8
200418f8: 88 e1        	csc	ca0, 0(ca1)
;   malloc_init(heapCap, heapSize);
200418fa: 22 75        	clc	ca0, 40(csp)
200418fc: d2 55        	clw	a1, 52(csp)
200418fe: ef e0 7f f5  	cjal	0x20040854 <malloc_init(void*, unsigned int)>
20041902: 37 b5 00 8f  	lui	a0, 585739
; 	ret = cheri_address_set(ret, start);
20041906: 82 75        	clc	ca1, 32(csp)
20041908: 5b 85 a5 20  	csetaddr	ca0, ca1, a0
2004190c: 85 65        	lui	a1, 1
; 	ret = cheri_bounds_set(ret, len);
2004190e: 5b 05 b5 10  	csetbounds	ca0, ca0, a1
20041912: b7 35 31 01  	lui	a1, 4883
20041916: 93 85 05 d0  	addi	a1, a1, -768
2004191a: 71 66        	lui	a2, 28
2004191c: 13 06 06 20  	addi	a2, a2, 512
; 	uart_init(cap_build(memRootArg, UART_ADDR, 0x1000, memoryPerms), XTAL_FREQ, BAUDRATE);
20041920: 8d 46        	addi	a3, zero, 3
20041922: 01 47        	mv	a4, zero
20041924: 81 47        	mv	a5, zero
20041926: 41 22        	cjal	0x20041aa6 <uart_init(void*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>
; 	int retval = main();
20041928: 11 20        	cjal	0x2004192c <main>
; 	_exit(retval);
2004192a: 29 3d        	cjal	0x20041744 <__cxa_pure_virtual>

2004192c <main>:
; int main () {
2004192c: 7d 71        	cincoffset	csp, csp, -16
2004192e: 06 e4        	csc	cra, 8(csp)

20041930 <.LBB0_8>:
;   printf("Cheri sanity test starting..\n");
20041930: 97 05 00 00  	auipcc	ca1, 0
20041934: db 95 85 29  	cincoffset	ca1, ca1, 664
20041938: db a5 e5 01  	csetbounds	ca1, ca1, 30
2004193c: 5b 15 10 00  	cincoffset	ca0, cnull, 1
20041940: ef f0 8f ec  	cjal	0x20041008 <cfprintf(unsigned int**, char const*, ...)>

20041944 <.LBB0_9>:
;   printf("Setting up ISR and PLIC\n");
20041944: 97 05 00 00  	auipcc	ca1, 0
20041948: db 95 a5 33  	cincoffset	ca1, ca1, 826
2004194c: db a5 95 01  	csetbounds	ca1, ca1, 25
20041950: 5b 15 10 00  	cincoffset	ca0, cnull, 1
20041954: ef f0 4f eb  	cjal	0x20041008 <cfprintf(unsigned int**, char const*, ...)>
;   flag = cheri_intr_init(0);
20041958: 01 45        	mv	a0, zero
2004195a: ef e0 7f 89  	cjal	0x200401f0 <cheri_intr_init>

2004195e <.LBB0_10>:
;   printf("Testing sw interrupts\n"); 
2004195e: 97 05 00 00  	auipcc	ca1, 0
20041962: db 95 d5 2e  	cincoffset	ca1, ca1, 749
20041966: db a5 75 01  	csetbounds	ca1, ca1, 23
2004196a: 5b 15 10 00  	cincoffset	ca0, cnull, 1
2004196e: ef f0 af e9  	cjal	0x20041008 <cfprintf(unsigned int**, char const*, ...)>
;   flag = cheri_sw_intr_test(0);
20041972: 01 45        	mv	a0, zero
20041974: ef e0 1f 8e  	cjal	0x20040254 <cheri_sw_intr_test>
;   if (flag != 0) {
20041978: 2d e9        	bnez	a0, 0x200419ea <.LBB0_5>

2004197a <.LBB0_11>:
;   printf("Testing timer interrupts\n"); 
2004197a: 97 05 00 00  	auipcc	ca1, 0
2004197e: db 95 c5 26  	cincoffset	ca1, ca1, 620
20041982: db a5 a5 01  	csetbounds	ca1, ca1, 26
20041986: 5b 15 10 00  	cincoffset	ca0, cnull, 1
2004198a: ef f0 ef e7  	cjal	0x20041008 <cfprintf(unsigned int**, char const*, ...)>
;   flag = cheri_tmr_intr_test(0);
2004198e: 01 45        	mv	a0, zero
20041990: ef e0 bf 92  	cjal	0x200402ba <cheri_tmr_intr_test>
;   if (flag != 0) {
20041994: 39 e9        	bnez	a0, 0x200419ea <.LBB0_5>

20041996 <.LBB0_12>:
;   printf("calling cheriot tsafe test\n");
20041996: 97 05 00 00  	auipcc	ca1, 0
2004199a: db 95 c5 2c  	cincoffset	ca1, ca1, 716
2004199e: db a5 c5 01  	csetbounds	ca1, ca1, 28
200419a2: 5b 15 10 00  	cincoffset	ca0, cnull, 1
200419a6: ef f0 2f e6  	cjal	0x20041008 <cfprintf(unsigned int**, char const*, ...)>
;   flag = cheri_tsafe_test(0);
200419aa: 01 45        	mv	a0, zero
200419ac: ef e0 7f 98  	cjal	0x20040332 <cheri_tsafe_test>
;   if (flag != 0) {
200419b0: 0d ed        	bnez	a0, 0x200419ea <.LBB0_5>

200419b2 <.LBB0_13>:
;   printf("Testing tbre with interrupts \n");
200419b2: 97 05 00 00  	auipcc	ca1, 0
200419b6: db 95 a5 30  	cincoffset	ca1, ca1, 778
200419ba: db a5 f5 01  	csetbounds	ca1, ca1, 31
200419be: 5b 15 10 00  	cincoffset	ca0, cnull, 1
200419c2: ef f0 6f e4  	cjal	0x20041008 <cfprintf(unsigned int**, char const*, ...)>
;   flag = cheri_tbre_test(0);
200419c6: 01 45        	mv	a0, zero
200419c8: ef e0 bf 9e  	cjal	0x200403b2 <cheri_tbre_test>
;   if (flag != 0) {
200419cc: 19 ed        	bnez	a0, 0x200419ea <.LBB0_5>

200419ce <.LBB0_14>:
;   printf("Testing stkclr \n");
200419ce: 97 05 00 00  	auipcc	ca1, 0
200419d2: db 95 95 1e  	cincoffset	ca1, ca1, 489
200419d6: db a5 15 01  	csetbounds	ca1, ca1, 17
200419da: 5b 15 10 00  	cincoffset	ca0, cnull, 1
200419de: ef f0 af e2  	cjal	0x20041008 <cfprintf(unsigned int**, char const*, ...)>
;   flag = cheri_stkclr_test(0);
200419e2: 01 45        	mv	a0, zero
200419e4: ef e0 5f ac  	cjal	0x200404a8 <cheri_stkclr_test>
;   if (flag != 0) {
200419e8: 0d c1        	beqz	a0, 0x20041a0a <.LBB0_7>

200419ea <.LBB0_5>:
200419ea: 2a 86        	mv	a2, a0

200419ec <.LBB0_15>:
200419ec: 97 05 00 00  	auipcc	ca1, 0
200419f0: db 95 75 1a  	cincoffset	ca1, ca1, 423
200419f4: db a5 45 02  	csetbounds	ca1, ca1, 36
200419f8: 5b 15 10 00  	cincoffset	ca0, cnull, 1
200419fc: 32 c0        	csw	a2, 0(csp)
200419fe: ef f0 af e0  	cjal	0x20041008 <cfprintf(unsigned int**, char const*, ...)>
20041a02: 7d 55        	addi	a0, zero, -1

20041a04 <.LBB0_6>:
; }
20041a04: a2 60        	clc	cra, 8(csp)
20041a06: 41 61        	cincoffset	csp, csp, 16
20041a08: 82 80        	cret

20041a0a <.LBB0_7>:
;     printf("Test passed :-) \n");
20041a0a: 97 05 00 00  	auipcc	ca1, 0
20041a0e: db 95 d5 28  	cincoffset	ca1, ca1, 653
20041a12: db a5 25 01  	csetbounds	ca1, ca1, 18
20041a16: 5b 15 10 00  	cincoffset	ca0, cnull, 1
20041a1a: ef f0 ef de  	cjal	0x20041008 <cfprintf(unsigned int**, char const*, ...)>
20041a1e: 01 45        	mv	a0, zero
20041a20: d5 b7        	j	0x20041a04 <.LBB0_6>
20041a22: 00 00        	unimp	

20041a24 <getLock(unsigned long*)>:
;     return;
20041a24: 82 80        	cret

20041a26 <releaseLock(unsigned long*)>:
;     return;
20041a26: 82 80        	cret

20041a28 <_flush(int)>:
; MY_EXTERN_C void _flush(int fd) {
20041a28: 5b 95 01 15  	cincoffset	ca0, cgp, 336
20041a2c: 5b 25 85 00  	csetbounds	ca0, ca0, 8
20041a30: 08 61        	clc	ca0, 0(ca0)

20041a32 <.LBB2_1>:
;     while ((UartBasePtr->LSR.THRE == 0) || (UartBasePtr->LSR.TEMT == 0)){
20041a32: 4c 49        	clw	a1, 20(ca0)
20041a34: 93 f5 05 02  	andi	a1, a1, 32
20041a38: ed dd        	beqz	a1, 0x20041a32 <.LBB2_1>
20041a3a: 4c 49        	clw	a1, 20(ca0)
20041a3c: 93 f5 05 04  	andi	a1, a1, 64
20041a40: ed d9        	beqz	a1, 0x20041a32 <.LBB2_1>
; }
20041a42: 82 80        	cret

20041a44 <_write(int, char const*, int)>:
; MY_EXTERN_C int _write(int fd, const char* data, int size) {
20041a44: 32 85        	mv	a0, a2
20041a46: db 96 01 15  	cincoffset	ca3, cgp, 336
20041a4a: db a6 86 00  	csetbounds	ca3, ca3, 8
;     for(int i = 0; i<size; i++) {
20041a4e: 63 43 c0 00  	bgtz	a2, 0x20041a54 <.LBB3_2>
20041a52: 01 46        	mv	a2, zero

20041a54 <.LBB3_2>:
20041a54: 94 62        	clc	ca3, 0(ca3)
20041a56: 01 47        	mv	a4, zero
;     for(int i = 0; i<size; i++) {
20041a58: 63 0e c7 00  	beq	a4, a2, 0x20041a74 <.LBB3_5>

20041a5c <.LBB3_3>:
;         while (UartBasePtr->LSR.THRE == 0){
20041a5c: dc 4a        	clw	a5, 20(ca3)
20041a5e: 93 f7 07 02  	andi	a5, a5, 32
20041a62: ed df        	beqz	a5, 0x20041a5c <.LBB3_3>
; 	    UartBasePtr->THR = data[i];
20041a64: db 87 e5 22  	cincoffset	ca5, ca1, a4
20041a68: 83 c7 07 00  	clbu	a5, 0(ca5)
20041a6c: 9c c2        	csw	a5, 0(ca3)
;     for(int i = 0; i<size; i++) {
20041a6e: 05 07        	addi	a4, a4, 1
20041a70: e3 16 c7 fe  	bne	a4, a2, 0x20041a5c <.LBB3_3>

20041a74 <.LBB3_5>:
;     return size;
20041a74: 82 80        	cret

20041a76 <_read(int, char*, int)>:
; MY_EXTERN_C int _read(int fd, char* data, int size) {
20041a76: 32 85        	mv	a0, a2
20041a78: 5b 96 01 15  	cincoffset	ca2, cgp, 336
20041a7c: 5b 26 86 00  	csetbounds	ca2, ca2, 8
;     for(cnt=0;cnt<size;cnt++) {
20041a80: 63 43 a0 00  	bgtz	a0, 0x20041a86 <.LBB4_2>
20041a84: 01 45        	mv	a0, zero

20041a86 <.LBB4_2>:
20041a86: 10 62        	clc	ca2, 0(ca2)
20041a88: 81 46        	mv	a3, zero
;     for(cnt=0;cnt<size;cnt++) {
20041a8a: 63 8d a6 00  	beq	a3, a0, 0x20041aa4 <.LBB4_5>

20041a8e <.LBB4_3>:
;         while(!(UartBasePtr->LSR.DR)) { continue; }
20041a8e: 58 4a        	clw	a4, 20(ca2)
20041a90: 05 8b        	andi	a4, a4, 1
20041a92: 75 df        	beqz	a4, 0x20041a8e <.LBB4_3>
;         data[cnt] = (char)UartBasePtr->RBR;
20041a94: 18 42        	clw	a4, 0(ca2)
20041a96: db 87 d5 22  	cincoffset	ca5, ca1, a3
20041a9a: 23 80 e7 00  	csb	a4, 0(ca5)
;     for(cnt=0;cnt<size;cnt++) {
20041a9e: 85 06        	addi	a3, a3, 1
20041aa0: e3 97 a6 fe  	bne	a3, a0, 0x20041a8e <.LBB4_3>

20041aa4 <.LBB4_5>:
;     return cnt;
20041aa4: 82 80        	cret

20041aa6 <uart_init(void*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)>:
; ) {
20041aa6: 3d 71        	cincoffset	csp, csp, -32
;     UartBasePtr = (PMSFT_UART_16550_t)addr;
20041aa8: 06 ec        	csc	cra, 24(csp)
20041aaa: db 92 01 15  	cincoffset	ct0, cgp, 336
20041aae: db a2 82 00  	csetbounds	ct0, ct0, 8
20041ab2: 23 b0 a2 00  	csc	ca0, 0(ct0)

20041ab6 <.LBB5_1>:
;     while (UartBasePtr->LSR.TEMT != 1 || UartBasePtr->LSR.THRE != 1);
20041ab6: 83 22 45 01  	clw	t0, 20(ca0)
20041aba: 93 f2 02 04  	andi	t0, t0, 64
20041abe: e3 8c 02 fe  	beqz	t0, 0x20041ab6 <.LBB5_1>
20041ac2: 83 22 45 01  	clw	t0, 20(ca0)
20041ac6: 93 f2 02 02  	andi	t0, t0, 32
20041aca: e3 86 02 fe  	beqz	t0, 0x20041ab6 <.LBB5_1>
;     lcr.AsUINT32 = 0;
20041ace: 02 ca        	csw	zero, 20(csp)
;     lcr.DLAB = 1;
20041ad0: d2 42        	clw	t0, 20(csp)
20041ad2: 93 e2 02 08  	ori	t0, t0, 128
20041ad6: 16 ca        	csw	t0, 20(csp)
;     lcr.STOP = stop;
20041ad8: d2 42        	clw	t0, 20(csp)
20041ada: 8a 07        	slli	a5, a5, 2
20041adc: 13 f3 47 00  	andi	t1, a5, 4
20041ae0: 93 f7 b2 ff  	andi	a5, t0, -5
20041ae4: b3 e7 67 00  	or	a5, a5, t1
20041ae8: 3e ca        	csw	a5, 20(csp)
;     lcr.PEN = parity;
20041aea: d2 47        	clw	a5, 20(csp)
20041aec: 0e 07        	slli	a4, a4, 3
20041aee: 21 8b        	andi	a4, a4, 8
20041af0: dd 9b        	andi	a5, a5, -9
20041af2: 5d 8f        	or	a4, a4, a5
20041af4: 3a ca        	csw	a4, 20(csp)
;     lcr.DLS = word_size;
20041af6: 52 47        	clw	a4, 20(csp)
20041af8: 8d 8a        	andi	a3, a3, 3
20041afa: 71 9b        	andi	a4, a4, -4
20041afc: d9 8e        	or	a3, a3, a4
20041afe: 36 ca        	csw	a3, 20(csp)
;     UartBasePtr->LCR.AsUINT32 = lcr.AsUINT32;
20041b00: d2 46        	clw	a3, 20(csp)
20041b02: 54 c5        	csw	a3, 12(ca0)
;     baudxdiv = 16*baudrate;
20041b04: 12 06        	slli	a2, a2, 4
;     br_int = xtal_freq/(16*baudrate);
20041b06: b3 d6 c5 02  	divu	a3, a1, a2
20041b0a: 33 87 c6 02  	mul	a4, a3, a2
20041b0e: 99 8d        	sub	a1, a1, a4
;     rem = ((xtal_freq % baudxdiv) <<(FRAC_BRG_BITS+1))/baudxdiv;
20041b10: 96 05        	slli	a1, a1, 5
20041b12: b3 d5 c5 02  	divu	a1, a1, a2
;     rem = (rem>>1) + (rem&0x1);
20041b16: 13 d6 15 00  	srli	a2, a1, 1
20041b1a: 85 89        	andi	a1, a1, 1
20041b1c: b2 95        	add	a1, a1, a2
;     UartBasePtr->DLF = rem;
20041b1e: 4c d1        	csw	a1, 36(ca0)
;     UartBasePtr->DLL = (br_int>>0)&0xff;
20041b20: 93 f5 f6 0f  	andi	a1, a3, 255
20041b24: 0c c1        	csw	a1, 0(ca0)
;     UartBasePtr->DLH = (br_int>>8)&0xff;
20041b26: 93 d5 86 00  	srli	a1, a3, 8
20041b2a: 93 f5 f5 0f  	andi	a1, a1, 255
20041b2e: 4c c1        	csw	a1, 4(ca0)
;     lcr.DLAB = 0;
20041b30: d2 45        	clw	a1, 20(csp)
20041b32: 93 f5 f5 f7  	andi	a1, a1, -129
20041b36: 2e ca        	csw	a1, 20(csp)
;     UartBasePtr->LCR.AsUINT32 = lcr.AsUINT32;
20041b38: d2 45        	clw	a1, 20(csp)
20041b3a: 4c c5        	csw	a1, 12(ca0)
;     fcr.AsUINT32 = 0;
20041b3c: 02 c8        	csw	zero, 16(csp)
;     fcr.FIFOE = 1;
20041b3e: c2 45        	clw	a1, 16(csp)
20041b40: 93 e5 15 00  	ori	a1, a1, 1
20041b44: 2e c8        	csw	a1, 16(csp)
;     UartBasePtr->FCR.AsUINT32 = fcr.AsUINT32;
20041b46: c2 45        	clw	a1, 16(csp)
20041b48: 0c c5        	csw	a1, 8(ca0)
20041b4a: 13 05 00 02  	addi	a0, zero, 32
;     const char space = ' ';
20041b4e: a3 07 a1 00  	csb	a0, 15(csp)
20041b52: 5b 15 f1 00  	cincoffset	ca0, csp, 15
20041b56: db 25 15 00  	csetbounds	ca1, ca0, 1
;     _write(1,&space,1);
20041b5a: 05 46        	addi	a2, zero, 1
20041b5c: e5 35        	cjal	0x20041a44 <_write(int, char const*, int)>
; }
20041b5e: e2 60        	clc	cra, 24(csp)
20041b60: 05 61        	cincoffset	csp, csp, 32
20041b62: 82 80        	cret

20041b64 <_rodata_start>:
20041b64: 45 72        	lui	tp, 1048561
20041b66: 72 6f        	<unknown>
20041b68: 72 2e        	<unknown>
20041b6a: 2e 2e        	<unknown>
20041b6c: 55 6e        	<unknown>
20041b6e: 68 61        	clc	ca0, 192(ca0)
20041b70: 6e 64        	clc	cs0, 216(csp)
20041b72: 6c 65        	clc	ca1, 200(ca0)
20041b74: 64 20        	<unknown>
20041b76: 45 78        	<unknown>
20041b78: 63 65 70 74  	bltu	zero, t2, 0x200422c2 <_pcc_end+0x5c2>
20041b7c: 69 6f        	<unknown>
20041b7e: 6e 28        	<unknown>
20041b80: 25 64        	lui	s0, 9
20041b82: 29 2e        	cjal	0x20041e9c <_pcc_end+0x19c>
20041b84: 20 45        	clw	s0, 72(ca0)
20041b86: 78 69        	clc	ca4, 208(ca0)
20041b88: 74 69        	clc	ca3, 208(ca0)
20041b8a: 6e 67        	clc	ca4, 216(csp)
20041b8c: 20 74        	clc	cs0, 104(cs0)
20041b8e: 65 73        	lui	t1, 1048569
20041b90: 74 0a        	cincoffset	ca3, csp, 284
20041b92: 00 54        	clw	s0, 40(cs0)
20041b94: 65 73        	lui	t1, 1048569
20041b96: 74 20        	<unknown>
20041b98: 66 61        	clc	csp, 88(csp)
20041b9a: 69 6c        	<unknown>
20041b9c: 65 64        	lui	s0, 25
20041b9e: 20 77        	clc	cs0, 104(ca4)
20041ba0: 69 74        	lui	s0, 1048570
20041ba2: 68 20        	<unknown>
20041ba4: 65 72        	lui	tp, 1048569
20041ba6: 72 6f        	<unknown>
20041ba8: 72 20        	<unknown>
20041baa: 63 6f 64 65  	<unknown>
20041bae: 20 25        	<unknown>
20041bb0: 78 20        	<unknown>
20041bb2: 3a 2d        	<unknown>
20041bb4: 28 0a        	cincoffset	ca0, csp, 280
20041bb6: 00 54        	clw	s0, 40(cs0)
20041bb8: 65 73        	lui	t1, 1048569
20041bba: 74 69        	clc	ca3, 208(ca0)
20041bbc: 6e 67        	clc	ca4, 216(csp)
20041bbe: 20 73        	clc	cs0, 96(ca4)
20041bc0: 74 6b        	clc	ca3, 208(ca4)
20041bc2: 63 6c 72 20  	bltu	tp, t2, 0x20041dda <_pcc_end+0xda>
20041bc6: 0a 00        	c.slli	zero, 2
20041bc8: 43 68 65 72  	<unknown>
20041bcc: 69 20        	cjal	0x20041c56 <_rodata_start+0xf2>
20041bce: 73 61 6e 69  	csrrsi	sp, 1686, 28
20041bd2: 74 79        	clc	ca3, 240(ca0)
20041bd4: 20 74        	clc	cs0, 104(cs0)
20041bd6: 65 73        	lui	t1, 1048569
20041bd8: 74 20        	<unknown>
20041bda: 73 74 61 72  	csrrci	s0, 1830, 2
20041bde: 74 69        	clc	ca3, 208(ca0)
20041be0: 6e 67        	clc	ca4, 216(csp)
20041be2: 2e 2e        	<unknown>
20041be4: 0a 00        	c.slli	zero, 2
20041be6: 54 65        	clc	ca3, 136(ca0)
20041be8: 73 74 69 6e  	csrrci	s0, 1766, 18
20041bec: 67 20 74 69  	<unknown>
20041bf0: 6d 65        	lui	a0, 27
20041bf2: 72 20        	<unknown>
20041bf4: 69 6e        	<unknown>
20041bf6: 74 65        	clc	ca3, 200(ca0)
20041bf8: 72 72        	clc	ctp, 312(csp)
20041bfa: 75 70        	c.lui	zero, -3
20041bfc: 74 73        	clc	ca3, 224(ca4)
20041bfe: 0a 00        	c.slli	zero, 2
20041c00: 3d 3d        	cjal	0x20041a3e <.LBB2_1+0xc>
20041c02: 3d 3d        	cjal	0x20041a40 <.LBB2_1+0xe>
20041c04: 3d 3d        	cjal	0x20041a42 <.LBB2_1+0x10>
20041c06: 3d 3d        	cjal	0x20041a44 <_write(int, char const*, int)>
20041c08: 3d 3d        	cjal	0x20041a46 <_write(int, char const*, int)+0x2>
20041c0a: 3d 3d        	cjal	0x20041a48 <_write(int, char const*, int)+0x4>
20041c0c: 3d 3d        	cjal	0x20041a4a <_write(int, char const*, int)+0x6>
20041c0e: 3d 3d        	cjal	0x20041a4c <_write(int, char const*, int)+0x8>
20041c10: 3d 3d        	cjal	0x20041a4e <_write(int, char const*, int)+0xa>
20041c12: 3d 3d        	cjal	0x20041a50 <_write(int, char const*, int)+0xc>
20041c14: 3d 3d        	cjal	0x20041a52 <_write(int, char const*, int)+0xe>
20041c16: 3d 3d        	cjal	0x20041a54 <.LBB3_2>
20041c18: 3d 3d        	cjal	0x20041a56 <.LBB3_2+0x2>
20041c1a: 3d 3d        	cjal	0x20041a58 <.LBB3_2+0x4>
20041c1c: 3d 3d        	cjal	0x20041a5a <.LBB3_2+0x6>
20041c1e: 3d 3d        	cjal	0x20041a5c <.LBB3_3>
20041c20: 3d 3d        	cjal	0x20041a5e <.LBB3_3+0x2>
20041c22: 3d 3d        	cjal	0x20041a60 <.LBB3_3+0x4>
20041c24: 3d 3d        	cjal	0x20041a62 <.LBB3_3+0x6>
20041c26: 3d 3d        	cjal	0x20041a64 <.LBB3_3+0x8>
20041c28: 3d 3d        	cjal	0x20041a66 <.LBB3_3+0xa>
20041c2a: 3d 3d        	cjal	0x20041a68 <.LBB3_3+0xc>
20041c2c: 3d 3d        	cjal	0x20041a6a <.LBB3_3+0xe>
20041c2e: 3d 3d        	cjal	0x20041a6c <.LBB3_3+0x10>
20041c30: 3d 3d        	cjal	0x20041a6e <.LBB3_3+0x12>
20041c32: 3d 0a        	<unknown>
20041c34: 00 25        	<unknown>
20041c36: 73 20 77 6f  	csrs	1783, a4
20041c3a: 72 64        	clc	cs0, 280(csp)
20041c3c: 20 25        	<unknown>
20041c3e: 64 20        	<unknown>
20041c40: 69 73        	lui	t1, 1048570
20041c42: 20 30        	<unknown>
20041c44: 78 25        	<unknown>
20041c46: 30 38        	<unknown>
20041c48: 78 0a        	cincoffset	ca4, csp, 284
20041c4a: 00 54        	clw	s0, 40(cs0)
20041c4c: 65 73        	lui	t1, 1048569
20041c4e: 74 69        	clc	ca3, 208(ca0)
20041c50: 6e 67        	clc	ca4, 216(csp)
20041c52: 20 73        	clc	cs0, 96(ca4)
20041c54: 77 20 69 6e  	<unknown>
20041c58: 74 65        	clc	ca3, 200(ca0)
20041c5a: 72 72        	clc	ctp, 312(csp)
20041c5c: 75 70        	c.lui	zero, -3
20041c5e: 74 73        	clc	ca3, 224(ca4)
20041c60: 0a 00        	c.slli	zero, 2
20041c62: 63 61 6c 6c  	<unknown>
20041c66: 69 6e        	<unknown>
20041c68: 67 20 63 68  	<unknown>
20041c6c: 65 72        	lui	tp, 1048569
20041c6e: 69 6f        	<unknown>
20041c70: 74 20        	<unknown>
20041c72: 74 73        	clc	ca3, 224(ca4)
20041c74: 61 66        	lui	a2, 24
20041c76: 65 20        	cjal	0x20041d1e <_pcc_end+0x1e>
20041c78: 74 65        	clc	ca3, 200(ca0)
20041c7a: 73 74 0a 00  	csrrci	s0, ustatus, 20
20041c7e: 53 65 74 74  	<unknown>
20041c82: 69 6e        	<unknown>
20041c84: 67 20 75 70  	<unknown>
20041c88: 20 49        	clw	s0, 80(ca0)
20041c8a: 53 52 20 61  	<unknown>
20041c8e: 6e 64        	clc	cs0, 216(csp)
20041c90: 20 50        	clw	s0, 96(cs0)
20041c92: 4c 49        	clw	a1, 20(ca0)
20041c94: 43 0a 00 54  	<unknown>
20041c98: 65 73        	lui	t1, 1048569
20041c9a: 74 20        	<unknown>
20041c9c: 70 61        	clc	ca2, 192(ca0)
20041c9e: 73 73 65 64  	csrrci	t1, 1606, 10
20041ca2: 20 3a        	<unknown>
20041ca4: 2d 29        	cjal	0x200420de <_pcc_end+0x3de>
20041ca6: 20 0a        	cincoffset	cs0, csp, 280
20041ca8: 00 20        	<unknown>
20041caa: 53 74 61 72  	<unknown>
20041cae: 74 69        	clc	ca3, 208(ca0)
20041cb0: 6e 67        	clc	ca4, 216(csp)
20041cb2: 20 54        	clw	s0, 104(cs0)
20041cb4: 65 73        	lui	t1, 1048569
20041cb6: 74 20        	<unknown>
20041cb8: 25 73        	lui	t1, 1048553
20041cba: 0a 00        	c.slli	zero, 2
20041cbc: 54 65        	clc	ca3, 136(ca0)
20041cbe: 73 74 69 6e  	csrrci	s0, 1766, 18
20041cc2: 67 20 74 62  	<unknown>
20041cc6: 72 65        	clc	ca0, 280(csp)
20041cc8: 20 77        	clc	cs0, 104(ca4)
20041cca: 69 74        	lui	s0, 1048570
20041ccc: 68 20        	<unknown>
20041cce: 69 6e        	<unknown>
20041cd0: 74 65        	clc	ca3, 200(ca0)
20041cd2: 72 72        	clc	ctp, 312(csp)
20041cd4: 75 70        	c.lui	zero, -3
20041cd6: 74 73        	clc	ca3, 224(ca4)
20041cd8: 20 0a        	cincoffset	cs0, csp, 280
20041cda: 00 30        	<unknown>

20041cdb <HexTable>:
20041cdb: 30 31 32 33 34 35 36 37         01234567
20041ce3: 38 39 61 62 63 64 65 66         89abcdef
20041ceb: 30 31 32 33 34 35 36 37         01234567
20041cf3: 38 39 41 42 43 44 45 46         89ABCDEF

20041cfb <_rodata_end>:
20041cfb: 00 00        	unimp	
20041cfd: 00 00        	unimp	
20041cff: 00           	<unknown>
